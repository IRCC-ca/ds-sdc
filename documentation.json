{
    "pipes": [],
    "interfaces": [
        {
            "name": "buttonConfig",
            "id": "interface-buttonConfig-d85aada149040bbf2566f36d3d9dc2b91410a6deb27ce86cb0e076d8710c2c0240fb4d014f1609bb5fc2d8245b0ac6101184589d778466d9c9d4b0fa993ce177",
            "file": "packages/ds/web/src/components/button/button.tsx",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, h, Prop } from '@stencil/core';\n\ninterface buttonConfig {\n  category: string;\n  size: string;\n}\n\n@Component({\n  tag: 'djl-button',\n})\nexport class DjlButton {\n  /** (optional) Disabled attribute for <button> element */\n  @Prop() disabled?: boolean;\n\n  /** (optional) Name attribute for <button> element */\n  @Prop() name?: string;\n\n  /** (optional) Color attribute for <button> element*/\n  @Prop() color?: 'critical' | 'CTA';\n\n  /** (optional) Types for <button> element */\n  @Prop() type?: 'button' | 'submit' | 'reset';\n\n  /** (optional)  Value for <button> element */\n  @Prop() value?: string;\n\n  /** (optional) Category for <button> custom element */\n  @Prop() category?: 'primary' | 'secondary' | 'plain';\n\n  /** (optional) Size for <button> custom element */\n  @Prop() size?: 'small' | 'large';\n\n  /** (optional) aria-label for <button> element */\n  @Prop({ attribute: 'aria-label' }) ariaLabelBtn?: string;\n\n  // set the config for button specific element to be set on the app side\n  private config: buttonConfig = {\n    category: this.category,\n    size: this.size,\n  };\n\n  render() {\n    return (\n      <button\n        aria-label={this.ariaLabelBtn}\n        name={this.name}\n        {...this.config}\n        value={this.value}\n        disabled={this.disabled}\n        aria-disabled={this.disabled ? 'true' : null}\n        type={this.type}\n        color={this.color}\n      >\n        <slot />\n      </button>\n    );\n  }\n}\n",
            "properties": [
                {
                    "name": "category",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ButtonProps",
            "id": "interface-ButtonProps-d5764daa17efef010c7f63cea1afdf1937ce36ca13e163f697a39e618f7467a83f961267884693f388964fa3b8871aa4347f7ae35327670bb177dba0abe95d43",
            "file": "stories/Button.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { IRCCModule } from '@ircc-ca/ds-sdc-angular';\nimport { moduleMetadata } from '@storybook/angular';\nimport { Meta, Story } from '@storybook/angular/types-6-0';\n\nenum Color {\n    critical = 'critical',\n    cta = 'CTA',\n}\nenum Type {\n    button = 'button',\n    submit = 'submit',\n    reset = 'reset',\n}\nenum Category {\n    primary = 'primary',\n    secondary = 'secondary',\n    plain = 'plain',\n}\n\nenum Size {\n    small = 'small',\n    large = 'large',\n}\ninterface ButtonProps {\n    disabled?: boolean;\n    name?: string;\n    color?: Color | string;\n    type?: Type | string;\n    value?: string;\n    category?: Category | string;\n    size?: Size | string;\n    ariaLabel?: string;\n}\n\nexport default {\n    title: 'Components/Button',\n    args: {\n        ngContent: 'Label',\n    },\n    argTypes: {\n        color: {\n            description: 'Colors for button (optional)',\n            options: [Color.cta, Color.critical],\n            control: { type: 'radio' },\n        },\n        size: {\n            description: 'Size for button (optional)',\n            options: [Size.small, Size.large],\n            control: { type: 'radio' },\n        },\n        category: {\n            description: 'Category for button (optional)',\n            options: [Category.primary, Category.secondary, Category.plain],\n            control: { type: 'radio' },\n        },\n        type: {\n            description: 'Type for button (optional)',\n            options: [Type.button, Type.reset, Type.submit],\n            control: { type: 'radio' },\n        },\n    },\n    parameters: {\n        design: {\n            type: 'figma',\n            url: 'https://www.figma.com/file/16zKKXc4pzBdRAXmbz6Ht4/Components?node-id=8%3A62',\n        },\n    },\n    decorators: [\n        moduleMetadata({\n            imports: [CommonModule, IRCCModule],\n        }),\n    ],\n} as Meta;\n\nconst Template: Story<ButtonProps> = (args: ButtonProps) => ({\n    props: { ...args },\n    template: `<djl-button\n        color=\"${args.color}\"\n        category=\"${args.category}\"\n        size=\"${args.size}\"\n        disabled=\"${args.disabled}\"\n        type=\"${args.type}\"\n        aria-label=\"${args.ariaLabel}\"\n        name=\"${args.name}\"\n        value=\"${args.value}\"\n        >{{ngContent}}</djl-button\n    >`,\n});\n\nexport const Default = Template.bind({});\nDefault.args = {\n    color: Color.cta,\n    category: Category.primary,\n    disabled: false,\n    size: Size.small,\n    type: Type.button,\n    ariaLabel: 'This is an aria-label',\n    name: 'Stencil btn',\n    value: 'stencil',\n};\n",
            "properties": [
                {
                    "name": "ariaLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "category",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Category | string",
                    "optional": true,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Color | string",
                    "optional": true,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Size | string",
                    "optional": true,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Type | string",
                    "optional": true,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 30
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "EventEmitter",
            "id": "interface-EventEmitter-03fb774b40b2c9e630917c0ebe5ed5010df3427f3d6c5652e9398af22d3c0d607ad7ff1c6e0dc1ebf7257e10f81dcd79a0c28438fb6e69fd76d6a4d454759d95",
            "file": "packages/ds/react/lib/stencil-generated/react-component-lib/interfaces.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface EventEmitter<T = any> {\n  emit: (data?: T) => CustomEvent<T>;\n}\n\nexport interface StyleReactProps {\n  class?: string;\n  className?: string;\n  style?: { [key: string]: any };\n}\n\nexport interface OverlayEventDetail<T = any> {\n  data?: T;\n  role?: string;\n}\n\nexport interface OverlayInterface {\n  el: HTMLElement;\n  animated: boolean;\n  keyboardClose: boolean;\n  overlayIndex: number;\n  presented: boolean;\n\n  enterAnimation?: any;\n  leaveAnimation?: any;\n\n  didPresent: EventEmitter<void>;\n  willPresent: EventEmitter<void>;\n  willDismiss: EventEmitter<OverlayEventDetail>;\n  didDismiss: EventEmitter<OverlayEventDetail>;\n\n  present(): Promise<void>;\n  dismiss(data?: any, role?: string): Promise<boolean>;\n}\n",
            "properties": [
                {
                    "name": "emit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "HTMLStencilElement",
            "id": "interface-HTMLStencilElement-5161c83dd67343f8547bb77e5c3579d1a497a80ef2f8dd5c07c2f0be2d8214fc2ed500cbbdb0750c34ce36805d1d3f82e65745d3debe8de02fa6e5d95ac753b5",
            "file": "packages/ds/react/lib/stencil-generated/react-component-lib/createComponent.tsx",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import React, { createElement } from 'react';\n\nimport {\n  attachProps,\n  camelToDashCase,\n  createForwardRef,\n  dashToPascalCase,\n  isCoveredByReact,\n  mergeRefs,\n} from './utils';\n\nexport interface HTMLStencilElement extends HTMLElement {\n  componentOnReady(): Promise<this>;\n}\n\ninterface StencilReactInternalProps<ElementType> extends React.HTMLAttributes<ElementType> {\n  forwardedRef: React.RefObject<ElementType>;\n  ref?: React.Ref<any>;\n}\n\nexport const createReactComponent = <\n  PropType,\n  ElementType extends HTMLStencilElement,\n  ContextStateType = {},\n  ExpandedPropsTypes = {}\n>(\n  tagName: string,\n  ReactComponentContext?: React.Context<ContextStateType>,\n  manipulatePropsFunction?: (\n    originalProps: StencilReactInternalProps<ElementType>,\n    propsToPass: any,\n  ) => ExpandedPropsTypes,\n  defineCustomElement?: () => void,\n) => {\n  if (defineCustomElement !== undefined) {\n    defineCustomElement();\n  }\n\n  const displayName = dashToPascalCase(tagName);\n  const ReactComponent = class extends React.Component<StencilReactInternalProps<ElementType>> {\n    componentEl!: ElementType;\n\n    setComponentElRef = (element: ElementType) => {\n      this.componentEl = element;\n    };\n\n    constructor(props: StencilReactInternalProps<ElementType>) {\n      super(props);\n    }\n\n    componentDidMount() {\n      this.componentDidUpdate(this.props);\n    }\n\n    componentDidUpdate(prevProps: StencilReactInternalProps<ElementType>) {\n      attachProps(this.componentEl, this.props, prevProps);\n    }\n\n    render() {\n      const { children, forwardedRef, style, className, ref, ...cProps } = this.props;\n\n      let propsToPass = Object.keys(cProps).reduce((acc: any, name) => {\n        const value = (cProps as any)[name];\n\n        if (name.indexOf('on') === 0 && name[2] === name[2].toUpperCase()) {\n          const eventName = name.substring(2).toLowerCase();\n          if (typeof document !== 'undefined' && isCoveredByReact(eventName)) {\n            acc[name] = value;\n          }\n        } else {\n          // we should only render strings, booleans, and numbers as attrs in html.\n          // objects, functions, arrays etc get synced via properties on mount.\n          const type = typeof value;\n\n          if (type === 'string' || type === 'boolean' || type === 'number') {\n            acc[camelToDashCase(name)] = value;\n          }\n        }\n        return acc;\n      }, {});\n\n      if (manipulatePropsFunction) {\n        propsToPass = manipulatePropsFunction(this.props, propsToPass);\n      }\n\n      const newProps: Omit<StencilReactInternalProps<ElementType>, 'forwardedRef'> = {\n        ...propsToPass,\n        ref: mergeRefs(forwardedRef, this.setComponentElRef),\n        style,\n      };\n\n      /**\n       * We use createElement here instead of\n       * React.createElement to work around a\n       * bug in Vite (https://github.com/vitejs/vite/issues/6104).\n       * React.createElement causes all elements to be rendered\n       * as <tagname> instead of the actual Web Component.\n       */\n      return createElement(tagName, newProps, children);\n    }\n\n    static get displayName() {\n      return displayName;\n    }\n  };\n\n  // If context was passed to createReactComponent then conditionally add it to the Component Class\n  if (ReactComponentContext) {\n    ReactComponent.contextType = ReactComponentContext;\n  }\n\n  return createForwardRef<PropType, ElementType>(ReactComponent, displayName);\n};\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 167,
            "methods": [
                {
                    "name": "componentOnReady",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<>",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "extends": "HTMLElement"
        },
        {
            "name": "IIconConfig",
            "id": "interface-IIconConfig-9abd37042da71431c65c655cafc32eaa5cf9808bb7d64caf8c63679df5812c900457a465a72c6dd5b8e39b35dda53d396ed73e9eadd44830b10cc0e8eaa66f8f",
            "file": "packages/ds/angular/icon/icon.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\nexport const FONT_FAMILIES = {\n    ['fa-solid']: null,\n    ['fa-thin']: null,\n    ['fa-light']: null,\n    ['fa-regular']: null,\n    ['fa-brands']: null,\n};\n\nexport interface IIconConfig {\n    ariaLabel?: string;\n    unicode: string;\n    fontFamily: keyof typeof FONT_FAMILIES;\n}\n\n@Component({\n    selector: 'jds-font-icon',\n    templateUrl: './icon.component.html',\n    styleUrls: ['./icon.component.scss'],\n})\nexport class IconComponent {\n    @Input() iconConfig!: IIconConfig;\n\n    public get formattedIcon(): string {\n        return \"'\" + '\\\\' + this.iconConfig.unicode + \"'\";\n    }\n\n    public get isHidden(): boolean {\n        return this.iconConfig.ariaLabel === '';\n    }\n}\n",
            "properties": [
                {
                    "name": "ariaLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "fontFamily",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "unicode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "OverlayElement",
            "id": "interface-OverlayElement-fe536e3c725a7ad8c21da2d8fb6e8b3d71b0a8ca3ffb8f6557ddee780b80ec9653298d6b1648760668e60d5d6fb26c946c56217583571c9c820e483a2befcde2",
            "file": "packages/ds/react/lib/stencil-generated/react-component-lib/createOverlayComponent.tsx",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { OverlayEventDetail } from './interfaces';\nimport {\n  StencilReactForwardedRef,\n  attachProps,\n  dashToPascalCase,\n  defineCustomElement,\n  setRef,\n} from './utils';\n\ninterface OverlayElement extends HTMLElement {\n  present: () => Promise<void>;\n  dismiss: (data?: any, role?: string | undefined) => Promise<boolean>;\n}\n\nexport interface ReactOverlayProps {\n  children?: React.ReactNode;\n  isOpen: boolean;\n  onDidDismiss?: (event: CustomEvent<OverlayEventDetail>) => void;\n  onDidPresent?: (event: CustomEvent<OverlayEventDetail>) => void;\n  onWillDismiss?: (event: CustomEvent<OverlayEventDetail>) => void;\n  onWillPresent?: (event: CustomEvent<OverlayEventDetail>) => void;\n}\n\nexport const createOverlayComponent = <\n  OverlayComponent extends object,\n  OverlayType extends OverlayElement\n>(\n  tagName: string,\n  controller: { create: (options: any) => Promise<OverlayType> },\n  customElement?: any\n) => {\n  defineCustomElement(tagName, customElement);\n\n  const displayName = dashToPascalCase(tagName);\n  const didDismissEventName = `on${displayName}DidDismiss`;\n  const didPresentEventName = `on${displayName}DidPresent`;\n  const willDismissEventName = `on${displayName}WillDismiss`;\n  const willPresentEventName = `on${displayName}WillPresent`;\n\n  type Props = OverlayComponent &\n    ReactOverlayProps & {\n      forwardedRef?: StencilReactForwardedRef<OverlayType>;\n    };\n\n  let isDismissing = false;\n\n  class Overlay extends React.Component<Props> {\n    overlay?: OverlayType;\n    el!: HTMLDivElement;\n\n    constructor(props: Props) {\n      super(props);\n      if (typeof document !== 'undefined') {\n        this.el = document.createElement('div');\n      }\n      this.handleDismiss = this.handleDismiss.bind(this);\n    }\n\n    static get displayName() {\n      return displayName;\n    }\n\n    componentDidMount() {\n      if (this.props.isOpen) {\n        this.present();\n      }\n    }\n\n    componentWillUnmount() {\n      if (this.overlay) {\n        this.overlay.dismiss();\n      }\n    }\n\n    handleDismiss(event: CustomEvent<OverlayEventDetail<any>>) {\n      if (this.props.onDidDismiss) {\n        this.props.onDidDismiss(event);\n      }\n      setRef(this.props.forwardedRef, null)\n    }\n\n    shouldComponentUpdate(nextProps: Props) {\n      // Check if the overlay component is about to dismiss\n      if (this.overlay && nextProps.isOpen !== this.props.isOpen && nextProps.isOpen === false) {\n        isDismissing = true;\n      }\n\n      return true;\n    }\n\n    async componentDidUpdate(prevProps: Props) {\n      if (this.overlay) {\n        attachProps(this.overlay, this.props, prevProps);\n      }\n\n      if (prevProps.isOpen !== this.props.isOpen && this.props.isOpen === true) {\n        this.present(prevProps);\n      }\n      if (this.overlay && prevProps.isOpen !== this.props.isOpen && this.props.isOpen === false) {\n        await this.overlay.dismiss();\n        isDismissing = false;\n\n        /**\n         * Now that the overlay is dismissed\n         * we need to render again so that any\n         * inner components will be unmounted\n         */\n        this.forceUpdate();\n      }\n    }\n\n    async present(prevProps?: Props) {\n      const {\n        children,\n        isOpen,\n        onDidDismiss,\n        onDidPresent,\n        onWillDismiss,\n        onWillPresent,\n        ...cProps\n      } = this.props;\n      const elementProps = {\n        ...cProps,\n        ref: this.props.forwardedRef,\n        [didDismissEventName]: this.handleDismiss,\n        [didPresentEventName]: (e: CustomEvent) =>\n          this.props.onDidPresent && this.props.onDidPresent(e),\n        [willDismissEventName]: (e: CustomEvent) =>\n          this.props.onWillDismiss && this.props.onWillDismiss(e),\n        [willPresentEventName]: (e: CustomEvent) =>\n          this.props.onWillPresent && this.props.onWillPresent(e),\n      };\n\n      this.overlay = await controller.create({\n        ...elementProps,\n        component: this.el,\n        componentProps: {},\n      });\n\n      setRef(this.props.forwardedRef, this.overlay);\n      attachProps(this.overlay, elementProps, prevProps);\n\n      await this.overlay.present();\n    }\n\n    render() {\n      /**\n       * Continue to render the component even when\n       * overlay is dismissing otherwise component\n       * will be hidden before animation is done.\n       */\n      return ReactDOM.createPortal(this.props.isOpen || isDismissing ? this.props.children : null, this.el);\n    }\n  }\n\n  return React.forwardRef<OverlayType, Props>((props, ref) => {\n    return <Overlay {...props} forwardedRef={ref} />;\n  });\n};\n",
            "properties": [
                {
                    "name": "dismiss",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "present",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "HTMLElement"
        },
        {
            "name": "OverlayEventDetail",
            "id": "interface-OverlayEventDetail-03fb774b40b2c9e630917c0ebe5ed5010df3427f3d6c5652e9398af22d3c0d607ad7ff1c6e0dc1ebf7257e10f81dcd79a0c28438fb6e69fd76d6a4d454759d95",
            "file": "packages/ds/react/lib/stencil-generated/react-component-lib/interfaces.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface EventEmitter<T = any> {\n  emit: (data?: T) => CustomEvent<T>;\n}\n\nexport interface StyleReactProps {\n  class?: string;\n  className?: string;\n  style?: { [key: string]: any };\n}\n\nexport interface OverlayEventDetail<T = any> {\n  data?: T;\n  role?: string;\n}\n\nexport interface OverlayInterface {\n  el: HTMLElement;\n  animated: boolean;\n  keyboardClose: boolean;\n  overlayIndex: number;\n  presented: boolean;\n\n  enterAnimation?: any;\n  leaveAnimation?: any;\n\n  didPresent: EventEmitter<void>;\n  willPresent: EventEmitter<void>;\n  willDismiss: EventEmitter<OverlayEventDetail>;\n  didDismiss: EventEmitter<OverlayEventDetail>;\n\n  present(): Promise<void>;\n  dismiss(data?: any, role?: string): Promise<boolean>;\n}\n",
            "properties": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "role",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "OverlayInterface",
            "id": "interface-OverlayInterface-03fb774b40b2c9e630917c0ebe5ed5010df3427f3d6c5652e9398af22d3c0d607ad7ff1c6e0dc1ebf7257e10f81dcd79a0c28438fb6e69fd76d6a4d454759d95",
            "file": "packages/ds/react/lib/stencil-generated/react-component-lib/interfaces.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface EventEmitter<T = any> {\n  emit: (data?: T) => CustomEvent<T>;\n}\n\nexport interface StyleReactProps {\n  class?: string;\n  className?: string;\n  style?: { [key: string]: any };\n}\n\nexport interface OverlayEventDetail<T = any> {\n  data?: T;\n  role?: string;\n}\n\nexport interface OverlayInterface {\n  el: HTMLElement;\n  animated: boolean;\n  keyboardClose: boolean;\n  overlayIndex: number;\n  presented: boolean;\n\n  enterAnimation?: any;\n  leaveAnimation?: any;\n\n  didPresent: EventEmitter<void>;\n  willPresent: EventEmitter<void>;\n  willDismiss: EventEmitter<OverlayEventDetail>;\n  didDismiss: EventEmitter<OverlayEventDetail>;\n\n  present(): Promise<void>;\n  dismiss(data?: any, role?: string): Promise<boolean>;\n}\n",
            "properties": [
                {
                    "name": "animated",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "didDismiss",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<OverlayEventDetail>",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "didPresent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<void>",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "el",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLElement",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "enterAnimation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "keyboardClose",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "leaveAnimation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "overlayIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "presented",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "willDismiss",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<OverlayEventDetail>",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "willPresent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<void>",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "indexSignatures": [],
            "kind": 167,
            "methods": [
                {
                    "name": "dismiss",
                    "args": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "role",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<boolean>",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "role",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "present",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ]
        },
        {
            "name": "ReactOverlayProps",
            "id": "interface-ReactOverlayProps-fe536e3c725a7ad8c21da2d8fb6e8b3d71b0a8ca3ffb8f6557ddee780b80ec9653298d6b1648760668e60d5d6fb26c946c56217583571c9c820e483a2befcde2",
            "file": "packages/ds/react/lib/stencil-generated/react-component-lib/createOverlayComponent.tsx",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { OverlayEventDetail } from './interfaces';\nimport {\n  StencilReactForwardedRef,\n  attachProps,\n  dashToPascalCase,\n  defineCustomElement,\n  setRef,\n} from './utils';\n\ninterface OverlayElement extends HTMLElement {\n  present: () => Promise<void>;\n  dismiss: (data?: any, role?: string | undefined) => Promise<boolean>;\n}\n\nexport interface ReactOverlayProps {\n  children?: React.ReactNode;\n  isOpen: boolean;\n  onDidDismiss?: (event: CustomEvent<OverlayEventDetail>) => void;\n  onDidPresent?: (event: CustomEvent<OverlayEventDetail>) => void;\n  onWillDismiss?: (event: CustomEvent<OverlayEventDetail>) => void;\n  onWillPresent?: (event: CustomEvent<OverlayEventDetail>) => void;\n}\n\nexport const createOverlayComponent = <\n  OverlayComponent extends object,\n  OverlayType extends OverlayElement\n>(\n  tagName: string,\n  controller: { create: (options: any) => Promise<OverlayType> },\n  customElement?: any\n) => {\n  defineCustomElement(tagName, customElement);\n\n  const displayName = dashToPascalCase(tagName);\n  const didDismissEventName = `on${displayName}DidDismiss`;\n  const didPresentEventName = `on${displayName}DidPresent`;\n  const willDismissEventName = `on${displayName}WillDismiss`;\n  const willPresentEventName = `on${displayName}WillPresent`;\n\n  type Props = OverlayComponent &\n    ReactOverlayProps & {\n      forwardedRef?: StencilReactForwardedRef<OverlayType>;\n    };\n\n  let isDismissing = false;\n\n  class Overlay extends React.Component<Props> {\n    overlay?: OverlayType;\n    el!: HTMLDivElement;\n\n    constructor(props: Props) {\n      super(props);\n      if (typeof document !== 'undefined') {\n        this.el = document.createElement('div');\n      }\n      this.handleDismiss = this.handleDismiss.bind(this);\n    }\n\n    static get displayName() {\n      return displayName;\n    }\n\n    componentDidMount() {\n      if (this.props.isOpen) {\n        this.present();\n      }\n    }\n\n    componentWillUnmount() {\n      if (this.overlay) {\n        this.overlay.dismiss();\n      }\n    }\n\n    handleDismiss(event: CustomEvent<OverlayEventDetail<any>>) {\n      if (this.props.onDidDismiss) {\n        this.props.onDidDismiss(event);\n      }\n      setRef(this.props.forwardedRef, null)\n    }\n\n    shouldComponentUpdate(nextProps: Props) {\n      // Check if the overlay component is about to dismiss\n      if (this.overlay && nextProps.isOpen !== this.props.isOpen && nextProps.isOpen === false) {\n        isDismissing = true;\n      }\n\n      return true;\n    }\n\n    async componentDidUpdate(prevProps: Props) {\n      if (this.overlay) {\n        attachProps(this.overlay, this.props, prevProps);\n      }\n\n      if (prevProps.isOpen !== this.props.isOpen && this.props.isOpen === true) {\n        this.present(prevProps);\n      }\n      if (this.overlay && prevProps.isOpen !== this.props.isOpen && this.props.isOpen === false) {\n        await this.overlay.dismiss();\n        isDismissing = false;\n\n        /**\n         * Now that the overlay is dismissed\n         * we need to render again so that any\n         * inner components will be unmounted\n         */\n        this.forceUpdate();\n      }\n    }\n\n    async present(prevProps?: Props) {\n      const {\n        children,\n        isOpen,\n        onDidDismiss,\n        onDidPresent,\n        onWillDismiss,\n        onWillPresent,\n        ...cProps\n      } = this.props;\n      const elementProps = {\n        ...cProps,\n        ref: this.props.forwardedRef,\n        [didDismissEventName]: this.handleDismiss,\n        [didPresentEventName]: (e: CustomEvent) =>\n          this.props.onDidPresent && this.props.onDidPresent(e),\n        [willDismissEventName]: (e: CustomEvent) =>\n          this.props.onWillDismiss && this.props.onWillDismiss(e),\n        [willPresentEventName]: (e: CustomEvent) =>\n          this.props.onWillPresent && this.props.onWillPresent(e),\n      };\n\n      this.overlay = await controller.create({\n        ...elementProps,\n        component: this.el,\n        componentProps: {},\n      });\n\n      setRef(this.props.forwardedRef, this.overlay);\n      attachProps(this.overlay, elementProps, prevProps);\n\n      await this.overlay.present();\n    }\n\n    render() {\n      /**\n       * Continue to render the component even when\n       * overlay is dismissing otherwise component\n       * will be hidden before animation is done.\n       */\n      return ReactDOM.createPortal(this.props.isOpen || isDismissing ? this.props.children : null, this.el);\n    }\n  }\n\n  return React.forwardRef<OverlayType, Props>((props, ref) => {\n    return <Overlay {...props} forwardedRef={ref} />;\n  });\n};\n",
            "properties": [
                {
                    "name": "children",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "React.ReactNode",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "isOpen",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "onDidDismiss",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "onDidPresent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "onWillDismiss",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "onWillPresent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 24
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "StencilReactInternalProps",
            "id": "interface-StencilReactInternalProps-5161c83dd67343f8547bb77e5c3579d1a497a80ef2f8dd5c07c2f0be2d8214fc2ed500cbbdb0750c34ce36805d1d3f82e65745d3debe8de02fa6e5d95ac753b5",
            "file": "packages/ds/react/lib/stencil-generated/react-component-lib/createComponent.tsx",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import React, { createElement } from 'react';\n\nimport {\n  attachProps,\n  camelToDashCase,\n  createForwardRef,\n  dashToPascalCase,\n  isCoveredByReact,\n  mergeRefs,\n} from './utils';\n\nexport interface HTMLStencilElement extends HTMLElement {\n  componentOnReady(): Promise<this>;\n}\n\ninterface StencilReactInternalProps<ElementType> extends React.HTMLAttributes<ElementType> {\n  forwardedRef: React.RefObject<ElementType>;\n  ref?: React.Ref<any>;\n}\n\nexport const createReactComponent = <\n  PropType,\n  ElementType extends HTMLStencilElement,\n  ContextStateType = {},\n  ExpandedPropsTypes = {}\n>(\n  tagName: string,\n  ReactComponentContext?: React.Context<ContextStateType>,\n  manipulatePropsFunction?: (\n    originalProps: StencilReactInternalProps<ElementType>,\n    propsToPass: any,\n  ) => ExpandedPropsTypes,\n  defineCustomElement?: () => void,\n) => {\n  if (defineCustomElement !== undefined) {\n    defineCustomElement();\n  }\n\n  const displayName = dashToPascalCase(tagName);\n  const ReactComponent = class extends React.Component<StencilReactInternalProps<ElementType>> {\n    componentEl!: ElementType;\n\n    setComponentElRef = (element: ElementType) => {\n      this.componentEl = element;\n    };\n\n    constructor(props: StencilReactInternalProps<ElementType>) {\n      super(props);\n    }\n\n    componentDidMount() {\n      this.componentDidUpdate(this.props);\n    }\n\n    componentDidUpdate(prevProps: StencilReactInternalProps<ElementType>) {\n      attachProps(this.componentEl, this.props, prevProps);\n    }\n\n    render() {\n      const { children, forwardedRef, style, className, ref, ...cProps } = this.props;\n\n      let propsToPass = Object.keys(cProps).reduce((acc: any, name) => {\n        const value = (cProps as any)[name];\n\n        if (name.indexOf('on') === 0 && name[2] === name[2].toUpperCase()) {\n          const eventName = name.substring(2).toLowerCase();\n          if (typeof document !== 'undefined' && isCoveredByReact(eventName)) {\n            acc[name] = value;\n          }\n        } else {\n          // we should only render strings, booleans, and numbers as attrs in html.\n          // objects, functions, arrays etc get synced via properties on mount.\n          const type = typeof value;\n\n          if (type === 'string' || type === 'boolean' || type === 'number') {\n            acc[camelToDashCase(name)] = value;\n          }\n        }\n        return acc;\n      }, {});\n\n      if (manipulatePropsFunction) {\n        propsToPass = manipulatePropsFunction(this.props, propsToPass);\n      }\n\n      const newProps: Omit<StencilReactInternalProps<ElementType>, 'forwardedRef'> = {\n        ...propsToPass,\n        ref: mergeRefs(forwardedRef, this.setComponentElRef),\n        style,\n      };\n\n      /**\n       * We use createElement here instead of\n       * React.createElement to work around a\n       * bug in Vite (https://github.com/vitejs/vite/issues/6104).\n       * React.createElement causes all elements to be rendered\n       * as <tagname> instead of the actual Web Component.\n       */\n      return createElement(tagName, newProps, children);\n    }\n\n    static get displayName() {\n      return displayName;\n    }\n  };\n\n  // If context was passed to createReactComponent then conditionally add it to the Component Class\n  if (ReactComponentContext) {\n    ReactComponent.contextType = ReactComponentContext;\n  }\n\n  return createForwardRef<PropType, ElementType>(ReactComponent, displayName);\n};\n",
            "properties": [
                {
                    "name": "forwardedRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "React.RefObject<ElementType>",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "ref",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "React.Ref<any>",
                    "optional": true,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "StyleReactProps",
            "id": "interface-StyleReactProps-03fb774b40b2c9e630917c0ebe5ed5010df3427f3d6c5652e9398af22d3c0d607ad7ff1c6e0dc1ebf7257e10f81dcd79a0c28438fb6e69fd76d6a4d454759d95",
            "file": "packages/ds/react/lib/stencil-generated/react-component-lib/interfaces.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface EventEmitter<T = any> {\n  emit: (data?: T) => CustomEvent<T>;\n}\n\nexport interface StyleReactProps {\n  class?: string;\n  className?: string;\n  style?: { [key: string]: any };\n}\n\nexport interface OverlayEventDetail<T = any> {\n  data?: T;\n  role?: string;\n}\n\nexport interface OverlayInterface {\n  el: HTMLElement;\n  animated: boolean;\n  keyboardClose: boolean;\n  overlayIndex: number;\n  presented: boolean;\n\n  enterAnimation?: any;\n  leaveAnimation?: any;\n\n  didPresent: EventEmitter<void>;\n  willPresent: EventEmitter<void>;\n  willDismiss: EventEmitter<OverlayEventDetail>;\n  didDismiss: EventEmitter<OverlayEventDetail>;\n\n  present(): Promise<void>;\n  dismiss(data?: any, role?: string): Promise<boolean>;\n}\n",
            "properties": [
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "className",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "style",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        }
    ],
    "injectables": [],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-b63fab579d2ecffbf8f207d8e38a366c9c189171cda75eab5066c0eec4050b79cd10e62a6ea4b6f5211997e29465b5d70d657297c73ceac98917ddbc4cee68d2",
            "file": "sample/src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'sample'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "translate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TranslateService",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "findRoute",
                    "args": [
                        {
                            "name": "dir",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "1"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dir",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "1",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "switchLang",
                    "args": [
                        {
                            "name": "lang",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "lang",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { TranslateService } from '@ngx-translate/core';\nimport { routes } from './routing/app.routing.module';\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent {\n    title = 'sample';\n\n    // config = {\n    //   id: 'firstName',\n    //   type: 'input',\n    //   label: 'test label',\n    //   hint: 'test test',\n    //   placeholder: '',\n    // } as IFieldConfig;\n\n    constructor(public translate: TranslateService, private router: Router) {\n        translate.addLangs(['en', 'fr']);\n        translate.setDefaultLang('en');\n    }\n\n    switchLang(lang: string) {\n        this.translate.use(lang);\n    }\n\n    findRoute(dir = 1) {\n        const route = this.router.url.replace('/', '');\n        let newIndex =\n            routes.findIndex((routerRoute) => {\n                return routerRoute.path === route;\n            }) + dir;\n        switch (Math.sign(dir)) {\n            case 1:\n                newIndex = newIndex % routes.length;\n                break;\n            case -1:\n                newIndex = (newIndex + routes.length) % routes.length;\n                break;\n        }\n        const newPath = routes[newIndex].path;\n        this.router.navigate([newPath]);\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '~@ircc-ca/ds-sdc-core/typography/typography';\n:host {\n    display: flex;\n    min-height: 100vh;\n    flex-direction: column;\n    justify-content: flex-start;\n    .main-nav {\n        flex-grow: 1;\n    }\n    > *:not(jds-header, jds-footer) {\n        margin: 0 10%;\n    }\n}\n.open_in_new {\n    &::after {\n        margin: 0.2em;\n        @include typography.fonts-FA-decor-icon('\\f08e', 'fa-light');\n    }\n}\n",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "  <jds-header>\n    <span class=\"form-inline\">\n      <select \n          #selectedLang \n          (change)=\"switchLang(selectedLang.value)\">\n        <option *ngFor=\"let language of translate.getLangs()\" \n          lang=\"language\"\n          [value]=\"language\"\n          [selected]=\"language === translate.currentLang\">\n          {{ language }}\n        </option>\n      </select>\n    </span>\n  </jds-header>\n  <h1>{{ 'App.AppName' | translate }}</h1>\n  <span class=\"body3\">\n    <p>{{'App.Text' | translate }}</p>\n  </span>\n  <div class=\"main-nav\">\n    <router-outlet></router-outlet>\n  </div>\n\n  <span class=\"body4\">\n    <p>{{'App.InfoPackage' | translate}}</p>\n    <p [innerHTML]=\"'App.PackageLink' | translate\"></p>\n  </span>\n  <button size=\"small\" category=\"plain\" (click)=\"findRoute(-1)\">{{ 'Footer.Prev' | translate }}</button>\n  <button size=\"small\" category=\"plain\" (click)=\"findRoute(1)\">{{ 'Footer.Next' | translate }}</button>\n  <jds-footer>\n    {{'Footer.DateModified' | translate }}: 2022-05-06<br />\n  </jds-footer>\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-d3212421b7526f8918f5ff705725ddd12c6996bd16f105f0bdb222e789842e3226644bb397e5c9753ed16d7678c3385220a06498b77dcd1127ddd0008218d0e3",
            "file": "packages/ds/angular/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jds-button",
            "styleUrls": [
                "./button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "category",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "\"primary\" | \"secondary\" | \"plain\"",
                    "decorators": []
                },
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "\"critical\" | \"CTA\"",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "\"small\" | \"large\"",
                    "decorators": []
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "\"button\" | \"submit\" | \"reset\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n    selector: 'jds-button',\n    templateUrl: './button.component.html',\n    styleUrls: ['./button.component.scss'],\n})\nexport class ButtonComponent {\n    @Input() category?: 'primary' | 'secondary' | 'plain';\n    @Input() size?: 'small' | 'large';\n    @Input() color?: 'critical' | 'CTA';\n    @Input() type?: 'button' | 'submit' | 'reset';\n    @Input() ariaLabel?: string;\n    @Input() disabled?: boolean;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./button.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<button\n    [attr.aria-label]=\"ariaLabel\"\n    [attr.color]=\"color\"\n    [attr.category]=\"category\"\n    [attr.size]=\"size\"\n    [attr.type]=\"type\"\n    [disabled]=\"disabled\"\n>\n    <ng-content></ng-content>\n</button>\n"
        },
        {
            "name": "CheckboxComponent",
            "id": "component-CheckboxComponent-6f44651a422c0b2517f8baf08c608b414d949241991b0e4ce7582d24007619e5213f0d10e97839c956236b38cb796531760d1b372ceaaa0f144873d9ab4ed8b3",
            "file": "packages/ds/angular/checkbox/checkbox.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jds-checkbox",
            "styleUrls": [
                "./checkbox.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./checkbox.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "\"small\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'jds-checkbox',\n  templateUrl: './checkbox.component.html',\n  styleUrls: ['./checkbox.component.css']\n})\nexport class CheckboxComponent { \n  @Input() size?: 'small' | 'large';\n  @Input() ariaLabel?: string;\n  @Input() disabled?: boolean;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./checkbox.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<div>\n    <input type=\"checkbox\">\n    <ng-content></ng-content>\n</div>\n"
        },
        {
            "name": "DjlButton",
            "id": "component-DjlButton-ba705f66032af50cff25d6c2bafd3af2f4ad32d0d8d7f1847e33e280fd24367ef18100ea92353da0fdb0197bc038051520d93e3da839c2de8dc10b4f440d0fce",
            "file": "packages/ds/angular/src/stencil-generated/components.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [
                "ariaLabelBtn",
                "category",
                "color",
                "disabled",
                "name",
                "size",
                "type",
                "value"
            ],
            "outputs": [],
            "providers": [],
            "selector": "djl-button",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-content></ng-content>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "el",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLElement",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, NgZone } from '@angular/core';\nimport { ProxyCmp, proxyOutputs } from './angular-component-lib/utils';\n\nimport { Components } from '@ircc-ca/ds-sdc-web';\n\n\n\n\nexport declare interface DjlButton extends Components.DjlButton {}\n\n@ProxyCmp({\n  defineCustomElementFn: undefined,\n  inputs: ['ariaLabelBtn', 'category', 'color', 'disabled', 'name', 'size', 'type', 'value']\n})\n@Component({\n  selector: 'djl-button',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  template: '<ng-content></ng-content>',\n  inputs: ['ariaLabelBtn', 'category', 'color', 'disabled', 'name', 'size', 'type', 'value']\n})\nexport class DjlButton {\n  protected el: HTMLElement;\n  constructor(c: ChangeDetectorRef, r: ElementRef, protected z: NgZone) {\n    c.detach();\n    this.el = r.nativeElement;\n  }\n}\n\n\nexport declare interface MyComponent extends Components.MyComponent {}\n\n@ProxyCmp({\n  defineCustomElementFn: undefined,\n  inputs: ['first', 'last', 'middle', 'theme']\n})\n@Component({\n  selector: 'my-component',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  template: '<ng-content></ng-content>',\n  inputs: ['first', 'last', 'middle', 'theme']\n})\nexport class MyComponent {\n  protected el: HTMLElement;\n  constructor(c: ChangeDetectorRef, r: ElementRef, protected z: NgZone) {\n    c.detach();\n    this.el = r.nativeElement;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "c",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "r",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "z",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "c",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "r",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "z",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "DjlButton",
            "id": "component-DjlButton-d85aada149040bbf2566f36d3d9dc2b91410a6deb27ce86cb0e076d8710c2c0240fb4d014f1609bb5fc2d8245b0ac6101184589d778466d9c9d4b0fa993ce177-1",
            "file": "packages/ds/web/src/components/button/button.tsx",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [],
            "styles": [],
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "ariaLabelBtn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>(optional) aria-label for <button> element</p>\n",
                    "line": 35,
                    "rawdescription": "\n(optional) aria-label for <button> element",
                    "decorators": [
                        {
                            "name": "Prop",
                            "stringifiedArguments": "{attribute: 'aria-label'}"
                        }
                    ]
                },
                {
                    "name": "category",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"primary\" | \"secondary\" | \"plain\"",
                    "optional": true,
                    "description": "<p>(optional) Category for <button> custom element</p>\n",
                    "line": 29,
                    "rawdescription": "\n(optional) Category for <button> custom element",
                    "decorators": [
                        {
                            "name": "Prop",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"critical\" | \"CTA\"",
                    "optional": true,
                    "description": "<p>(optional) Color attribute for <button> element</p>\n",
                    "line": 20,
                    "rawdescription": "\n(optional) Color attribute for <button> element",
                    "decorators": [
                        {
                            "name": "Prop",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "config",
                    "defaultValue": "{\n    category: this.category,\n    size: this.size,\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "buttonConfig",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>(optional) Disabled attribute for <button> element</p>\n",
                    "line": 14,
                    "rawdescription": "\n(optional) Disabled attribute for <button> element",
                    "decorators": [
                        {
                            "name": "Prop",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>(optional) Name attribute for <button> element</p>\n",
                    "line": 17,
                    "rawdescription": "\n(optional) Name attribute for <button> element",
                    "decorators": [
                        {
                            "name": "Prop",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"small\" | \"large\"",
                    "optional": true,
                    "description": "<p>(optional) Size for <button> custom element</p>\n",
                    "line": 32,
                    "rawdescription": "\n(optional) Size for <button> custom element",
                    "decorators": [
                        {
                            "name": "Prop",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"button\" | \"submit\" | \"reset\"",
                    "optional": true,
                    "description": "<p>(optional) Types for <button> element</p>\n",
                    "line": 23,
                    "rawdescription": "\n(optional) Types for <button> element",
                    "decorators": [
                        {
                            "name": "Prop",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>(optional)  Value for <button> element</p>\n",
                    "line": 26,
                    "rawdescription": "\n(optional)  Value for <button> element",
                    "decorators": [
                        {
                            "name": "Prop",
                            "stringifiedArguments": ""
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "render",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, h, Prop } from '@stencil/core';\n\ninterface buttonConfig {\n  category: string;\n  size: string;\n}\n\n@Component({\n  tag: 'djl-button',\n})\nexport class DjlButton {\n  /** (optional) Disabled attribute for <button> element */\n  @Prop() disabled?: boolean;\n\n  /** (optional) Name attribute for <button> element */\n  @Prop() name?: string;\n\n  /** (optional) Color attribute for <button> element*/\n  @Prop() color?: 'critical' | 'CTA';\n\n  /** (optional) Types for <button> element */\n  @Prop() type?: 'button' | 'submit' | 'reset';\n\n  /** (optional)  Value for <button> element */\n  @Prop() value?: string;\n\n  /** (optional) Category for <button> custom element */\n  @Prop() category?: 'primary' | 'secondary' | 'plain';\n\n  /** (optional) Size for <button> custom element */\n  @Prop() size?: 'small' | 'large';\n\n  /** (optional) aria-label for <button> element */\n  @Prop({ attribute: 'aria-label' }) ariaLabelBtn?: string;\n\n  // set the config for button specific element to be set on the app side\n  private config: buttonConfig = {\n    category: this.category,\n    size: this.size,\n  };\n\n  render() {\n    return (\n      <button\n        aria-label={this.ariaLabelBtn}\n        name={this.name}\n        {...this.config}\n        value={this.value}\n        disabled={this.disabled}\n        aria-disabled={this.disabled ? 'true' : null}\n        type={this.type}\n        color={this.color}\n      >\n        <slot />\n      </button>\n    );\n  }\n}\n",
            "tag": "djl-button",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "DjlButton-1"
        },
        {
            "name": "FooterComponent",
            "id": "component-FooterComponent-f175d15d3ee6f36cf35ac481811a0a6b1695f6496cf39745832afa91aa5a345134a836e8dd9937f0239ec2fc8d607b84c05e9387b160b5141014aade9ac72113",
            "file": "packages/ds/angular/footer/footer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jds-footer",
            "styleUrls": [
                "./footer.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./footer.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n    selector: 'jds-footer',\n    templateUrl: './footer.component.html',\n    styleUrls: ['./footer.component.scss'],\n})\nexport class FooterComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '~@ircc-ca/ds-sdc-core/tokens/sizes';\n@use '~@ircc-ca/ds-sdc-core/layout/layout-grid';\n@use '~@ircc-ca/ds-sdc-core/util/device';\n\n  .footing {\n    margin-top: sizes.$fixed-16;\n    margin-bottom: sizes.$fixed-16;\n  }\n\n  .grid-container {\n    display: grid;\n    @include layout-grid.grid(max-content auto, auto);\n    * {grid-column: auto / span 1};\n    \n    align-items: center;\n  }\n\n  .item1 {\n    align-self: center;\n      @include device.in-phone-layout () {\n        margin-left: sizes.$fixed-36;\n      }\n  }\n\n  .item2 {\n    justify-self: end;\n    align-self: center;\n  }",
                    "styleUrl": "./footer.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<footer class=\"footing\">\n    <div class=\"grid-container\">\n        <div class=\"item1 body3\">\n            <ng-content></ng-content>\n        </div>\n        <picture class=\"item2\">\n            <source srcset=\"assets/canada_logo_dark.svg\" media=\"(prefers-color-scheme: dark)\">\n            <img src=\"assets/canada_logo_light.svg\">\n        </picture>\n    </div>\n</footer>"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-4113d49a7485474ef2b68686a026d7612b0584f03efecd95943fe7c91caa90ca8ec8622cec3c8f6ab65268f644101d7fdb8abb02705014c49716d4712c67c0d8",
            "file": "packages/ds/angular/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jds-header",
            "styleUrls": [
                "./header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n    selector: 'jds-header',\n    templateUrl: './header.component.html',\n    styleUrls: ['./header.component.scss'],\n})\nexport class HeaderComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '~@ircc-ca/ds-sdc-core/tokens/sizes';\n@use '~@ircc-ca/ds-sdc-core/layout/layout-grid';\n\n.heading {\n  padding-top: sizes.$fixed-8;\n}\n\n.headerLine {\n    --global-divider: #102242;\n\n    color: var(--global-divider);\n    width: 100%;\n    border-width: sizes.$fixed-2;\n    border-style: solid;\n    margin-top: sizes.$fixed-24;\n}\n\n.grid-container {\n    display: grid;\n    @include layout-grid.grid(max-content auto, auto);\n    * {grid-column: auto / span 1};\n    \n    align-items: center;\n  }\n\n  .item2 {\n    justify-self: end;\n  }",
                    "styleUrl": "./header.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<header class=\"heading\">\n    <div class=\"grid-container\">\n        <picture>\n            <source srcset=\"assets/canada_govt_logo_dark.svg\" media=\"(prefers-color-scheme: dark)\">\n            <img src=\"assets/canada_govt_logo_light.svg\">\n        </picture>\n        <div class=\"item2\"><ng-content></ng-content></div>\n    </div>\n    <hr class=\"headerLine\"/>\n</header>"
        },
        {
            "name": "IconComponent",
            "id": "component-IconComponent-9abd37042da71431c65c655cafc32eaa5cf9808bb7d64caf8c63679df5812c900457a465a72c6dd5b8e39b35dda53d396ed73e9eadd44830b10cc0e8eaa66f8f",
            "file": "packages/ds/angular/icon/icon.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jds-font-icon",
            "styleUrls": [
                "./icon.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./icon.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "iconConfig",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "IIconConfig",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\nexport const FONT_FAMILIES = {\n    ['fa-solid']: null,\n    ['fa-thin']: null,\n    ['fa-light']: null,\n    ['fa-regular']: null,\n    ['fa-brands']: null,\n};\n\nexport interface IIconConfig {\n    ariaLabel?: string;\n    unicode: string;\n    fontFamily: keyof typeof FONT_FAMILIES;\n}\n\n@Component({\n    selector: 'jds-font-icon',\n    templateUrl: './icon.component.html',\n    styleUrls: ['./icon.component.scss'],\n})\nexport class IconComponent {\n    @Input() iconConfig!: IIconConfig;\n\n    public get formattedIcon(): string {\n        return \"'\" + '\\\\' + this.iconConfig.unicode + \"'\";\n    }\n\n    public get isHidden(): boolean {\n        return this.iconConfig.ariaLabel === '';\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '~@ircc-ca/ds-sdc-core/typography/typography';\n\n.font-icon {\n    &::before {\n        --font-unicode: inherit;\n        @include typography.fonts-FA-variable-icon(--font-unicode);\n    }\n}\n",
                    "styleUrl": "./icon.component.scss"
                }
            ],
            "stylesData": "",
            "accessors": {
                "formattedIcon": {
                    "name": "formattedIcon",
                    "getSignature": {
                        "name": "formattedIcon",
                        "type": "string",
                        "returnType": "string",
                        "line": 25
                    }
                },
                "isHidden": {
                    "name": "isHidden",
                    "getSignature": {
                        "name": "isHidden",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 29
                    }
                }
            },
            "templateData": "<span\n    class=\"font-icon\"\n    [attr.aria-hidden]=\"isHidden\"\n    [attr.aria-label]=\"iconConfig.ariaLabel\"\n    [style.--font-unicode]=\"formattedIcon\"\n    [ngClass]=\"iconConfig.fontFamily\"\n></span>\n"
        },
        {
            "name": "LinkComponent",
            "id": "component-LinkComponent-1020dde3e404f9d7e153694da1d2684c88e408a52fb1dab6ac75950badf433e6618993481ebc68aeaa5d21f2e0ca79cc507cd7389ef422ac08d33c1a22e02483",
            "file": "packages/ds/angular/link/link.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jds-link",
            "styleUrls": [
                "./link.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./link.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "download",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "href",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "target",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "\"_blank\" | \"_parent\" | \"_self\" | \"_top\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "linkIconConfig",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IIconConfig",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "buildIconConfig",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { IIconConfig } from '@ircc-ca/ds-sdc-angular/icon';\n\n@Component({\n    selector: 'jds-link',\n    templateUrl: './link.component.html',\n    styleUrls: ['./link.component.scss'],\n})\nexport class LinkComponent {\n    @Input() download?: string; //if developer is specifying a download in the href, they need to specify a download name in order for the \"download icon\" to appear next to it\n    @Input() href!: string;\n    @Input() target?: '_blank' | '_parent' | '_self' | '_top';\n    @Input() ariaLabel?: string;\n\n    linkIconConfig!: IIconConfig;\n\n    public get getIcon(): string[] {\n        if (this.download) {\n            return ['f56d', 'fa-solid'];\n        } else {\n            switch (this.href?.substr(0, 4)) {\n                case 'http':\n                    return ['f08e', 'fa-regular'];\n                case 'mail':\n                    return ['f0e0', 'fa-solid'];\n                case 'tel:':\n                    return ['f095', 'fa-solid'];\n                default:\n                    return ['', ''];\n            }\n        }\n    }\n\n    public buildIconConfig() {\n        this.linkIconConfig = {\n            unicode: this.getIcon[0],\n            fontFamily: this.getIcon[1],\n        } as IIconConfig;\n    }\n\n    public get hasIcon(): boolean {\n        if (\n            this.download !== undefined ||\n            this.href?.substr(0, 4) === 'http' ||\n            this.href?.substr(0, 4) === 'mail' ||\n            this.href?.substr(0, 4) === 'tel:'\n        ) {\n            this.buildIconConfig();\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    public get isHidden(): boolean {\n        return this.ariaLabel === '';\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '~@ircc-ca/ds-sdc-core/tokens/sizes';\n\n.icon {\n    padding-left: sizes.$fixed-8;\n}\n\n.font {\n    text-decoration: underline;\n}\n\na {\n    text-decoration: none;\n}",
                    "styleUrl": "./link.component.scss"
                }
            ],
            "stylesData": "",
            "accessors": {
                "getIcon": {
                    "name": "getIcon",
                    "getSignature": {
                        "name": "getIcon",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 17
                    }
                },
                "hasIcon": {
                    "name": "hasIcon",
                    "getSignature": {
                        "name": "hasIcon",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 41
                    }
                },
                "isHidden": {
                    "name": "isHidden",
                    "getSignature": {
                        "name": "isHidden",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 55
                    }
                }
            },
            "templateData": "<a [attr.href]=\"href\" [attr.download]=\"download\" [attr.target]=\"target\" [attr.aria-label]=\"ariaLabel\">\n    <span class=\"font\">\n        <ng-content [attr.aria-hidden]=\"isHidden\"></ng-content>\n    </span>\n    <jds-font-icon *ngIf=\"hasIcon\" class=\"icon\" [iconConfig]=\"linkIconConfig\"></jds-font-icon>\n</a>\n"
        },
        {
            "name": "MyComponent",
            "id": "component-MyComponent-ba705f66032af50cff25d6c2bafd3af2f4ad32d0d8d7f1847e33e280fd24367ef18100ea92353da0fdb0197bc038051520d93e3da839c2de8dc10b4f440d0fce",
            "file": "packages/ds/angular/src/stencil-generated/components.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [
                "first",
                "last",
                "middle",
                "theme"
            ],
            "outputs": [],
            "providers": [],
            "selector": "my-component",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-content></ng-content>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "el",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLElement",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, NgZone } from '@angular/core';\nimport { ProxyCmp, proxyOutputs } from './angular-component-lib/utils';\n\nimport { Components } from '@ircc-ca/ds-sdc-web';\n\n\n\n\nexport declare interface DjlButton extends Components.DjlButton {}\n\n@ProxyCmp({\n  defineCustomElementFn: undefined,\n  inputs: ['ariaLabelBtn', 'category', 'color', 'disabled', 'name', 'size', 'type', 'value']\n})\n@Component({\n  selector: 'djl-button',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  template: '<ng-content></ng-content>',\n  inputs: ['ariaLabelBtn', 'category', 'color', 'disabled', 'name', 'size', 'type', 'value']\n})\nexport class DjlButton {\n  protected el: HTMLElement;\n  constructor(c: ChangeDetectorRef, r: ElementRef, protected z: NgZone) {\n    c.detach();\n    this.el = r.nativeElement;\n  }\n}\n\n\nexport declare interface MyComponent extends Components.MyComponent {}\n\n@ProxyCmp({\n  defineCustomElementFn: undefined,\n  inputs: ['first', 'last', 'middle', 'theme']\n})\n@Component({\n  selector: 'my-component',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  template: '<ng-content></ng-content>',\n  inputs: ['first', 'last', 'middle', 'theme']\n})\nexport class MyComponent {\n  protected el: HTMLElement;\n  constructor(c: ChangeDetectorRef, r: ElementRef, protected z: NgZone) {\n    c.detach();\n    this.el = r.nativeElement;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "c",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "r",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "z",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 45,
                "jsdoctags": [
                    {
                        "name": "c",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "r",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "z",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "MyComponent",
            "id": "component-MyComponent-2d183671a0c783e55cab94a08ca517a367f21b9e4288492493ca1afb81ba3fa3ea365f7bb137416bbd40dace9e72a66f09c6bba02febdebf2300028af524ec51-1",
            "file": "packages/ds/web/src/components/my-component/my-component.tsx",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [],
            "styles": [],
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "first",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>The first name</p>\n",
                    "line": 13,
                    "rawdescription": "\n\nThe first name\n",
                    "decorators": [
                        {
                            "name": "Prop",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "last",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>The last name</p>\n",
                    "line": 23,
                    "rawdescription": "\n\nThe last name\n",
                    "decorators": [
                        {
                            "name": "Prop",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "middle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>The middle name</p>\n",
                    "line": 18,
                    "rawdescription": "\n\nThe middle name\n",
                    "decorators": [
                        {
                            "name": "Prop",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "theme",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Theme</p>\n",
                    "line": 28,
                    "rawdescription": "\n\nTheme\n",
                    "decorators": [
                        {
                            "name": "Prop",
                            "stringifiedArguments": ""
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getText",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "render",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, h, Prop } from '@stencil/core';\nimport { format } from '../../utils/utils';\n\n@Component({\n  tag: 'my-component',\n  styleUrl: 'my-component.scss',\n  shadow: true,\n})\nexport class MyComponent {\n  /**\n   * The first name\n   */\n  @Prop() first: string;\n\n  /**\n   * The middle name\n   */\n  @Prop() middle: string;\n\n  /**\n   * The last name\n   */\n  @Prop() last: string;\n\n   /**\n   * Theme\n   */\n  @Prop() theme: string;\n  private getText(): string {\n    return format(this.first, this.middle, this.last);\n  }\n\n  render() {\n    return <div>Hello, World! I'm <a href=\"styles.css\">test</a> {this.getText()}</div>;\n  }\n}\n",
            "tag": "my-component",
            "styleUrl": "my-component.scss",
            "shadow": true,
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "MyComponent-1"
        },
        {
            "name": "RadioButtonComponent",
            "id": "component-RadioButtonComponent-47fc3dd9cee8f0f6dc124e8219f4295f1d5b76727624a2d9eca9e586e786106c1a8460ba7d988c70050aa072e3438788038af70c4467cf426f6117f85466c4a3",
            "file": "packages/ds/angular/radio-button/radio-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jds-radio-button",
            "styleUrls": [
                "./radio-button.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./radio-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "\"small\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'jds-radio-button',\n  templateUrl: './radio-button.component.html',\n  styleUrls: ['./radio-button.component.css']\n})\nexport class RadioButtonComponent  { \n  @Input() size?: 'small' | 'large';\n  @Input() ariaLabel?: string;\n  @Input() disabled?: boolean;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./radio-button.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<div>\n    <input type=\"radio\" />\n    <ng-content></ng-content>\n</div>\n"
        },
        {
            "name": "Sandbox1Component",
            "id": "component-Sandbox1Component-f30de428d29c87496cab43f33692a7ee76da1eb1712d1eafe35d7921f13674127983f3bbaef44b2ae9bfa11958e79727bbdb3c1056e938d8cf6859a057e862b5",
            "file": "sample/src/app/sandbox1/sandbox1.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jds-sandbox1",
            "styleUrls": [
                "./sandbox1.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./sandbox1.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "indeterminateCheckbox",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLInputElement>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'indeterminateCheckbox'"
                        }
                    ]
                },
                {
                    "name": "indeterminateDisabledCheckbox",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLInputElement>",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'indeterminateDisabledCheckbox'"
                        }
                    ]
                },
                {
                    "name": "indeterminateInvalidCheckbox",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLInputElement>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'indeterminateInvalidCheckbox'"
                        }
                    ]
                },
                {
                    "name": "indeterminateSmall",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLInputElement>",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'indeterminateSmall'"
                        }
                    ]
                },
                {
                    "name": "invalidCheckbox",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLInputElement>",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'invalidCheckbox'"
                        }
                    ]
                },
                {
                    "name": "invalidCheckedCheckbox",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLInputElement>",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'invalidCheckedCheckbox'"
                        }
                    ]
                },
                {
                    "name": "invalidCheckedRadio",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLInputElement>",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'invalidCheckedRadio'"
                        }
                    ]
                },
                {
                    "name": "invalidRadio",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLInputElement>",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'invalidRadio'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AfterViewInit, Component, ElementRef, ViewChild } from '@angular/core';\n\n@Component({\n    selector: 'jds-sandbox1',\n    templateUrl: './sandbox1.component.html',\n    styleUrls: ['./sandbox1.component.scss'],\n})\nexport class Sandbox1Component implements AfterViewInit {\n    @ViewChild('invalidCheckbox')\n    invalidCheckbox!: ElementRef<HTMLInputElement>;\n    @ViewChild('invalidCheckedCheckbox')\n    invalidCheckedCheckbox!: ElementRef<HTMLInputElement>;\n    @ViewChild('indeterminateCheckbox')\n    indeterminateCheckbox!: ElementRef<HTMLInputElement>;\n    @ViewChild('indeterminateInvalidCheckbox')\n    indeterminateInvalidCheckbox!: ElementRef<HTMLInputElement>;\n    @ViewChild('indeterminateDisabledCheckbox')\n    indeterminateDisabledCheckbox!: ElementRef<HTMLInputElement>;\n    @ViewChild('indeterminateSmall')\n    indeterminateSmall!: ElementRef<HTMLInputElement>;\n\n    @ViewChild('invalidRadio') invalidRadio!: ElementRef<HTMLInputElement>;\n    @ViewChild('invalidCheckedRadio')\n    invalidCheckedRadio!: ElementRef<HTMLInputElement>;\n\n    ngAfterViewInit() {\n        // set the checkbox as invalid\n        this.invalidCheckbox.nativeElement.setCustomValidity('invalid field');\n\n        // set the checkbox as invalid and checked\n        this.invalidCheckedCheckbox.nativeElement.setCustomValidity(\n            'invalid field'\n        );\n\n        // set the checkbox as indeterminate state as true\n        this.indeterminateCheckbox.nativeElement.indeterminate = true;\n\n        // set checkbox as indeterminate and invalid\n        this.indeterminateInvalidCheckbox.nativeElement.indeterminate = true;\n        this.indeterminateInvalidCheckbox.nativeElement.setCustomValidity(\n            'invalid field'\n        );\n\n        // set the checkbox as indeterminate and disabled states\n        this.indeterminateDisabledCheckbox.nativeElement.indeterminate = true;\n        this.indeterminateDisabledCheckbox.nativeElement.setCustomValidity(\n            'invalid field'\n        );\n\n        // set cehckbox as indeterminate for small size\n        this.indeterminateSmall.nativeElement.indeterminate = true;\n\n        // set the radio button as invalid\n        this.invalidRadio.nativeElement.setCustomValidity('invalid field');\n\n        // set the radio button as invalid and checked\n        this.invalidCheckedRadio.nativeElement.setCustomValidity(\n            'invalid field'\n        );\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./sandbox1.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "AfterViewInit"
            ],
            "templateData": "<h2>{{ 'Sandbox1.Title' | translate }}</h2>\n<p>{{ 'Sandbox1.Text' | translate }}</p>\n\n<h3>Checkbox</h3>\n<jds-checkbox>Angular checkbox</jds-checkbox>\n<br />\n<input type=\"checkbox\" id=\"checkbox_input1\" name=\"checkbox_input1\" value=\"checkbox_input1\">\n<label for=\"checkbox_input1\">Core checkbox</label>\n<br />\n<input type=\"checkbox\" id=\"checkbox_input2\" name=\"checkbox_input2\" value=\"checkbox_input2\" size=\"small\">\n<label for=\"checkbox_input2\">Core checkbox small</label>\n<br />\n<input type=\"checkbox\" id=\"checkbox_input3\" name=\"checkbox_input3\" value=\"checkbox_input3\" size=\"large\">\n<label for=\"checkbox_input3\">Core checkbox large</label>\n<br />\n<input type=\"checkbox\" id=\"checkbox_input4\" name=\"checkbox_input4\" value=\"checkbox_input4\" checked>\n<label for=\"checkbox_input4\">Core checkbox checked</label>\n<br />\n<input type=\"checkbox\" id=\"checkbox_input5\" name=\"checkbox_input5\" value=\"checkbox_input5\" #invalidCheckbox required>\n<label for=\"checkbox_input5\">Core invalid checkbox</label>\n<br />\n<input type=\"checkbox\" id=\"checkbox_input6\" name=\"checkbox_input6\" value=\"checkbox_input6\" #invalidCheckedCheckbox required checked>\n<label for=\"checkbox_input6\">Core invalid and checked checkbox</label>\n<br />\n<input type=\"checkbox\" id=\"checkbox_input7\" name=\"checkbox_input7\" value=\"checkbox_input7\" disabled>\n<label for=\"checkbox_input7\">Core disabled checkbox</label>\n<br />\n<input type=\"checkbox\" id=\"checkbox_input8\" name=\"checkbox_input8\" value=\"checkbox_input8\" disabled checked>\n<label for=\"checkbox_input8\">Core disabled and checked checkbox</label>\n<br />\n<input type=\"checkbox\" name=\"indeterminate\" id=\"indeterminate\" value=\"indeterminate\" #indeterminateCheckbox />\n<label for=\"indeterminate\">Core indeterminate checkbox</label>\n<br/>\n<input type=\"checkbox\" name=\"indeterminate1\" id=\"indeterminate1\" value=\"indeterminate1\" #indeterminateInvalidCheckbox />\n<label for=\"indeterminate1\">Core indeterminate invalid checkbox</label>\n<br/>\n<input type=\"checkbox\" name=\"indeterminate2\" id=\"indeterminate2\" value=\"indeterminate2\" #indeterminateDisabledCheckbox disabled/>\n<label for=\"indeterminate2\">Core indeterminate disabled checkbox</label>\n<br />\n<input type=\"checkbox\" name=\"indeterminate3\" id=\"indeterminate3\" value=\"indeterminate3\" #indeterminateSmall size=\"small\"/>\n<label for=\"indeterminate3\">Core indeterminate small checkbox</label>\n<br/>\n<h3>Radio buttons</h3>\n<jds-radio-button>Angular package radiobutton</jds-radio-button>\n<br />\n<input type=\"radio\" id=\"html1\" name=\"fav_language1\" value=\"HTML1\">\n<label class=\"label\" for=\"html1\">core radio</label>\n<br/>\n<input type=\"radio\" id=\"html2\" name=\"fav_language2\" value=\"HTML2\" size=\"small\">\n<label class=\"label\" for=\"html2\">core radio small</label>\n<br/>\n<input type=\"radio\" id=\"html3\" name=\"fav_language3\" value=\"HTML3\" size=\"large\">\n<label class=\"label\" for=\"html3\">core radio large</label>\n<br/>\n<input type=\"radio\" id=\"html4\" name=\"fav_language4\" value=\"HTML4\" size=\"small\" #invalidRadio required>\n<label class=\"label\" for=\"html4\">invalid core radio</label>\n<br />\n<input type=\"radio\" id=\"html5\" name=\"fav_language5\" value=\"HTML5\" #invalidCheckedRadio checked>\n<label class=\"label\" for=\"html5\">core invalid checked</label>\n<br/>\n<input type=\"radio\" id=\"html6\" name=\"fav_language6\" value=\"HTML6\" disabled>\n<label class=\"label\" for=\"html6\">core radio disabled</label>\n<br />\n<input class=\"invalid\" type=\"radio\" id=\"html8\" name=\"fav_language8\" value=\"HTML8\" disabled checked>\n<label class=\"label\" for=\"html8\">core radio disabled and checked</label>\n"
        },
        {
            "name": "Sandbox2Component",
            "id": "component-Sandbox2Component-2b7d5d934cba43ee8f793e39abfc12adba68636f6debf874b98b1ad289074fe40e2aed4a48c207dc10c743bc41663683a607bab029138c57eed61feb72721700",
            "file": "sample/src/app/sandbox2/sandbox2.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jds-sandbox2",
            "styleUrls": [
                "./sandbox2.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./sandbox2.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n    selector: 'jds-sandbox2',\n    templateUrl: './sandbox2.component.html',\n    styleUrls: ['./sandbox2.component.scss'],\n})\nexport class Sandbox2Component {\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./sandbox2.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<h3>Text Input</h3>\n<br />\n<label class=\"label\">Basic small text input:</label>\n<br />\n<input size=\"small\" type=\"text\" value=\"Default\">\n<br />\n<label class=\"label\">Basic large text input:</label>\n<br />\n<input size=\"large\" type=\"text\" value=\"Default\">\n<br />\n<label class=\"label\">Basic small text input, disabled:</label>\n<br />\n<input size=\"small\" type=\"text\" value=\"Default\" disabled>\n<br />\n<label class=\"label\">Basic large text input, disabled:</label>\n<br />\n<input size=\"large\" type=\"text\" value=\"Default\" disabled>\n<br />\n<label class=\"label\">Basic small text input, readonly:</label>\n<br />\n<input size=\"small\" type=\"text\" value=\"Default\" readonly=\"true\">\n<br />\n<label class=\"label\">Basic large text input, readonly:</label>\n<br />\n<input size=\"large\" type=\"text\" value=\"Default\" readonly=\"true\">\n<br />\n<label class=\"label\">Basic small text input, required:</label>\n<br />\n<input size=\"small\" type=\"text\" value=\"\" required>\n<br />\n<label class=\"label\">Basic large text input, required:</label>\n<br />\n<input size=\"large\" type=\"text\" value=\"\" required>\n<br />\n<label class=\"label\">Basic small text input, 8+ characters required:</label>\n<br />\n<input size=\"small\" type=\"text\" value=\"Default\" pattern=\".{8,}\">\n<br />\n<label class=\"label\">Basic large text input, 8+ characters required:</label>\n<br />\n<input size=\"large\" type=\"text\" value=\"Default\" pattern=\".{8,}\">\n<br />\n<br />\n<br />\n<h3>TextArea</h3>\n<br />\n<label class=\"label\">Basic large textarea</label>\n<br />\n<textarea rows=\"5\" cols=\"50\" size=\"large\">The textarea tag defines a multi-line text input control.  The textarea element is often used in a form, to collect user inputs like comments or reviews.  A text area can hold an unlimited number of characters, and the text renders in a fixed-width font (usually Courier).\n</textarea>\n<br />\n<label class=\"label\">Basic small textarea</label>\n<br />\n<textarea rows=\"5\" cols=\"50\" size=\"small\">The textarea tag defines a multi-line text input control.  The textarea element is often used in a form, to collect user inputs like comments or reviews.  A text area can hold an unlimited number of characters, and the text renders in a fixed-width font (usually Courier).\n</textarea>\n<br />\n<label class=\"label\">Required input textarea, no size defined</label>\n<br />\n<textarea rows=\"5\" cols=\"50\" required placeholder=\"Something is required here\"></textarea>\n<br />\n<label class=\"label\">Disabled input textarea, no size defined</label>\n<br />\n<textarea rows=\"5\" cols=\"50\" disabled></textarea>"
        },
        {
            "name": "SandboxComponent",
            "id": "component-SandboxComponent-f8d8cbf0bcf818332ce10b889809cadfb9fce99be32bb7a9015f80a373d1cdfb23bc0b16665ea619e5b4e5569292403b1671dd6365ec92b5953437530b668eda",
            "file": "sample/src/app/sandbox/sandbox.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jds-sandbox",
            "styleUrls": [
                "./sandbox.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./sandbox.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "rocketIconConfig",
                    "defaultValue": "{\n        unicode: 'e027',\n        fontFamily: 'fa-solid',\n    } as IIconConfig",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { IIconConfig } from '@ircc-ca/ds-sdc-angular/icon';\n\n@Component({\n    selector: 'jds-sandbox',\n    templateUrl: './sandbox.component.html',\n    styleUrls: ['./sandbox.component.scss'],\n})\nexport class SandboxComponent {\n    rocketIconConfig = {\n        unicode: 'e027',\n        fontFamily: 'fa-solid',\n    } as IIconConfig;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./sandbox.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<nav direction=\"row\">\n    <ul>\n        <li><button selected>Button</button></li>\n        <li><button>Button</button></li>\n        <li><button disabled>Button</button></li>\n        <li><button disabled selected>Button</button></li>\n        <li><button disabled>Button</button></li>\n        <li><a size=\"small\" href=\"#Link2\">Link Two</a></li>\n        <li><a size=\"small\" href=\"#Link2\" selected>Link Two</a></li>\n        <li><a size=\"small\" href=\"#Link2\">Link Two</a></li>\n        <li><a size=\"small\" href=\"#Link2\">Link Two</a></li>\n        </ul>\n</nav>\n\n<button category=\"secondary\" color=\"critical\" selected>Button</button>\n<button category=\"secondary\" color=\"critical\">Button</button>\n<button category=\"secondary\" color=\"critical\" disabled>Button</button>\n<button category=\"secondary\" color=\"critical\" disabled selected>Button</button>\n<button category=\"secondary\" color=\"critical\" disabled>Button</button>\n\n<h2>{{ 'Sandbox.Title' | translate }}</h2>\n<p>{{'Sandbox.Text' |translate }}</p>\n\n<jds-button>Ng button</jds-button>\n<br/>   \n<jds-font-icon [iconConfig]=\"rocketIconConfig\">ng Icon</jds-font-icon>\n<br />\n<jds-link [href]=\"'https://www.github.com'\" [target]=\"'_blank'\">A link to Github</jds-link>"
        },
        {
            "name": "SandboxStencilComponent",
            "id": "component-SandboxStencilComponent-78aa9612f5c8ea70351d1c71ef17b590698185ae9ee6ca7c9ab30efaeeac9d6da8d77ee959381e8f3b5d3a6c0c14781f9d02d308a465d5df4e88844aa375f747",
            "file": "sample/src/app/sandbox-stencil/sandbox-stencil.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jds-sandbox-stencil",
            "styleUrls": [
                "./sandbox-stencil.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./sandbox-stencil.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n    selector: 'jds-sandbox-stencil',\n    templateUrl: './sandbox-stencil.component.html',\n    styleUrls: ['./sandbox-stencil.component.scss'],\n})\nexport class SandboxStencilComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./sandbox-stencil.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<my-component first=\"What's up\" last=\"yio\"></my-component>\n<br />\n<djl-button>this is button from Stencil</djl-button>\n<br />\n<djl-button color=\"cta\" category=\"plain\" size=\"small\" disabled=\"true\" type=\"button\">Stencil button</djl-button>\n<br />\n<djl-button  color=\"critical\" size=\"small\" disabled=false type=\"button\" category=\"secondary\">Stencil button</djl-button>\n<br/>\n<djl-button aria-label=\"button from ng\" disabled=\"true\" color=\"critical\">disabled stencil</djl-button>\n<br/>\n<djl-button color=\"CTA\" category=\"plain\">Boo</djl-button>"
        },
        {
            "name": "ThemeSelectComponent",
            "id": "component-ThemeSelectComponent-d9afe938d2d5b8259fa7005c3e7c3d4d677f5b3198e034f0815f15ee888b98b77f179bb0624f50ce5feb192af5ecd6620eeb2e0a5cee6e3fe89f1dd6b3dad8f8",
            "file": "sample/src/app/theme/theme.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jds-theme",
            "styleUrls": [
                "./theme.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./theme.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "dark",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "light",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n    selector: 'jds-theme',\n    templateUrl: './theme.component.html',\n    styleUrls: ['./theme.component.scss'],\n})\nexport class ThemeSelectComponent {\n    dark() {\n        document.getElementById('root')?.setAttribute('theme', 'dark');\n    }\n    light() {\n        document.getElementById('root')?.setAttribute('theme', 'light');\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '~@ircc-ca/ds-sdc-core/layout/layout-grid' as layouts;\n@use '~@ircc-ca/ds-sdc-core/typography/typography';\n@use '~@ircc-ca/ds-sdc-core/util/device';\n\n.nav-section {\n    @include layouts.grid(1fr 1fr, auto);\n    @include device.in-tablet-layout() {\n        @include layouts.grid(1fr, auto auto);\n    }\n    @include device.in-phone-layout() {\n        @include layouts.grid(1fr, auto auto);\n    }\n    column-gap: 20px;\n    row-gap: 20px;\n\n    button {\n        width: stretch;\n        justify-self: center;\n    }\n}\n",
                    "styleUrl": "./theme.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"nav-section\">\n    <button category=\"primary\" (click)=\"dark()\">{{ 'Theme.Dark' | translate }}</button>\n    <button category=\"secondary\" (click)=\"light()\">{{ 'Theme.Light' | translate }}</button>\n</div>"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-75f6fad88b5809626f72ab57c6f456299e525ae74757fef617ae0d38473e16165d9ca2a1a52f1db72650c39bdc68bf8c5359ab7d59cc62a51c4cb815187b7d5f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "sample/src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { HttpClient, HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { IRCCModule } from '@ircc-ca/ds-sdc-angular';\nimport { JLButtonModule } from '@ircc-ca/ds-sdc-angular/button';\nimport { JLCheckboxModule } from '@ircc-ca/ds-sdc-angular/checkbox';\nimport { JLFooterModule } from '@ircc-ca/ds-sdc-angular/footer';\nimport { JLHeaderModule } from '@ircc-ca/ds-sdc-angular/header';\nimport { JLIconModule } from '@ircc-ca/ds-sdc-angular/icon';\nimport { JLLinkModule } from '@ircc-ca/ds-sdc-angular/link';\nimport { JLRadiobuttonModule } from '@ircc-ca/ds-sdc-angular/radio-button';\nimport { TranslateLoader, TranslateModule } from '@ngx-translate/core';\nimport { TranslateHttpLoader } from '@ngx-translate/http-loader';\nimport { AppComponent } from './app.component';\nimport { AppRoutingModule } from './routing/app.routing.module';\nimport { SandboxStencilComponent } from './sandbox-stencil/sandbox-stencil.component';\nimport { SandboxComponent } from './sandbox/sandbox.component';\nimport { Sandbox1Component } from './sandbox1/sandbox1.component';\nimport { Sandbox2Component } from './sandbox2/sandbox2.component';\nimport { ThemeSelectComponent } from './theme/theme.component';\n\nconst JL_ANGULAR_COMPONENTS = [\n    JLButtonModule,\n    JLIconModule,\n    JLLinkModule,\n    JLRadiobuttonModule,\n    JLCheckboxModule,\n    JLFooterModule,\n    JLHeaderModule,\n];\n\n// AoT requires an exported function for factories\nexport function HttpLoaderFactory(httpClient: HttpClient) {\n    return new TranslateHttpLoader(\n        httpClient,\n        './assets/translations/',\n        '.json'\n    );\n}\n\n@NgModule({\n    declarations: [\n        AppComponent,\n        SandboxComponent,\n        SandboxStencilComponent,\n        Sandbox1Component,\n        Sandbox2Component,\n        ThemeSelectComponent,\n    ],\n    imports: [\n        BrowserModule,\n        FormsModule,\n        HttpClientModule,\n        ReactiveFormsModule,\n        TranslateModule.forRoot({\n            loader: {\n                provide: TranslateLoader,\n                useFactory: HttpLoaderFactory,\n                deps: [HttpClient],\n            },\n        }),\n        IRCCModule,\n        JL_ANGULAR_COMPONENTS,\n        AppRoutingModule,\n    ],\n    providers: [],\n    bootstrap: [AppComponent],\n})\nexport class AppModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "Sandbox1Component"
                        },
                        {
                            "name": "Sandbox2Component"
                        },
                        {
                            "name": "SandboxComponent"
                        },
                        {
                            "name": "SandboxStencilComponent"
                        },
                        {
                            "name": "ThemeSelectComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "IRCCModule"
                        },
                        {
                            "name": "JLButtonModule"
                        },
                        {
                            "name": "JLCheckboxModule"
                        },
                        {
                            "name": "JLFooterModule"
                        },
                        {
                            "name": "JLHeaderModule"
                        },
                        {
                            "name": "JLIconModule"
                        },
                        {
                            "name": "JLLinkModule"
                        },
                        {
                            "name": "JLRadiobuttonModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-312db755df658d08d1ab6480b8dfddb4200e5213f29a614b6edee8d08c060c8ef2a8b93bae6a93d0b792c444ea3c504682abba7f5738c6946e3e8d38ff07906b",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "sample/src/app/routing/app.routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router'; // CLI imports router\nimport { SandboxStencilComponent } from '../sandbox-stencil/sandbox-stencil.component';\nimport { SandboxComponent } from '../sandbox/sandbox.component';\nimport { Sandbox1Component } from '../sandbox1/sandbox1.component';\nimport { Sandbox2Component } from '../sandbox2/sandbox2.component';\nexport const routes: Routes = [\n    { path: 'sandbox', component: SandboxComponent },\n    { path: 'sandbox-stencil', component: SandboxStencilComponent },\n    { path: 'sandbox1', component: Sandbox1Component },\n    { path: 'sandbox2', component: Sandbox2Component },\n];\n\n// configures NgModule imports and exports\n@NgModule({\n    imports: [\n        RouterModule.forRoot([\n            { path: '', redirectTo: 'sandbox', pathMatch: 'full' },\n            ...routes,\n        ]),\n    ],\n    exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "IRCCModule",
            "id": "module-IRCCModule-ba4a8ca8d1bd759095a518171a52c58517ca85c05211bd9fba26b996146968e299f2fc7f2d4bdefa792f405eaba3ffee8f936d446336eef7cea70303836755e1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "packages/ds/angular/src/web-module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { defineCustomElements } from '@ircc-ca/ds-sdc-web/loader';\n\nimport * as Components from './stencil-generated/components';\n\nconst DJL_Components = [Components.MyComponent, Components.DjlButton];\n\ndefineCustomElements();\n\nconst DECLARATIONS = [\n    // proxies\n    ...DJL_Components,\n];\n\n@NgModule({\n    declarations: DECLARATIONS,\n    exports: DECLARATIONS,\n    imports: [],\n    providers: [],\n})\nexport class IRCCModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "JLButtonModule",
            "id": "module-JLButtonModule-8542cc2216804a09c6fd33ac3d5a8cd80d506768d112367b95554236486115e3fbd6b64472f829680164630958580a7505805bada59cce14c72fdf1a58b4c836",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "packages/ds/angular/button/button.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ButtonComponent } from './button.component';\n\n@NgModule({\n  declarations: [ButtonComponent],\n  imports: [CommonModule],\n  exports: [ButtonComponent],\n})\nexport class JLButtonModule {}",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ButtonComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ButtonComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "JLCheckboxModule",
            "id": "module-JLCheckboxModule-e9ef9f3df5066e6b6862bc01a2f2ec7b130acb6e6fc9e4cc80d745027148c83b83795c854afb6a2a79d66b90e49ceebb91675503d5f6427e45c86160d70a13ea",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "packages/ds/angular/checkbox/checkbox.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CheckboxComponent } from './checkbox.component';\n\n@NgModule({\n    declarations: [CheckboxComponent],\n    imports: [CommonModule],\n    exports: [CheckboxComponent],\n})\nexport class JLCheckboxModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CheckboxComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "CheckboxComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "JLFooterModule",
            "id": "module-JLFooterModule-b1605325dd1811763718c27db8ca6c75ba432b4017b402c858c5430ba7522a8b27422fe3a0276f2e716a3db64ab0e8f4fae43cbb8c5a6720e6ba70d9853c7c4e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "packages/ds/angular/footer/footer.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FooterComponent } from './footer.component';\n\n@NgModule({\n  declarations: [FooterComponent],\n  imports: [CommonModule],\n  exports: [FooterComponent],\n})\nexport class JLFooterModule {}",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FooterComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FooterComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "JLHeaderModule",
            "id": "module-JLHeaderModule-221d1feafd1f3844ee5a090924651e385790c20b6279871330f8ff0b1cd2cb3ed32eae04001b5ed2f925150f78f1ce6ce5def86a5132e7491f93507aa3bbf303",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "packages/ds/angular/header/header.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { HeaderComponent } from './header.component';\n\n@NgModule({\n  declarations: [HeaderComponent],\n  imports: [CommonModule],\n  exports: [HeaderComponent],\n})\nexport class JLHeaderModule {}",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "HeaderComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "HeaderComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "JLIconModule",
            "id": "module-JLIconModule-69b0208be67b87fe4cb1132a150ad38f2eb0a4160b64fe0edddd95f3c0c6803d5b82ab606539adcef410c6c8ed686d26733aedcc707b4a5ae03388d62b68e88c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "packages/ds/angular/icon/icon.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IconComponent } from './icon.component';\n\n@NgModule({\n  declarations: [IconComponent],\n  imports: [CommonModule],\n  exports: [IconComponent],\n})\nexport class JLIconModule {}",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "IconComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "IconComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "JLLinkModule",
            "id": "module-JLLinkModule-e592ab6b0484990c0ccddfc64abc3a5436bab10983673147a2e2bbe1aa311bfe9d2b671ccbf31f50ae6b0614d5bd771292512099d02ca5df88fea44a617414d8",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "packages/ds/angular/link/link.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { JLIconModule } from '@ircc-ca/ds-sdc-angular/icon';\nimport { LinkComponent } from './link.component';\n\n@NgModule({\n    declarations: [LinkComponent],\n    imports: [CommonModule, JLIconModule],\n    exports: [LinkComponent],\n})\nexport class JLLinkModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LinkComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "JLIconModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LinkComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "JLRadiobuttonModule",
            "id": "module-JLRadiobuttonModule-2dfed7e460219c5f9f4876bf33933a01206bffa652945b6a082241664daa13ffa2a28a482818519603fb97fa3117d07c3687931b8e85a65d3509a8aa585a7dd1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "packages/ds/angular/radio-button/radiobutton.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RadioButtonComponent } from './radio-button.component';\n\n@NgModule({\n  declarations: [RadioButtonComponent],\n  imports: [CommonModule],\n  exports: [RadioButtonComponent],\n})\nexport class JLRadiobuttonModule {}",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "RadioButtonComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "RadioButtonComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "arrayToMap",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ds/react/lib/stencil-generated/react-component-lib/utils/attachProps.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(arr: string[] | DOMTokenList) => {\n  const map = new Map<string, string>();\n  (arr as string[]).forEach((s: string) => map.set(s, s));\n  return map;\n}"
            },
            {
                "name": "attachProps",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ds/react/lib/stencil-generated/react-component-lib/utils/attachProps.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(node: HTMLElement, newProps: any, oldProps: any = {}) => {\n  // some test frameworks don't render DOM elements, so we test here to make sure we are dealing with DOM first\n  if (node instanceof Element) {\n    // add any classes in className to the class list\n    const className = getClassName(node.classList, newProps, oldProps);\n    if (className !== '') {\n      node.className = className;\n    }\n\n    Object.keys(newProps).forEach((name) => {\n      if (\n        name === 'children' ||\n        name === 'style' ||\n        name === 'ref' ||\n        name === 'class' ||\n        name === 'className' ||\n        name === 'forwardedRef'\n      ) {\n        return;\n      }\n      if (name.indexOf('on') === 0 && name[2] === name[2].toUpperCase()) {\n        const eventName = name.substring(2);\n        const eventNameLc = eventName[0].toLowerCase() + eventName.substring(1);\n\n        if (!isCoveredByReact(eventNameLc)) {\n          syncEvent(node, eventNameLc, newProps[name]);\n        }\n      } else {\n        (node as any)[name] = newProps[name];\n        const propType = typeof newProps[name];\n        if (propType === 'string') {\n          node.setAttribute(camelToDashCase(name), newProps[name]);\n        }\n      }\n    });\n  }\n}"
            },
            {
                "name": "camelToDashCase",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ds/react/lib/stencil-generated/react-component-lib/utils/case.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(str: string) =>\n  str.replace(/([A-Z])/g, (m: string) => `-${m[0].toLowerCase()}`)"
            },
            {
                "name": "config",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ds/web/stencil.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Config",
                "defaultValue": "{\n  namespace: 'web',\n  plugins: [sass()],\n  outputTargets: [\n    {\n      type: 'dist',\n      esmLoaderPath: '../loader',\n    },\n    {\n      type: 'dist-custom-elements',\n    },\n    {\n      type: 'docs-readme',\n    },\n    {\n      type: 'www',\n      serviceWorker: null, // disable service workers\n    },\n    angularOutputTarget({\n      componentCorePackage: '@ircc-ca/ds-sdc-web',\n      directivesProxyFile: '../angular/src/stencil-generated/components.ts',\n    }),\n    reactOutputTarget({\n      componentCorePackage: '@ircc-ca/ds-sdc-web',\n      proxiesFile: '../react/lib/stencil-generated/components.ts',\n      loaderDir: 'dist/loader',\n    }),\n  ],\n}"
            },
            {
                "name": "configDefault",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Icon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "IIconConfig",
                "defaultValue": "{\n    unicode: 'f6b0',\n    fontFamily: 'fa-solid',\n}"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "sample/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "createForwardRef",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ds/react/lib/stencil-generated/react-component-lib/utils/index.tsx",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "<PropType, ElementType>(\n  ReactComponent: any,\n  displayName: string,\n) => {\n  const forwardRef = (\n    props: StencilReactExternalProps<PropType, ElementType>,\n    ref: StencilReactForwardedRef<ElementType>,\n  ) => {\n    return <ReactComponent {...props} forwardedRef={ref} />;\n  };\n  forwardRef.displayName = displayName;\n\n  return React.forwardRef(forwardRef);\n}"
            },
            {
                "name": "createOverlayComponent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ds/react/lib/stencil-generated/react-component-lib/createOverlayComponent.tsx",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "<\n  OverlayComponent extends object,\n  OverlayType extends OverlayElement\n>(\n  tagName: string,\n  controller: { create: (options: any) => Promise<OverlayType> },\n  customElement?: any\n) => {\n  defineCustomElement(tagName, customElement);\n\n  const displayName = dashToPascalCase(tagName);\n  const didDismissEventName = `on${displayName}DidDismiss`;\n  const didPresentEventName = `on${displayName}DidPresent`;\n  const willDismissEventName = `on${displayName}WillDismiss`;\n  const willPresentEventName = `on${displayName}WillPresent`;\n\n  type Props = OverlayComponent &\n    ReactOverlayProps & {\n      forwardedRef?: StencilReactForwardedRef<OverlayType>;\n    };\n\n  let isDismissing = false;\n\n  class Overlay extends React.Component<Props> {\n    overlay?: OverlayType;\n    el!: HTMLDivElement;\n\n    constructor(props: Props) {\n      super(props);\n      if (typeof document !== 'undefined') {\n        this.el = document.createElement('div');\n      }\n      this.handleDismiss = this.handleDismiss.bind(this);\n    }\n\n    static get displayName() {\n      return displayName;\n    }\n\n    componentDidMount() {\n      if (this.props.isOpen) {\n        this.present();\n      }\n    }\n\n    componentWillUnmount() {\n      if (this.overlay) {\n        this.overlay.dismiss();\n      }\n    }\n\n    handleDismiss(event: CustomEvent<OverlayEventDetail<any>>) {\n      if (this.props.onDidDismiss) {\n        this.props.onDidDismiss(event);\n      }\n      setRef(this.props.forwardedRef, null)\n    }\n\n    shouldComponentUpdate(nextProps: Props) {\n      // Check if the overlay component is about to dismiss\n      if (this.overlay && nextProps.isOpen !== this.props.isOpen && nextProps.isOpen === false) {\n        isDismissing = true;\n      }\n\n      return true;\n    }\n\n    async componentDidUpdate(prevProps: Props) {\n      if (this.overlay) {\n        attachProps(this.overlay, this.props, prevProps);\n      }\n\n      if (prevProps.isOpen !== this.props.isOpen && this.props.isOpen === true) {\n        this.present(prevProps);\n      }\n      if (this.overlay && prevProps.isOpen !== this.props.isOpen && this.props.isOpen === false) {\n        await this.overlay.dismiss();\n        isDismissing = false;\n\n        /**\n         * Now that the overlay is dismissed\n         * we need to render again so that any\n         * inner components will be unmounted\n         */\n        this.forceUpdate();\n      }\n    }\n\n    async present(prevProps?: Props) {\n      const {\n        children,\n        isOpen,\n        onDidDismiss,\n        onDidPresent,\n        onWillDismiss,\n        onWillPresent,\n        ...cProps\n      } = this.props;\n      const elementProps = {\n        ...cProps,\n        ref: this.props.forwardedRef,\n        [didDismissEventName]: this.handleDismiss,\n        [didPresentEventName]: (e: CustomEvent) =>\n          this.props.onDidPresent && this.props.onDidPresent(e),\n        [willDismissEventName]: (e: CustomEvent) =>\n          this.props.onWillDismiss && this.props.onWillDismiss(e),\n        [willPresentEventName]: (e: CustomEvent) =>\n          this.props.onWillPresent && this.props.onWillPresent(e),\n      };\n\n      this.overlay = await controller.create({\n        ...elementProps,\n        component: this.el,\n        componentProps: {},\n      });\n\n      setRef(this.props.forwardedRef, this.overlay);\n      attachProps(this.overlay, elementProps, prevProps);\n\n      await this.overlay.present();\n    }\n\n    render() {\n      /**\n       * Continue to render the component even when\n       * overlay is dismissing otherwise component\n       * will be hidden before animation is done.\n       */\n      return ReactDOM.createPortal(this.props.isOpen || isDismissing ? this.props.children : null, this.el);\n    }\n  }\n\n  return React.forwardRef<OverlayType, Props>((props, ref) => {\n    return <Overlay {...props} forwardedRef={ref} />;\n  });\n}"
            },
            {
                "name": "createReactComponent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ds/react/lib/stencil-generated/react-component-lib/createComponent.tsx",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "<\n  PropType,\n  ElementType extends HTMLStencilElement,\n  ContextStateType = {},\n  ExpandedPropsTypes = {}\n>(\n  tagName: string,\n  ReactComponentContext?: React.Context<ContextStateType>,\n  manipulatePropsFunction?: (\n    originalProps: StencilReactInternalProps<ElementType>,\n    propsToPass: any,\n  ) => ExpandedPropsTypes,\n  defineCustomElement?: () => void,\n) => {\n  if (defineCustomElement !== undefined) {\n    defineCustomElement();\n  }\n\n  const displayName = dashToPascalCase(tagName);\n  const ReactComponent = class extends React.Component<StencilReactInternalProps<ElementType>> {\n    componentEl!: ElementType;\n\n    setComponentElRef = (element: ElementType) => {\n      this.componentEl = element;\n    };\n\n    constructor(props: StencilReactInternalProps<ElementType>) {\n      super(props);\n    }\n\n    componentDidMount() {\n      this.componentDidUpdate(this.props);\n    }\n\n    componentDidUpdate(prevProps: StencilReactInternalProps<ElementType>) {\n      attachProps(this.componentEl, this.props, prevProps);\n    }\n\n    render() {\n      const { children, forwardedRef, style, className, ref, ...cProps } = this.props;\n\n      let propsToPass = Object.keys(cProps).reduce((acc: any, name) => {\n        const value = (cProps as any)[name];\n\n        if (name.indexOf('on') === 0 && name[2] === name[2].toUpperCase()) {\n          const eventName = name.substring(2).toLowerCase();\n          if (typeof document !== 'undefined' && isCoveredByReact(eventName)) {\n            acc[name] = value;\n          }\n        } else {\n          // we should only render strings, booleans, and numbers as attrs in html.\n          // objects, functions, arrays etc get synced via properties on mount.\n          const type = typeof value;\n\n          if (type === 'string' || type === 'boolean' || type === 'number') {\n            acc[camelToDashCase(name)] = value;\n          }\n        }\n        return acc;\n      }, {});\n\n      if (manipulatePropsFunction) {\n        propsToPass = manipulatePropsFunction(this.props, propsToPass);\n      }\n\n      const newProps: Omit<StencilReactInternalProps<ElementType>, 'forwardedRef'> = {\n        ...propsToPass,\n        ref: mergeRefs(forwardedRef, this.setComponentElRef),\n        style,\n      };\n\n      /**\n       * We use createElement here instead of\n       * React.createElement to work around a\n       * bug in Vite (https://github.com/vitejs/vite/issues/6104).\n       * React.createElement causes all elements to be rendered\n       * as <tagname> instead of the actual Web Component.\n       */\n      return createElement(tagName, newProps, children);\n    }\n\n    static get displayName() {\n      return displayName;\n    }\n  };\n\n  // If context was passed to createReactComponent then conditionally add it to the Component Class\n  if (ReactComponentContext) {\n    ReactComponent.contextType = ReactComponentContext;\n  }\n\n  return createForwardRef<PropType, ElementType>(ReactComponent, displayName);\n}"
            },
            {
                "name": "dashToPascalCase",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ds/react/lib/stencil-generated/react-component-lib/utils/case.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(str: string) =>\n  str\n    .toLowerCase()\n    .split('-')\n    .map((segment) => segment.charAt(0).toUpperCase() + segment.slice(1))\n    .join('')"
            },
            {
                "name": "DECLARATIONS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ds/angular/src/web-module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n    // proxies\n    ...DJL_Components,\n]"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Checkbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Icon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Link.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Radiobutton.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "defineCustomElement",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ds/angular/src/stencil-generated/angular-component-lib/utils.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(tagName: string, customElement: any) => {\n  if (\n    customElement !== undefined &&\n    typeof customElements !== 'undefined' &&\n    !customElements.get(tagName)\n  ) {\n    customElements.define(tagName, customElement);\n  }\n}"
            },
            {
                "name": "defineCustomElement",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ds/react/lib/stencil-generated/react-component-lib/utils/index.tsx",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(tagName: string, customElement: any) => {\n  if (\n    customElement !== undefined &&\n    typeof customElements !== 'undefined' &&\n    !customElements.get(tagName)\n  ) {\n    customElements.define(tagName, customElement);\n  }\n}"
            },
            {
                "name": "deprecationWarning",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ds/react/lib/stencil-generated/react-component-lib/utils/dev.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(key: string, message: string) => {\n  if (isDevMode()) {\n    if (!warnings[key]) {\n      console.warn(message);\n      warnings[key] = true;\n    }\n  }\n}"
            },
            {
                "name": "DIRECTIVES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ds/angular/src/stencil-generated/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[d.MyComponent, d.DjlButton]"
            },
            {
                "name": "DJL_Components",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ds/angular/src/web-module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[Components.MyComponent, Components.DjlButton]"
            },
            {
                "name": "DjlButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ds/react/lib/stencil-generated/components.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReactComponent<JSX.DjlButton, HTMLDjlButtonElement>('djl-button')"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "sample/src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "sample/src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "FONT_FAMILIES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ds/angular/icon/icon.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n    ['fa-solid']: null,\n    ['fa-thin']: null,\n    ['fa-light']: null,\n    ['fa-regular']: null,\n    ['fa-brands']: null,\n}"
            },
            {
                "name": "footer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Footer.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "getClassName",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ds/react/lib/stencil-generated/react-component-lib/utils/attachProps.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(classList: DOMTokenList, newProps: any, oldProps: any) => {\n  const newClassProp: string = newProps.className || newProps.class;\n  const oldClassProp: string = oldProps.className || oldProps.class;\n  // map the classes to Maps for performance\n  const currentClasses = arrayToMap(classList);\n  const incomingPropClasses = arrayToMap(newClassProp ? newClassProp.split(' ') : []);\n  const oldPropClasses = arrayToMap(oldClassProp ? oldClassProp.split(' ') : []);\n  const finalClassNames: string[] = [];\n  // loop through each of the current classes on the component\n  // to see if it should be a part of the classNames added\n  currentClasses.forEach((currentClass) => {\n    if (incomingPropClasses.has(currentClass)) {\n      // add it as its already included in classnames coming in from newProps\n      finalClassNames.push(currentClass);\n      incomingPropClasses.delete(currentClass);\n    } else if (!oldPropClasses.has(currentClass)) {\n      // add it as it has NOT been removed by user\n      finalClassNames.push(currentClass);\n    }\n  });\n  incomingPropClasses.forEach((s) => finalClassNames.push(s));\n  return finalClassNames.join(' ');\n}"
            },
            {
                "name": "header",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "isCoveredByReact",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ds/react/lib/stencil-generated/react-component-lib/utils/attachProps.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(eventNameSuffix: string) => {\n  if (typeof document === 'undefined') {\n    return true;\n  } else {\n    const eventName = 'on' + eventNameSuffix;\n    let isSupported = eventName in document;\n\n    if (!isSupported) {\n      const element = document.createElement('div');\n      element.setAttribute(eventName, 'return;');\n      isSupported = typeof (element as any)[eventName] === 'function';\n    }\n\n    return isSupported;\n  }\n}",
                "rawdescription": "Checks if an event is supported in the current execution environment.",
                "description": "<p>Checks if an event is supported in the current execution environment.</p>\n"
            },
            {
                "name": "isDevMode",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ds/react/lib/stencil-generated/react-component-lib/utils/dev.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => {\n  return process && process.env && process.env.NODE_ENV === 'development';\n}"
            },
            {
                "name": "JL_ANGULAR_COMPONENTS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "sample/src/app/app.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n    JLButtonModule,\n    JLIconModule,\n    JLLinkModule,\n    JLRadiobuttonModule,\n    JLCheckboxModule,\n    JLFooterModule,\n    JLHeaderModule,\n]"
            },
            {
                "name": "mergeRefs",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ds/react/lib/stencil-generated/react-component-lib/utils/index.tsx",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(\n  ...refs: (StencilReactForwardedRef<any> | React.Ref<any> | undefined)[]\n): React.RefCallback<any> => {\n  return (value: any) => {\n    refs.forEach(ref => {\n      setRef(ref, value)\n    })\n  }\n}"
            },
            {
                "name": "MyComponent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ds/react/lib/stencil-generated/components.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReactComponent<JSX.MyComponent, HTMLMyComponentElement>('my-component')"
            },
            {
                "name": "proxyInputs",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ds/angular/src/stencil-generated/angular-component-lib/utils.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(Cmp: any, inputs: string[]) => {\n  const Prototype = Cmp.prototype;\n  inputs.forEach(item => {\n    Object.defineProperty(Prototype, item, {\n      get() {\n        return this.el[item];\n      },\n      set(val: any) {\n        this.z.runOutsideAngular(() => (this.el[item] = val));\n      }\n    });\n  });\n}"
            },
            {
                "name": "proxyMethods",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ds/angular/src/stencil-generated/angular-component-lib/utils.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(Cmp: any, methods: string[]) => {\n  const Prototype = Cmp.prototype;\n  methods.forEach(methodName => {\n    Prototype[methodName] = function () {\n      const args = arguments;\n      return this.z.runOutsideAngular(() =>\n        this.el[methodName].apply(this.el, args)\n      );\n    };\n  });\n}"
            },
            {
                "name": "proxyOutputs",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ds/angular/src/stencil-generated/angular-component-lib/utils.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(instance: any, el: any, events: string[]) => {\n  events.forEach(eventName => instance[eventName] = fromEvent(el, eventName));\n}"
            },
            {
                "name": "reportWebVitals",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "examples/react-stencil/src/reportWebVitals.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "sample/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "root",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "examples/react-stencil/src/index.tsx",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n)"
            },
            {
                "name": "setRef",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ds/react/lib/stencil-generated/react-component-lib/utils/index.tsx",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(ref: StencilReactForwardedRef<any> | React.Ref<any> | undefined, value: any) => {\n  if (typeof ref === 'function') {\n    ref(value)\n  } else if (ref != null) {\n    // Cast as a MutableRef so we can assign current\n    (ref as React.MutableRefObject<any>).current = value\n  }\n}"
            },
            {
                "name": "syncEvent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ds/react/lib/stencil-generated/react-component-lib/utils/attachProps.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(\n  node: Element & { __events?: { [key: string]: ((e: Event) => any) | undefined } },\n  eventName: string,\n  newEventHandler?: (e: Event) => any\n) => {\n  const eventStore = node.__events || (node.__events = {});\n  const oldEventHandler = eventStore[eventName];\n\n  // Remove old listener so they don't double up.\n  if (oldEventHandler) {\n    node.removeEventListener(eventName, oldEventHandler);\n  }\n\n  // Bind new listener.\n  node.addEventListener(\n    eventName,\n    (eventStore[eventName] = function handler(e: Event) {\n      if (newEventHandler) {\n        newEventHandler.call(this, e);\n      }\n    })\n  );\n}"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ButtonProps>",
                "defaultValue": "(args: ButtonProps) => ({\n    props: { ...args },\n    template: `<djl-button\n        color=\"${args.color}\"\n        category=\"${args.category}\"\n        size=\"${args.size}\"\n        disabled=\"${args.disabled}\"\n        type=\"${args.type}\"\n        aria-label=\"${args.ariaLabel}\"\n        name=\"${args.name}\"\n        value=\"${args.value}\"\n        >{{ngContent}}</djl-button\n    >`,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Checkbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<CheckboxComponent>",
                "defaultValue": "(args: CheckboxComponent) => ({\n    props: { ...args },\n    template: `<jds-checkbox>Angular package checkbox</jds-checkbox>`,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Footer.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FooterComponent>",
                "defaultValue": "(args: FooterComponent) => ({\n    props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<HeaderComponent>",
                "defaultValue": "(args: HeaderComponent) => ({\n    props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Icon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<IconComponent>",
                "defaultValue": "(args: IconComponent) => ({\n    props: { ...args },\n    template: `<jds-font-icon [iconConfig]=\"iconConfig\"></jds-font-icon>`,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Link.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<LinkComponent>",
                "defaultValue": "(args: LinkComponent) => ({\n    props: { ...args },\n    template: `\n    <jds-link \n    [download]=\"download\"\n    [href]=\"href\"\n    [target]=\"target\"\n    [ariaLabel]=\"ariaLabel\"\n    >{{ ngContent }}</jds-link>\n  `,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Radiobutton.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<RadioButtonComponent>",
                "defaultValue": "(args: RadioButtonComponent) => ({\n    props: { ...args },\n    template: `<jds-radio-button>Angular package radiobutton</jds-radio-button>`,\n})"
            },
            {
                "name": "warnings",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ds/react/lib/stencil-generated/react-component-lib/utils/dev.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type",
                "defaultValue": "{}"
            }
        ],
        "functions": [
            {
                "name": "App",
                "file": "examples/react-stencil/src/App.tsx",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": []
            },
            {
                "name": "format",
                "file": "packages/ds/web/src/utils/utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "first",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "middle",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "last",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "string",
                "jsdoctags": [
                    {
                        "name": "first",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "middle",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "last",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "HttpLoaderFactory",
                "file": "sample/src/app/app.module.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "ProxyCmp",
                "file": "packages/ds/angular/src/stencil-generated/angular-component-lib/utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "opts",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "opts",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "StencilReactExternalProps",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "packages/ds/react/lib/stencil-generated/react-component-lib/utils/index.tsx",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "StencilReactForwardedRef",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": " | React.MutableRefObject<T | null> | null",
                "file": "packages/ds/react/lib/stencil-generated/react-component-lib/utils/index.tsx",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            }
        ],
        "enumerations": [
            {
                "name": "Category",
                "childs": [
                    {
                        "name": "primary",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "primary"
                    },
                    {
                        "name": "secondary",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "secondary"
                    },
                    {
                        "name": "plain",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "plain"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "stories/Button.stories.ts"
            },
            {
                "name": "Color",
                "childs": [
                    {
                        "name": "critical",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "critical"
                    },
                    {
                        "name": "cta",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "CTA"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "stories/Button.stories.ts"
            },
            {
                "name": "Size",
                "childs": [
                    {
                        "name": "small",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "small"
                    },
                    {
                        "name": "large",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "large"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "stories/Button.stories.ts"
            },
            {
                "name": "Type",
                "childs": [
                    {
                        "name": "button",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "button"
                    },
                    {
                        "name": "submit",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "submit"
                    },
                    {
                        "name": "reset",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "reset"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "stories/Button.stories.ts"
            }
        ],
        "groupedVariables": {
            "packages/ds/react/lib/stencil-generated/react-component-lib/utils/attachProps.ts": [
                {
                    "name": "arrayToMap",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ds/react/lib/stencil-generated/react-component-lib/utils/attachProps.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(arr: string[] | DOMTokenList) => {\n  const map = new Map<string, string>();\n  (arr as string[]).forEach((s: string) => map.set(s, s));\n  return map;\n}"
                },
                {
                    "name": "attachProps",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ds/react/lib/stencil-generated/react-component-lib/utils/attachProps.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(node: HTMLElement, newProps: any, oldProps: any = {}) => {\n  // some test frameworks don't render DOM elements, so we test here to make sure we are dealing with DOM first\n  if (node instanceof Element) {\n    // add any classes in className to the class list\n    const className = getClassName(node.classList, newProps, oldProps);\n    if (className !== '') {\n      node.className = className;\n    }\n\n    Object.keys(newProps).forEach((name) => {\n      if (\n        name === 'children' ||\n        name === 'style' ||\n        name === 'ref' ||\n        name === 'class' ||\n        name === 'className' ||\n        name === 'forwardedRef'\n      ) {\n        return;\n      }\n      if (name.indexOf('on') === 0 && name[2] === name[2].toUpperCase()) {\n        const eventName = name.substring(2);\n        const eventNameLc = eventName[0].toLowerCase() + eventName.substring(1);\n\n        if (!isCoveredByReact(eventNameLc)) {\n          syncEvent(node, eventNameLc, newProps[name]);\n        }\n      } else {\n        (node as any)[name] = newProps[name];\n        const propType = typeof newProps[name];\n        if (propType === 'string') {\n          node.setAttribute(camelToDashCase(name), newProps[name]);\n        }\n      }\n    });\n  }\n}"
                },
                {
                    "name": "getClassName",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ds/react/lib/stencil-generated/react-component-lib/utils/attachProps.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(classList: DOMTokenList, newProps: any, oldProps: any) => {\n  const newClassProp: string = newProps.className || newProps.class;\n  const oldClassProp: string = oldProps.className || oldProps.class;\n  // map the classes to Maps for performance\n  const currentClasses = arrayToMap(classList);\n  const incomingPropClasses = arrayToMap(newClassProp ? newClassProp.split(' ') : []);\n  const oldPropClasses = arrayToMap(oldClassProp ? oldClassProp.split(' ') : []);\n  const finalClassNames: string[] = [];\n  // loop through each of the current classes on the component\n  // to see if it should be a part of the classNames added\n  currentClasses.forEach((currentClass) => {\n    if (incomingPropClasses.has(currentClass)) {\n      // add it as its already included in classnames coming in from newProps\n      finalClassNames.push(currentClass);\n      incomingPropClasses.delete(currentClass);\n    } else if (!oldPropClasses.has(currentClass)) {\n      // add it as it has NOT been removed by user\n      finalClassNames.push(currentClass);\n    }\n  });\n  incomingPropClasses.forEach((s) => finalClassNames.push(s));\n  return finalClassNames.join(' ');\n}"
                },
                {
                    "name": "isCoveredByReact",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ds/react/lib/stencil-generated/react-component-lib/utils/attachProps.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(eventNameSuffix: string) => {\n  if (typeof document === 'undefined') {\n    return true;\n  } else {\n    const eventName = 'on' + eventNameSuffix;\n    let isSupported = eventName in document;\n\n    if (!isSupported) {\n      const element = document.createElement('div');\n      element.setAttribute(eventName, 'return;');\n      isSupported = typeof (element as any)[eventName] === 'function';\n    }\n\n    return isSupported;\n  }\n}",
                    "rawdescription": "Checks if an event is supported in the current execution environment.",
                    "description": "<p>Checks if an event is supported in the current execution environment.</p>\n"
                },
                {
                    "name": "syncEvent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ds/react/lib/stencil-generated/react-component-lib/utils/attachProps.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(\n  node: Element & { __events?: { [key: string]: ((e: Event) => any) | undefined } },\n  eventName: string,\n  newEventHandler?: (e: Event) => any\n) => {\n  const eventStore = node.__events || (node.__events = {});\n  const oldEventHandler = eventStore[eventName];\n\n  // Remove old listener so they don't double up.\n  if (oldEventHandler) {\n    node.removeEventListener(eventName, oldEventHandler);\n  }\n\n  // Bind new listener.\n  node.addEventListener(\n    eventName,\n    (eventStore[eventName] = function handler(e: Event) {\n      if (newEventHandler) {\n        newEventHandler.call(this, e);\n      }\n    })\n  );\n}"
                }
            ],
            "packages/ds/react/lib/stencil-generated/react-component-lib/utils/case.ts": [
                {
                    "name": "camelToDashCase",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ds/react/lib/stencil-generated/react-component-lib/utils/case.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(str: string) =>\n  str.replace(/([A-Z])/g, (m: string) => `-${m[0].toLowerCase()}`)"
                },
                {
                    "name": "dashToPascalCase",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ds/react/lib/stencil-generated/react-component-lib/utils/case.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(str: string) =>\n  str\n    .toLowerCase()\n    .split('-')\n    .map((segment) => segment.charAt(0).toUpperCase() + segment.slice(1))\n    .join('')"
                }
            ],
            "packages/ds/web/stencil.config.ts": [
                {
                    "name": "config",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ds/web/stencil.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Config",
                    "defaultValue": "{\n  namespace: 'web',\n  plugins: [sass()],\n  outputTargets: [\n    {\n      type: 'dist',\n      esmLoaderPath: '../loader',\n    },\n    {\n      type: 'dist-custom-elements',\n    },\n    {\n      type: 'docs-readme',\n    },\n    {\n      type: 'www',\n      serviceWorker: null, // disable service workers\n    },\n    angularOutputTarget({\n      componentCorePackage: '@ircc-ca/ds-sdc-web',\n      directivesProxyFile: '../angular/src/stencil-generated/components.ts',\n    }),\n    reactOutputTarget({\n      componentCorePackage: '@ircc-ca/ds-sdc-web',\n      proxiesFile: '../react/lib/stencil-generated/components.ts',\n      loaderDir: 'dist/loader',\n    }),\n  ],\n}"
                }
            ],
            "stories/Icon.stories.ts": [
                {
                    "name": "configDefault",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Icon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IIconConfig",
                    "defaultValue": "{\n    unicode: 'f6b0',\n    fontFamily: 'fa-solid',\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Icon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Icon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<IconComponent>",
                    "defaultValue": "(args: IconComponent) => ({\n    props: { ...args },\n    template: `<jds-font-icon [iconConfig]=\"iconConfig\"></jds-font-icon>`,\n})"
                }
            ],
            "sample/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "sample/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "sample/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "packages/ds/react/lib/stencil-generated/react-component-lib/utils/index.tsx": [
                {
                    "name": "createForwardRef",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ds/react/lib/stencil-generated/react-component-lib/utils/index.tsx",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "<PropType, ElementType>(\n  ReactComponent: any,\n  displayName: string,\n) => {\n  const forwardRef = (\n    props: StencilReactExternalProps<PropType, ElementType>,\n    ref: StencilReactForwardedRef<ElementType>,\n  ) => {\n    return <ReactComponent {...props} forwardedRef={ref} />;\n  };\n  forwardRef.displayName = displayName;\n\n  return React.forwardRef(forwardRef);\n}"
                },
                {
                    "name": "defineCustomElement",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ds/react/lib/stencil-generated/react-component-lib/utils/index.tsx",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(tagName: string, customElement: any) => {\n  if (\n    customElement !== undefined &&\n    typeof customElements !== 'undefined' &&\n    !customElements.get(tagName)\n  ) {\n    customElements.define(tagName, customElement);\n  }\n}"
                },
                {
                    "name": "mergeRefs",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ds/react/lib/stencil-generated/react-component-lib/utils/index.tsx",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(\n  ...refs: (StencilReactForwardedRef<any> | React.Ref<any> | undefined)[]\n): React.RefCallback<any> => {\n  return (value: any) => {\n    refs.forEach(ref => {\n      setRef(ref, value)\n    })\n  }\n}"
                },
                {
                    "name": "setRef",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ds/react/lib/stencil-generated/react-component-lib/utils/index.tsx",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(ref: StencilReactForwardedRef<any> | React.Ref<any> | undefined, value: any) => {\n  if (typeof ref === 'function') {\n    ref(value)\n  } else if (ref != null) {\n    // Cast as a MutableRef so we can assign current\n    (ref as React.MutableRefObject<any>).current = value\n  }\n}"
                }
            ],
            "packages/ds/react/lib/stencil-generated/react-component-lib/createOverlayComponent.tsx": [
                {
                    "name": "createOverlayComponent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ds/react/lib/stencil-generated/react-component-lib/createOverlayComponent.tsx",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "<\n  OverlayComponent extends object,\n  OverlayType extends OverlayElement\n>(\n  tagName: string,\n  controller: { create: (options: any) => Promise<OverlayType> },\n  customElement?: any\n) => {\n  defineCustomElement(tagName, customElement);\n\n  const displayName = dashToPascalCase(tagName);\n  const didDismissEventName = `on${displayName}DidDismiss`;\n  const didPresentEventName = `on${displayName}DidPresent`;\n  const willDismissEventName = `on${displayName}WillDismiss`;\n  const willPresentEventName = `on${displayName}WillPresent`;\n\n  type Props = OverlayComponent &\n    ReactOverlayProps & {\n      forwardedRef?: StencilReactForwardedRef<OverlayType>;\n    };\n\n  let isDismissing = false;\n\n  class Overlay extends React.Component<Props> {\n    overlay?: OverlayType;\n    el!: HTMLDivElement;\n\n    constructor(props: Props) {\n      super(props);\n      if (typeof document !== 'undefined') {\n        this.el = document.createElement('div');\n      }\n      this.handleDismiss = this.handleDismiss.bind(this);\n    }\n\n    static get displayName() {\n      return displayName;\n    }\n\n    componentDidMount() {\n      if (this.props.isOpen) {\n        this.present();\n      }\n    }\n\n    componentWillUnmount() {\n      if (this.overlay) {\n        this.overlay.dismiss();\n      }\n    }\n\n    handleDismiss(event: CustomEvent<OverlayEventDetail<any>>) {\n      if (this.props.onDidDismiss) {\n        this.props.onDidDismiss(event);\n      }\n      setRef(this.props.forwardedRef, null)\n    }\n\n    shouldComponentUpdate(nextProps: Props) {\n      // Check if the overlay component is about to dismiss\n      if (this.overlay && nextProps.isOpen !== this.props.isOpen && nextProps.isOpen === false) {\n        isDismissing = true;\n      }\n\n      return true;\n    }\n\n    async componentDidUpdate(prevProps: Props) {\n      if (this.overlay) {\n        attachProps(this.overlay, this.props, prevProps);\n      }\n\n      if (prevProps.isOpen !== this.props.isOpen && this.props.isOpen === true) {\n        this.present(prevProps);\n      }\n      if (this.overlay && prevProps.isOpen !== this.props.isOpen && this.props.isOpen === false) {\n        await this.overlay.dismiss();\n        isDismissing = false;\n\n        /**\n         * Now that the overlay is dismissed\n         * we need to render again so that any\n         * inner components will be unmounted\n         */\n        this.forceUpdate();\n      }\n    }\n\n    async present(prevProps?: Props) {\n      const {\n        children,\n        isOpen,\n        onDidDismiss,\n        onDidPresent,\n        onWillDismiss,\n        onWillPresent,\n        ...cProps\n      } = this.props;\n      const elementProps = {\n        ...cProps,\n        ref: this.props.forwardedRef,\n        [didDismissEventName]: this.handleDismiss,\n        [didPresentEventName]: (e: CustomEvent) =>\n          this.props.onDidPresent && this.props.onDidPresent(e),\n        [willDismissEventName]: (e: CustomEvent) =>\n          this.props.onWillDismiss && this.props.onWillDismiss(e),\n        [willPresentEventName]: (e: CustomEvent) =>\n          this.props.onWillPresent && this.props.onWillPresent(e),\n      };\n\n      this.overlay = await controller.create({\n        ...elementProps,\n        component: this.el,\n        componentProps: {},\n      });\n\n      setRef(this.props.forwardedRef, this.overlay);\n      attachProps(this.overlay, elementProps, prevProps);\n\n      await this.overlay.present();\n    }\n\n    render() {\n      /**\n       * Continue to render the component even when\n       * overlay is dismissing otherwise component\n       * will be hidden before animation is done.\n       */\n      return ReactDOM.createPortal(this.props.isOpen || isDismissing ? this.props.children : null, this.el);\n    }\n  }\n\n  return React.forwardRef<OverlayType, Props>((props, ref) => {\n    return <Overlay {...props} forwardedRef={ref} />;\n  });\n}"
                }
            ],
            "packages/ds/react/lib/stencil-generated/react-component-lib/createComponent.tsx": [
                {
                    "name": "createReactComponent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ds/react/lib/stencil-generated/react-component-lib/createComponent.tsx",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "<\n  PropType,\n  ElementType extends HTMLStencilElement,\n  ContextStateType = {},\n  ExpandedPropsTypes = {}\n>(\n  tagName: string,\n  ReactComponentContext?: React.Context<ContextStateType>,\n  manipulatePropsFunction?: (\n    originalProps: StencilReactInternalProps<ElementType>,\n    propsToPass: any,\n  ) => ExpandedPropsTypes,\n  defineCustomElement?: () => void,\n) => {\n  if (defineCustomElement !== undefined) {\n    defineCustomElement();\n  }\n\n  const displayName = dashToPascalCase(tagName);\n  const ReactComponent = class extends React.Component<StencilReactInternalProps<ElementType>> {\n    componentEl!: ElementType;\n\n    setComponentElRef = (element: ElementType) => {\n      this.componentEl = element;\n    };\n\n    constructor(props: StencilReactInternalProps<ElementType>) {\n      super(props);\n    }\n\n    componentDidMount() {\n      this.componentDidUpdate(this.props);\n    }\n\n    componentDidUpdate(prevProps: StencilReactInternalProps<ElementType>) {\n      attachProps(this.componentEl, this.props, prevProps);\n    }\n\n    render() {\n      const { children, forwardedRef, style, className, ref, ...cProps } = this.props;\n\n      let propsToPass = Object.keys(cProps).reduce((acc: any, name) => {\n        const value = (cProps as any)[name];\n\n        if (name.indexOf('on') === 0 && name[2] === name[2].toUpperCase()) {\n          const eventName = name.substring(2).toLowerCase();\n          if (typeof document !== 'undefined' && isCoveredByReact(eventName)) {\n            acc[name] = value;\n          }\n        } else {\n          // we should only render strings, booleans, and numbers as attrs in html.\n          // objects, functions, arrays etc get synced via properties on mount.\n          const type = typeof value;\n\n          if (type === 'string' || type === 'boolean' || type === 'number') {\n            acc[camelToDashCase(name)] = value;\n          }\n        }\n        return acc;\n      }, {});\n\n      if (manipulatePropsFunction) {\n        propsToPass = manipulatePropsFunction(this.props, propsToPass);\n      }\n\n      const newProps: Omit<StencilReactInternalProps<ElementType>, 'forwardedRef'> = {\n        ...propsToPass,\n        ref: mergeRefs(forwardedRef, this.setComponentElRef),\n        style,\n      };\n\n      /**\n       * We use createElement here instead of\n       * React.createElement to work around a\n       * bug in Vite (https://github.com/vitejs/vite/issues/6104).\n       * React.createElement causes all elements to be rendered\n       * as <tagname> instead of the actual Web Component.\n       */\n      return createElement(tagName, newProps, children);\n    }\n\n    static get displayName() {\n      return displayName;\n    }\n  };\n\n  // If context was passed to createReactComponent then conditionally add it to the Component Class\n  if (ReactComponentContext) {\n    ReactComponent.contextType = ReactComponentContext;\n  }\n\n  return createForwardRef<PropType, ElementType>(ReactComponent, displayName);\n}"
                }
            ],
            "packages/ds/angular/src/web-module.ts": [
                {
                    "name": "DECLARATIONS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ds/angular/src/web-module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n    // proxies\n    ...DJL_Components,\n]"
                },
                {
                    "name": "DJL_Components",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ds/angular/src/web-module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[Components.MyComponent, Components.DjlButton]"
                }
            ],
            "stories/Button.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ButtonProps>",
                    "defaultValue": "(args: ButtonProps) => ({\n    props: { ...args },\n    template: `<djl-button\n        color=\"${args.color}\"\n        category=\"${args.category}\"\n        size=\"${args.size}\"\n        disabled=\"${args.disabled}\"\n        type=\"${args.type}\"\n        aria-label=\"${args.ariaLabel}\"\n        name=\"${args.name}\"\n        value=\"${args.value}\"\n        >{{ngContent}}</djl-button\n    >`,\n})"
                }
            ],
            "stories/Checkbox.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Checkbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Checkbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<CheckboxComponent>",
                    "defaultValue": "(args: CheckboxComponent) => ({\n    props: { ...args },\n    template: `<jds-checkbox>Angular package checkbox</jds-checkbox>`,\n})"
                }
            ],
            "stories/Link.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Link.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Link.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<LinkComponent>",
                    "defaultValue": "(args: LinkComponent) => ({\n    props: { ...args },\n    template: `\n    <jds-link \n    [download]=\"download\"\n    [href]=\"href\"\n    [target]=\"target\"\n    [ariaLabel]=\"ariaLabel\"\n    >{{ ngContent }}</jds-link>\n  `,\n})"
                }
            ],
            "stories/Radiobutton.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Radiobutton.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Radiobutton.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<RadioButtonComponent>",
                    "defaultValue": "(args: RadioButtonComponent) => ({\n    props: { ...args },\n    template: `<jds-radio-button>Angular package radiobutton</jds-radio-button>`,\n})"
                }
            ],
            "packages/ds/angular/src/stencil-generated/angular-component-lib/utils.ts": [
                {
                    "name": "defineCustomElement",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ds/angular/src/stencil-generated/angular-component-lib/utils.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(tagName: string, customElement: any) => {\n  if (\n    customElement !== undefined &&\n    typeof customElements !== 'undefined' &&\n    !customElements.get(tagName)\n  ) {\n    customElements.define(tagName, customElement);\n  }\n}"
                },
                {
                    "name": "proxyInputs",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ds/angular/src/stencil-generated/angular-component-lib/utils.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(Cmp: any, inputs: string[]) => {\n  const Prototype = Cmp.prototype;\n  inputs.forEach(item => {\n    Object.defineProperty(Prototype, item, {\n      get() {\n        return this.el[item];\n      },\n      set(val: any) {\n        this.z.runOutsideAngular(() => (this.el[item] = val));\n      }\n    });\n  });\n}"
                },
                {
                    "name": "proxyMethods",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ds/angular/src/stencil-generated/angular-component-lib/utils.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(Cmp: any, methods: string[]) => {\n  const Prototype = Cmp.prototype;\n  methods.forEach(methodName => {\n    Prototype[methodName] = function () {\n      const args = arguments;\n      return this.z.runOutsideAngular(() =>\n        this.el[methodName].apply(this.el, args)\n      );\n    };\n  });\n}"
                },
                {
                    "name": "proxyOutputs",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ds/angular/src/stencil-generated/angular-component-lib/utils.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(instance: any, el: any, events: string[]) => {\n  events.forEach(eventName => instance[eventName] = fromEvent(el, eventName));\n}"
                }
            ],
            "packages/ds/react/lib/stencil-generated/react-component-lib/utils/dev.ts": [
                {
                    "name": "deprecationWarning",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ds/react/lib/stencil-generated/react-component-lib/utils/dev.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(key: string, message: string) => {\n  if (isDevMode()) {\n    if (!warnings[key]) {\n      console.warn(message);\n      warnings[key] = true;\n    }\n  }\n}"
                },
                {
                    "name": "isDevMode",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ds/react/lib/stencil-generated/react-component-lib/utils/dev.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => {\n  return process && process.env && process.env.NODE_ENV === 'development';\n}"
                },
                {
                    "name": "warnings",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ds/react/lib/stencil-generated/react-component-lib/utils/dev.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "defaultValue": "{}"
                }
            ],
            "packages/ds/angular/src/stencil-generated/index.ts": [
                {
                    "name": "DIRECTIVES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ds/angular/src/stencil-generated/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[d.MyComponent, d.DjlButton]"
                }
            ],
            "packages/ds/react/lib/stencil-generated/components.ts": [
                {
                    "name": "DjlButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ds/react/lib/stencil-generated/components.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReactComponent<JSX.DjlButton, HTMLDjlButtonElement>('djl-button')"
                },
                {
                    "name": "MyComponent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ds/react/lib/stencil-generated/components.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReactComponent<JSX.MyComponent, HTMLMyComponentElement>('my-component')"
                }
            ],
            "sample/src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "sample/src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "sample/src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "sample/src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ],
            "packages/ds/angular/icon/icon.component.ts": [
                {
                    "name": "FONT_FAMILIES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ds/angular/icon/icon.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n    ['fa-solid']: null,\n    ['fa-thin']: null,\n    ['fa-light']: null,\n    ['fa-regular']: null,\n    ['fa-brands']: null,\n}"
                }
            ],
            "stories/Footer.stories.ts": [
                {
                    "name": "footer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Footer.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Footer.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FooterComponent>",
                    "defaultValue": "(args: FooterComponent) => ({\n    props: args,\n})"
                }
            ],
            "stories/Header.stories.ts": [
                {
                    "name": "header",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<HeaderComponent>",
                    "defaultValue": "(args: HeaderComponent) => ({\n    props: args,\n})"
                }
            ],
            "sample/src/app/app.module.ts": [
                {
                    "name": "JL_ANGULAR_COMPONENTS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "sample/src/app/app.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n    JLButtonModule,\n    JLIconModule,\n    JLLinkModule,\n    JLRadiobuttonModule,\n    JLCheckboxModule,\n    JLFooterModule,\n    JLHeaderModule,\n]"
                }
            ],
            "examples/react-stencil/src/reportWebVitals.ts": [
                {
                    "name": "reportWebVitals",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "examples/react-stencil/src/reportWebVitals.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}"
                }
            ],
            "examples/react-stencil/src/index.tsx": [
                {
                    "name": "root",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "examples/react-stencil/src/index.tsx",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n)"
                }
            ]
        },
        "groupedFunctions": {
            "examples/react-stencil/src/App.tsx": [
                {
                    "name": "App",
                    "file": "examples/react-stencil/src/App.tsx",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": []
                }
            ],
            "packages/ds/web/src/utils/utils.ts": [
                {
                    "name": "format",
                    "file": "packages/ds/web/src/utils/utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "first",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "middle",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "last",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "string",
                    "jsdoctags": [
                        {
                            "name": "first",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "middle",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "last",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "sample/src/app/app.module.ts": [
                {
                    "name": "HttpLoaderFactory",
                    "file": "sample/src/app/app.module.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "httpClient",
                            "type": "HttpClient",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "httpClient",
                            "type": "HttpClient",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "packages/ds/angular/src/stencil-generated/angular-component-lib/utils.ts": [
                {
                    "name": "ProxyCmp",
                    "file": "packages/ds/angular/src/stencil-generated/angular-component-lib/utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "opts",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "opts",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "stories/Button.stories.ts": [
                {
                    "name": "Category",
                    "childs": [
                        {
                            "name": "primary",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "primary"
                        },
                        {
                            "name": "secondary",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "secondary"
                        },
                        {
                            "name": "plain",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "plain"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "stories/Button.stories.ts"
                },
                {
                    "name": "Color",
                    "childs": [
                        {
                            "name": "critical",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "critical"
                        },
                        {
                            "name": "cta",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "CTA"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "stories/Button.stories.ts"
                },
                {
                    "name": "Size",
                    "childs": [
                        {
                            "name": "small",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "small"
                        },
                        {
                            "name": "large",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "large"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "stories/Button.stories.ts"
                },
                {
                    "name": "Type",
                    "childs": [
                        {
                            "name": "button",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "button"
                        },
                        {
                            "name": "submit",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "submit"
                        },
                        {
                            "name": "reset",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "reset"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "stories/Button.stories.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "packages/ds/react/lib/stencil-generated/react-component-lib/utils/index.tsx": [
                {
                    "name": "StencilReactExternalProps",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "packages/ds/react/lib/stencil-generated/react-component-lib/utils/index.tsx",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                },
                {
                    "name": "StencilReactForwardedRef",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": " | React.MutableRefObject<T | null> | null",
                    "file": "packages/ds/react/lib/stencil-generated/react-component-lib/utils/index.tsx",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 2,
        "status": "low",
        "files": [
            {
                "filePath": "examples/react-stencil/src/App.tsx",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "App",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "examples/react-stencil/src/index.tsx",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "root",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "examples/react-stencil/src/reportWebVitals.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reportWebVitals",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ds/angular/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "packages/ds/angular/checkbox/checkbox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CheckboxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "packages/ds/angular/footer/footer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FooterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ds/angular/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ds/angular/icon/icon.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IconComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "packages/ds/angular/icon/icon.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IIconConfig",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "packages/ds/angular/icon/icon.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FONT_FAMILIES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ds/angular/link/link.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LinkComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "packages/ds/angular/radio-button/radio-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RadioButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "packages/ds/angular/src/stencil-generated/angular-component-lib/utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "ProxyCmp",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ds/angular/src/stencil-generated/angular-component-lib/utils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defineCustomElement",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ds/angular/src/stencil-generated/angular-component-lib/utils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "proxyInputs",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ds/angular/src/stencil-generated/angular-component-lib/utils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "proxyMethods",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ds/angular/src/stencil-generated/angular-component-lib/utils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "proxyOutputs",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ds/angular/src/stencil-generated/components.ts",
                "type": "component",
                "linktype": "component",
                "name": "DjlButton",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "packages/ds/angular/src/stencil-generated/components.ts",
                "type": "component",
                "linktype": "component",
                "name": "MyComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "packages/ds/angular/src/stencil-generated/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DIRECTIVES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ds/angular/src/web-module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DECLARATIONS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ds/angular/src/web-module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DJL_Components",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ds/react/lib/stencil-generated/components.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DjlButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ds/react/lib/stencil-generated/components.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MyComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ds/react/lib/stencil-generated/react-component-lib/createComponent.tsx",
                "type": "interface",
                "linktype": "interface",
                "name": "HTMLStencilElement",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "packages/ds/react/lib/stencil-generated/react-component-lib/createComponent.tsx",
                "type": "interface",
                "linktype": "interface",
                "name": "StencilReactInternalProps",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "packages/ds/react/lib/stencil-generated/react-component-lib/createComponent.tsx",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createReactComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ds/react/lib/stencil-generated/react-component-lib/createOverlayComponent.tsx",
                "type": "interface",
                "linktype": "interface",
                "name": "OverlayElement",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "packages/ds/react/lib/stencil-generated/react-component-lib/createOverlayComponent.tsx",
                "type": "interface",
                "linktype": "interface",
                "name": "ReactOverlayProps",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "packages/ds/react/lib/stencil-generated/react-component-lib/createOverlayComponent.tsx",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createOverlayComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ds/react/lib/stencil-generated/react-component-lib/interfaces.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "EventEmitter",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "packages/ds/react/lib/stencil-generated/react-component-lib/interfaces.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "OverlayEventDetail",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "packages/ds/react/lib/stencil-generated/react-component-lib/interfaces.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "OverlayInterface",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "packages/ds/react/lib/stencil-generated/react-component-lib/interfaces.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "StyleReactProps",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "packages/ds/react/lib/stencil-generated/react-component-lib/utils/attachProps.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "arrayToMap",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ds/react/lib/stencil-generated/react-component-lib/utils/attachProps.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "attachProps",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ds/react/lib/stencil-generated/react-component-lib/utils/attachProps.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getClassName",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ds/react/lib/stencil-generated/react-component-lib/utils/attachProps.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "isCoveredByReact",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "packages/ds/react/lib/stencil-generated/react-component-lib/utils/attachProps.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "syncEvent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ds/react/lib/stencil-generated/react-component-lib/utils/case.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "camelToDashCase",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ds/react/lib/stencil-generated/react-component-lib/utils/case.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dashToPascalCase",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ds/react/lib/stencil-generated/react-component-lib/utils/dev.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deprecationWarning",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ds/react/lib/stencil-generated/react-component-lib/utils/dev.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "isDevMode",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ds/react/lib/stencil-generated/react-component-lib/utils/dev.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "warnings",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ds/react/lib/stencil-generated/react-component-lib/utils/index.tsx",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createForwardRef",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ds/react/lib/stencil-generated/react-component-lib/utils/index.tsx",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defineCustomElement",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ds/react/lib/stencil-generated/react-component-lib/utils/index.tsx",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mergeRefs",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ds/react/lib/stencil-generated/react-component-lib/utils/index.tsx",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "setRef",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ds/web/src/components/button/button.tsx",
                "type": "component",
                "linktype": "component",
                "name": "DjlButton",
                "coveragePercent": 72,
                "coverageCount": "8/11",
                "status": "good"
            },
            {
                "filePath": "packages/ds/web/src/components/button/button.tsx",
                "type": "interface",
                "linktype": "interface",
                "name": "buttonConfig",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "packages/ds/web/src/components/my-component/my-component.tsx",
                "type": "component",
                "linktype": "component",
                "name": "MyComponent",
                "coveragePercent": 57,
                "coverageCount": "4/7",
                "status": "good"
            },
            {
                "filePath": "packages/ds/web/src/utils/utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "format",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ds/web/stencil.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "config",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "sample/src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "sample/src/app/app.module.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "HttpLoaderFactory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "sample/src/app/app.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "JL_ANGULAR_COMPONENTS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "sample/src/app/sandbox-stencil/sandbox-stencil.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SandboxStencilComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "sample/src/app/sandbox/sandbox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SandboxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "sample/src/app/sandbox1/sandbox1.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "Sandbox1Component",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "sample/src/app/sandbox2/sandbox2.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "Sandbox2Component",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "sample/src/app/theme/theme.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ThemeSelectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "sample/src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "sample/src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "sample/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "sample/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ButtonProps",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Footer.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "footer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Footer.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "header",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Icon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "configDefault",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Icon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Icon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Link.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Link.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Radiobutton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Radiobutton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}