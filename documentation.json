{
    "pipes": [],
    "interfaces": [
        {
            "name": "IAddressAutocompleteProps",
            "id": "interface-IAddressAutocompleteProps-dbd57a1dc611201a04748b3769166f3ecb4c4e296a76234ec8d697e70286604e5124a7f302a4c394549600a385dcc4f43dd5cf5eeec4f4fe9c2cfa9decbc878b",
            "file": "packages/ds/angular/src/lib/jl-cl/jl-cl/IFormBase.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormGroup } from '@angular/forms';\r\nimport { COMPONENT_TYPES } from './dynamic-field.directive';\r\nimport { IValidator } from './validator';\r\nexport type ConditionCheck = (formGroup: FormGroup) => boolean;\r\nexport interface IConfig {\r\n    id: string;\r\n    type: keyof typeof COMPONENT_TYPES;\r\n    label?: string;\r\n    hint?: string;\r\n    alert?: string;\r\n    validation?: IValidator[];\r\n    help?: boolean;\r\n    hideRequiredLabel?: boolean;\r\n    hideStar?: boolean;\r\n    moreInfo?: () => void;\r\n    hidden?: ConditionCheck;\r\n    disabled?: ConditionCheck;\r\n    readonly?: ConditionCheck;\r\n    subText?: string;\r\n    noLabelMargin?: boolean;\r\n}\r\nexport interface IDateProps extends IFieldConfig {\r\n    dateOptions: {\r\n        minDate: Date;\r\n        maxDate: Date;\r\n        dateFormat: 'dd MMM YYYY' | 'MMM dd YYYY';\r\n        pickerLocale: 'GB' | 'US'; // GB uses dd-MMM-YYYY, US uses MMM-dd-YYYY\r\n    };\r\n}\r\nexport interface IListType extends IFieldConfig {\r\n    items: IListItem[];\r\n}\r\n\r\nexport interface IStaticAutocompleteConfig extends IListType {\r\n    forceKeypadOnMobile?: boolean;\r\n    numeric?: boolean;\r\n    optionSelected?: () => void;\r\n}\r\nexport interface IAddressAutocompleteProps {\r\n    cityId?: string;\r\n    postalCodeId?: string;\r\n    provinceId?: string;\r\n    unitId?: string;\r\n    poBoxId?: string;\r\n}\r\n\r\nexport interface IAddressAutocompleteType extends IFieldConfig {\r\n    addressAutocompleteParams: IAddressAutocompleteProps;\r\n}\r\nexport interface IListItem {\r\n    key: string;\r\n    value: string;\r\n}\r\n\r\nexport interface ISelectProps extends IListType {\r\n    searchProps?: {\r\n        hide?: boolean;\r\n        disable?: boolean;\r\n        prePopSearch?: string;\r\n    };\r\n}\r\n\r\nexport interface IFormConfig extends IConfig {\r\n    childConfigs: IConfig[];\r\n}\r\nexport interface IFieldConfig extends IConfig {\r\n    placeholder?: string;\r\n    defaultValue?: unknown;\r\n}\r\n\r\nexport interface IDatepickerConfig extends IConfig {\r\n    minYear: number;\r\n    maxYear: number;\r\n    childConfigs?: IConfig[];\r\n    useMaxDateAsToday?: boolean;\r\n    useMinDayAs?: number;\r\n    useMaxDayAs?: number;\r\n    useUnknownForMonthAndDay?: boolean;\r\n    ongoing?: boolean;\r\n    comparedWithId?: string;\r\n    hiddenDay?: boolean;\r\n    transformDisplay?: (value: any) => string;\r\n}\r\n\r\nexport interface IPresentationConfig {\r\n    id: string;\r\n    type: keyof typeof COMPONENT_TYPES;\r\n    hidden?: ConditionCheck;\r\n    noLabelMargin?: boolean;\r\n}\r\n\r\nexport interface IAlertConfig extends IPresentationConfig {\r\n    alertType: 'warn' | 'info' | 'error' | 'success' | 'tip';\r\n    label: string;\r\n    content?: string;\r\n    contentType?: 'single';\r\n    link?: {\r\n        url: string;\r\n        name: string;\r\n    };\r\n}\r\n\r\nexport interface ISubtitleConfig extends IPresentationConfig {\r\n    label: string;\r\n    textType: string;\r\n}\r\nexport interface IInfoBoxConfig extends IPresentationConfig {\r\n    icon: 'check_circle' | 'warning' | 'info';\r\n    heading: string;\r\n    caption: string;\r\n    link?: {\r\n        url: string;\r\n        name: string;\r\n    };\r\n}\r\n\r\nexport interface ICurrentStatusInCanadaReadOnlyConfig\r\n    extends IPresentationConfig {\r\n    statusHeading: string;\r\n    toDateLabel: string;\r\n    fromDateLabel: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "cityId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "poBoxId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "postalCodeId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "provinceId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "unitId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 43
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IAddressAutocompleteType",
            "id": "interface-IAddressAutocompleteType-dbd57a1dc611201a04748b3769166f3ecb4c4e296a76234ec8d697e70286604e5124a7f302a4c394549600a385dcc4f43dd5cf5eeec4f4fe9c2cfa9decbc878b",
            "file": "packages/ds/angular/src/lib/jl-cl/jl-cl/IFormBase.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormGroup } from '@angular/forms';\r\nimport { COMPONENT_TYPES } from './dynamic-field.directive';\r\nimport { IValidator } from './validator';\r\nexport type ConditionCheck = (formGroup: FormGroup) => boolean;\r\nexport interface IConfig {\r\n    id: string;\r\n    type: keyof typeof COMPONENT_TYPES;\r\n    label?: string;\r\n    hint?: string;\r\n    alert?: string;\r\n    validation?: IValidator[];\r\n    help?: boolean;\r\n    hideRequiredLabel?: boolean;\r\n    hideStar?: boolean;\r\n    moreInfo?: () => void;\r\n    hidden?: ConditionCheck;\r\n    disabled?: ConditionCheck;\r\n    readonly?: ConditionCheck;\r\n    subText?: string;\r\n    noLabelMargin?: boolean;\r\n}\r\nexport interface IDateProps extends IFieldConfig {\r\n    dateOptions: {\r\n        minDate: Date;\r\n        maxDate: Date;\r\n        dateFormat: 'dd MMM YYYY' | 'MMM dd YYYY';\r\n        pickerLocale: 'GB' | 'US'; // GB uses dd-MMM-YYYY, US uses MMM-dd-YYYY\r\n    };\r\n}\r\nexport interface IListType extends IFieldConfig {\r\n    items: IListItem[];\r\n}\r\n\r\nexport interface IStaticAutocompleteConfig extends IListType {\r\n    forceKeypadOnMobile?: boolean;\r\n    numeric?: boolean;\r\n    optionSelected?: () => void;\r\n}\r\nexport interface IAddressAutocompleteProps {\r\n    cityId?: string;\r\n    postalCodeId?: string;\r\n    provinceId?: string;\r\n    unitId?: string;\r\n    poBoxId?: string;\r\n}\r\n\r\nexport interface IAddressAutocompleteType extends IFieldConfig {\r\n    addressAutocompleteParams: IAddressAutocompleteProps;\r\n}\r\nexport interface IListItem {\r\n    key: string;\r\n    value: string;\r\n}\r\n\r\nexport interface ISelectProps extends IListType {\r\n    searchProps?: {\r\n        hide?: boolean;\r\n        disable?: boolean;\r\n        prePopSearch?: string;\r\n    };\r\n}\r\n\r\nexport interface IFormConfig extends IConfig {\r\n    childConfigs: IConfig[];\r\n}\r\nexport interface IFieldConfig extends IConfig {\r\n    placeholder?: string;\r\n    defaultValue?: unknown;\r\n}\r\n\r\nexport interface IDatepickerConfig extends IConfig {\r\n    minYear: number;\r\n    maxYear: number;\r\n    childConfigs?: IConfig[];\r\n    useMaxDateAsToday?: boolean;\r\n    useMinDayAs?: number;\r\n    useMaxDayAs?: number;\r\n    useUnknownForMonthAndDay?: boolean;\r\n    ongoing?: boolean;\r\n    comparedWithId?: string;\r\n    hiddenDay?: boolean;\r\n    transformDisplay?: (value: any) => string;\r\n}\r\n\r\nexport interface IPresentationConfig {\r\n    id: string;\r\n    type: keyof typeof COMPONENT_TYPES;\r\n    hidden?: ConditionCheck;\r\n    noLabelMargin?: boolean;\r\n}\r\n\r\nexport interface IAlertConfig extends IPresentationConfig {\r\n    alertType: 'warn' | 'info' | 'error' | 'success' | 'tip';\r\n    label: string;\r\n    content?: string;\r\n    contentType?: 'single';\r\n    link?: {\r\n        url: string;\r\n        name: string;\r\n    };\r\n}\r\n\r\nexport interface ISubtitleConfig extends IPresentationConfig {\r\n    label: string;\r\n    textType: string;\r\n}\r\nexport interface IInfoBoxConfig extends IPresentationConfig {\r\n    icon: 'check_circle' | 'warning' | 'info';\r\n    heading: string;\r\n    caption: string;\r\n    link?: {\r\n        url: string;\r\n        name: string;\r\n    };\r\n}\r\n\r\nexport interface ICurrentStatusInCanadaReadOnlyConfig\r\n    extends IPresentationConfig {\r\n    statusHeading: string;\r\n    toDateLabel: string;\r\n    fromDateLabel: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "addressAutocompleteParams",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IAddressAutocompleteProps",
                    "optional": false,
                    "description": "",
                    "line": 48
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "IFieldConfig"
        },
        {
            "name": "IAlertConfig",
            "id": "interface-IAlertConfig-dbd57a1dc611201a04748b3769166f3ecb4c4e296a76234ec8d697e70286604e5124a7f302a4c394549600a385dcc4f43dd5cf5eeec4f4fe9c2cfa9decbc878b",
            "file": "packages/ds/angular/src/lib/jl-cl/jl-cl/IFormBase.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormGroup } from '@angular/forms';\r\nimport { COMPONENT_TYPES } from './dynamic-field.directive';\r\nimport { IValidator } from './validator';\r\nexport type ConditionCheck = (formGroup: FormGroup) => boolean;\r\nexport interface IConfig {\r\n    id: string;\r\n    type: keyof typeof COMPONENT_TYPES;\r\n    label?: string;\r\n    hint?: string;\r\n    alert?: string;\r\n    validation?: IValidator[];\r\n    help?: boolean;\r\n    hideRequiredLabel?: boolean;\r\n    hideStar?: boolean;\r\n    moreInfo?: () => void;\r\n    hidden?: ConditionCheck;\r\n    disabled?: ConditionCheck;\r\n    readonly?: ConditionCheck;\r\n    subText?: string;\r\n    noLabelMargin?: boolean;\r\n}\r\nexport interface IDateProps extends IFieldConfig {\r\n    dateOptions: {\r\n        minDate: Date;\r\n        maxDate: Date;\r\n        dateFormat: 'dd MMM YYYY' | 'MMM dd YYYY';\r\n        pickerLocale: 'GB' | 'US'; // GB uses dd-MMM-YYYY, US uses MMM-dd-YYYY\r\n    };\r\n}\r\nexport interface IListType extends IFieldConfig {\r\n    items: IListItem[];\r\n}\r\n\r\nexport interface IStaticAutocompleteConfig extends IListType {\r\n    forceKeypadOnMobile?: boolean;\r\n    numeric?: boolean;\r\n    optionSelected?: () => void;\r\n}\r\nexport interface IAddressAutocompleteProps {\r\n    cityId?: string;\r\n    postalCodeId?: string;\r\n    provinceId?: string;\r\n    unitId?: string;\r\n    poBoxId?: string;\r\n}\r\n\r\nexport interface IAddressAutocompleteType extends IFieldConfig {\r\n    addressAutocompleteParams: IAddressAutocompleteProps;\r\n}\r\nexport interface IListItem {\r\n    key: string;\r\n    value: string;\r\n}\r\n\r\nexport interface ISelectProps extends IListType {\r\n    searchProps?: {\r\n        hide?: boolean;\r\n        disable?: boolean;\r\n        prePopSearch?: string;\r\n    };\r\n}\r\n\r\nexport interface IFormConfig extends IConfig {\r\n    childConfigs: IConfig[];\r\n}\r\nexport interface IFieldConfig extends IConfig {\r\n    placeholder?: string;\r\n    defaultValue?: unknown;\r\n}\r\n\r\nexport interface IDatepickerConfig extends IConfig {\r\n    minYear: number;\r\n    maxYear: number;\r\n    childConfigs?: IConfig[];\r\n    useMaxDateAsToday?: boolean;\r\n    useMinDayAs?: number;\r\n    useMaxDayAs?: number;\r\n    useUnknownForMonthAndDay?: boolean;\r\n    ongoing?: boolean;\r\n    comparedWithId?: string;\r\n    hiddenDay?: boolean;\r\n    transformDisplay?: (value: any) => string;\r\n}\r\n\r\nexport interface IPresentationConfig {\r\n    id: string;\r\n    type: keyof typeof COMPONENT_TYPES;\r\n    hidden?: ConditionCheck;\r\n    noLabelMargin?: boolean;\r\n}\r\n\r\nexport interface IAlertConfig extends IPresentationConfig {\r\n    alertType: 'warn' | 'info' | 'error' | 'success' | 'tip';\r\n    label: string;\r\n    content?: string;\r\n    contentType?: 'single';\r\n    link?: {\r\n        url: string;\r\n        name: string;\r\n    };\r\n}\r\n\r\nexport interface ISubtitleConfig extends IPresentationConfig {\r\n    label: string;\r\n    textType: string;\r\n}\r\nexport interface IInfoBoxConfig extends IPresentationConfig {\r\n    icon: 'check_circle' | 'warning' | 'info';\r\n    heading: string;\r\n    caption: string;\r\n    link?: {\r\n        url: string;\r\n        name: string;\r\n    };\r\n}\r\n\r\nexport interface ICurrentStatusInCanadaReadOnlyConfig\r\n    extends IPresentationConfig {\r\n    statusHeading: string;\r\n    toDateLabel: string;\r\n    fromDateLabel: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "alertType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"warn\" | \"info\" | \"error\" | \"success\" | \"tip\"",
                    "optional": false,
                    "description": "",
                    "line": 93
                },
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 95
                },
                {
                    "name": "contentType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": true,
                    "description": "",
                    "line": 96
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 94
                },
                {
                    "name": "link",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 97
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "IPresentationConfig"
        },
        {
            "name": "IConfig",
            "id": "interface-IConfig-dbd57a1dc611201a04748b3769166f3ecb4c4e296a76234ec8d697e70286604e5124a7f302a4c394549600a385dcc4f43dd5cf5eeec4f4fe9c2cfa9decbc878b",
            "file": "packages/ds/angular/src/lib/jl-cl/jl-cl/IFormBase.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormGroup } from '@angular/forms';\r\nimport { COMPONENT_TYPES } from './dynamic-field.directive';\r\nimport { IValidator } from './validator';\r\nexport type ConditionCheck = (formGroup: FormGroup) => boolean;\r\nexport interface IConfig {\r\n    id: string;\r\n    type: keyof typeof COMPONENT_TYPES;\r\n    label?: string;\r\n    hint?: string;\r\n    alert?: string;\r\n    validation?: IValidator[];\r\n    help?: boolean;\r\n    hideRequiredLabel?: boolean;\r\n    hideStar?: boolean;\r\n    moreInfo?: () => void;\r\n    hidden?: ConditionCheck;\r\n    disabled?: ConditionCheck;\r\n    readonly?: ConditionCheck;\r\n    subText?: string;\r\n    noLabelMargin?: boolean;\r\n}\r\nexport interface IDateProps extends IFieldConfig {\r\n    dateOptions: {\r\n        minDate: Date;\r\n        maxDate: Date;\r\n        dateFormat: 'dd MMM YYYY' | 'MMM dd YYYY';\r\n        pickerLocale: 'GB' | 'US'; // GB uses dd-MMM-YYYY, US uses MMM-dd-YYYY\r\n    };\r\n}\r\nexport interface IListType extends IFieldConfig {\r\n    items: IListItem[];\r\n}\r\n\r\nexport interface IStaticAutocompleteConfig extends IListType {\r\n    forceKeypadOnMobile?: boolean;\r\n    numeric?: boolean;\r\n    optionSelected?: () => void;\r\n}\r\nexport interface IAddressAutocompleteProps {\r\n    cityId?: string;\r\n    postalCodeId?: string;\r\n    provinceId?: string;\r\n    unitId?: string;\r\n    poBoxId?: string;\r\n}\r\n\r\nexport interface IAddressAutocompleteType extends IFieldConfig {\r\n    addressAutocompleteParams: IAddressAutocompleteProps;\r\n}\r\nexport interface IListItem {\r\n    key: string;\r\n    value: string;\r\n}\r\n\r\nexport interface ISelectProps extends IListType {\r\n    searchProps?: {\r\n        hide?: boolean;\r\n        disable?: boolean;\r\n        prePopSearch?: string;\r\n    };\r\n}\r\n\r\nexport interface IFormConfig extends IConfig {\r\n    childConfigs: IConfig[];\r\n}\r\nexport interface IFieldConfig extends IConfig {\r\n    placeholder?: string;\r\n    defaultValue?: unknown;\r\n}\r\n\r\nexport interface IDatepickerConfig extends IConfig {\r\n    minYear: number;\r\n    maxYear: number;\r\n    childConfigs?: IConfig[];\r\n    useMaxDateAsToday?: boolean;\r\n    useMinDayAs?: number;\r\n    useMaxDayAs?: number;\r\n    useUnknownForMonthAndDay?: boolean;\r\n    ongoing?: boolean;\r\n    comparedWithId?: string;\r\n    hiddenDay?: boolean;\r\n    transformDisplay?: (value: any) => string;\r\n}\r\n\r\nexport interface IPresentationConfig {\r\n    id: string;\r\n    type: keyof typeof COMPONENT_TYPES;\r\n    hidden?: ConditionCheck;\r\n    noLabelMargin?: boolean;\r\n}\r\n\r\nexport interface IAlertConfig extends IPresentationConfig {\r\n    alertType: 'warn' | 'info' | 'error' | 'success' | 'tip';\r\n    label: string;\r\n    content?: string;\r\n    contentType?: 'single';\r\n    link?: {\r\n        url: string;\r\n        name: string;\r\n    };\r\n}\r\n\r\nexport interface ISubtitleConfig extends IPresentationConfig {\r\n    label: string;\r\n    textType: string;\r\n}\r\nexport interface IInfoBoxConfig extends IPresentationConfig {\r\n    icon: 'check_circle' | 'warning' | 'info';\r\n    heading: string;\r\n    caption: string;\r\n    link?: {\r\n        url: string;\r\n        name: string;\r\n    };\r\n}\r\n\r\nexport interface ICurrentStatusInCanadaReadOnlyConfig\r\n    extends IPresentationConfig {\r\n    statusHeading: string;\r\n    toDateLabel: string;\r\n    fromDateLabel: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "alert",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ConditionCheck",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "help",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "hidden",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ConditionCheck",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "hideRequiredLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "hideStar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "hint",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "moreInfo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "noLabelMargin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "readonly",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ConditionCheck",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "subText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "validation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IValidator[]",
                    "optional": true,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ICurrentStatusInCanadaReadOnlyConfig",
            "id": "interface-ICurrentStatusInCanadaReadOnlyConfig-dbd57a1dc611201a04748b3769166f3ecb4c4e296a76234ec8d697e70286604e5124a7f302a4c394549600a385dcc4f43dd5cf5eeec4f4fe9c2cfa9decbc878b",
            "file": "packages/ds/angular/src/lib/jl-cl/jl-cl/IFormBase.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormGroup } from '@angular/forms';\r\nimport { COMPONENT_TYPES } from './dynamic-field.directive';\r\nimport { IValidator } from './validator';\r\nexport type ConditionCheck = (formGroup: FormGroup) => boolean;\r\nexport interface IConfig {\r\n    id: string;\r\n    type: keyof typeof COMPONENT_TYPES;\r\n    label?: string;\r\n    hint?: string;\r\n    alert?: string;\r\n    validation?: IValidator[];\r\n    help?: boolean;\r\n    hideRequiredLabel?: boolean;\r\n    hideStar?: boolean;\r\n    moreInfo?: () => void;\r\n    hidden?: ConditionCheck;\r\n    disabled?: ConditionCheck;\r\n    readonly?: ConditionCheck;\r\n    subText?: string;\r\n    noLabelMargin?: boolean;\r\n}\r\nexport interface IDateProps extends IFieldConfig {\r\n    dateOptions: {\r\n        minDate: Date;\r\n        maxDate: Date;\r\n        dateFormat: 'dd MMM YYYY' | 'MMM dd YYYY';\r\n        pickerLocale: 'GB' | 'US'; // GB uses dd-MMM-YYYY, US uses MMM-dd-YYYY\r\n    };\r\n}\r\nexport interface IListType extends IFieldConfig {\r\n    items: IListItem[];\r\n}\r\n\r\nexport interface IStaticAutocompleteConfig extends IListType {\r\n    forceKeypadOnMobile?: boolean;\r\n    numeric?: boolean;\r\n    optionSelected?: () => void;\r\n}\r\nexport interface IAddressAutocompleteProps {\r\n    cityId?: string;\r\n    postalCodeId?: string;\r\n    provinceId?: string;\r\n    unitId?: string;\r\n    poBoxId?: string;\r\n}\r\n\r\nexport interface IAddressAutocompleteType extends IFieldConfig {\r\n    addressAutocompleteParams: IAddressAutocompleteProps;\r\n}\r\nexport interface IListItem {\r\n    key: string;\r\n    value: string;\r\n}\r\n\r\nexport interface ISelectProps extends IListType {\r\n    searchProps?: {\r\n        hide?: boolean;\r\n        disable?: boolean;\r\n        prePopSearch?: string;\r\n    };\r\n}\r\n\r\nexport interface IFormConfig extends IConfig {\r\n    childConfigs: IConfig[];\r\n}\r\nexport interface IFieldConfig extends IConfig {\r\n    placeholder?: string;\r\n    defaultValue?: unknown;\r\n}\r\n\r\nexport interface IDatepickerConfig extends IConfig {\r\n    minYear: number;\r\n    maxYear: number;\r\n    childConfigs?: IConfig[];\r\n    useMaxDateAsToday?: boolean;\r\n    useMinDayAs?: number;\r\n    useMaxDayAs?: number;\r\n    useUnknownForMonthAndDay?: boolean;\r\n    ongoing?: boolean;\r\n    comparedWithId?: string;\r\n    hiddenDay?: boolean;\r\n    transformDisplay?: (value: any) => string;\r\n}\r\n\r\nexport interface IPresentationConfig {\r\n    id: string;\r\n    type: keyof typeof COMPONENT_TYPES;\r\n    hidden?: ConditionCheck;\r\n    noLabelMargin?: boolean;\r\n}\r\n\r\nexport interface IAlertConfig extends IPresentationConfig {\r\n    alertType: 'warn' | 'info' | 'error' | 'success' | 'tip';\r\n    label: string;\r\n    content?: string;\r\n    contentType?: 'single';\r\n    link?: {\r\n        url: string;\r\n        name: string;\r\n    };\r\n}\r\n\r\nexport interface ISubtitleConfig extends IPresentationConfig {\r\n    label: string;\r\n    textType: string;\r\n}\r\nexport interface IInfoBoxConfig extends IPresentationConfig {\r\n    icon: 'check_circle' | 'warning' | 'info';\r\n    heading: string;\r\n    caption: string;\r\n    link?: {\r\n        url: string;\r\n        name: string;\r\n    };\r\n}\r\n\r\nexport interface ICurrentStatusInCanadaReadOnlyConfig\r\n    extends IPresentationConfig {\r\n    statusHeading: string;\r\n    toDateLabel: string;\r\n    fromDateLabel: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "fromDateLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 121
                },
                {
                    "name": "statusHeading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 119
                },
                {
                    "name": "toDateLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 120
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "IPresentationConfig"
        },
        {
            "name": "IDatepickerConfig",
            "id": "interface-IDatepickerConfig-dbd57a1dc611201a04748b3769166f3ecb4c4e296a76234ec8d697e70286604e5124a7f302a4c394549600a385dcc4f43dd5cf5eeec4f4fe9c2cfa9decbc878b",
            "file": "packages/ds/angular/src/lib/jl-cl/jl-cl/IFormBase.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormGroup } from '@angular/forms';\r\nimport { COMPONENT_TYPES } from './dynamic-field.directive';\r\nimport { IValidator } from './validator';\r\nexport type ConditionCheck = (formGroup: FormGroup) => boolean;\r\nexport interface IConfig {\r\n    id: string;\r\n    type: keyof typeof COMPONENT_TYPES;\r\n    label?: string;\r\n    hint?: string;\r\n    alert?: string;\r\n    validation?: IValidator[];\r\n    help?: boolean;\r\n    hideRequiredLabel?: boolean;\r\n    hideStar?: boolean;\r\n    moreInfo?: () => void;\r\n    hidden?: ConditionCheck;\r\n    disabled?: ConditionCheck;\r\n    readonly?: ConditionCheck;\r\n    subText?: string;\r\n    noLabelMargin?: boolean;\r\n}\r\nexport interface IDateProps extends IFieldConfig {\r\n    dateOptions: {\r\n        minDate: Date;\r\n        maxDate: Date;\r\n        dateFormat: 'dd MMM YYYY' | 'MMM dd YYYY';\r\n        pickerLocale: 'GB' | 'US'; // GB uses dd-MMM-YYYY, US uses MMM-dd-YYYY\r\n    };\r\n}\r\nexport interface IListType extends IFieldConfig {\r\n    items: IListItem[];\r\n}\r\n\r\nexport interface IStaticAutocompleteConfig extends IListType {\r\n    forceKeypadOnMobile?: boolean;\r\n    numeric?: boolean;\r\n    optionSelected?: () => void;\r\n}\r\nexport interface IAddressAutocompleteProps {\r\n    cityId?: string;\r\n    postalCodeId?: string;\r\n    provinceId?: string;\r\n    unitId?: string;\r\n    poBoxId?: string;\r\n}\r\n\r\nexport interface IAddressAutocompleteType extends IFieldConfig {\r\n    addressAutocompleteParams: IAddressAutocompleteProps;\r\n}\r\nexport interface IListItem {\r\n    key: string;\r\n    value: string;\r\n}\r\n\r\nexport interface ISelectProps extends IListType {\r\n    searchProps?: {\r\n        hide?: boolean;\r\n        disable?: boolean;\r\n        prePopSearch?: string;\r\n    };\r\n}\r\n\r\nexport interface IFormConfig extends IConfig {\r\n    childConfigs: IConfig[];\r\n}\r\nexport interface IFieldConfig extends IConfig {\r\n    placeholder?: string;\r\n    defaultValue?: unknown;\r\n}\r\n\r\nexport interface IDatepickerConfig extends IConfig {\r\n    minYear: number;\r\n    maxYear: number;\r\n    childConfigs?: IConfig[];\r\n    useMaxDateAsToday?: boolean;\r\n    useMinDayAs?: number;\r\n    useMaxDayAs?: number;\r\n    useUnknownForMonthAndDay?: boolean;\r\n    ongoing?: boolean;\r\n    comparedWithId?: string;\r\n    hiddenDay?: boolean;\r\n    transformDisplay?: (value: any) => string;\r\n}\r\n\r\nexport interface IPresentationConfig {\r\n    id: string;\r\n    type: keyof typeof COMPONENT_TYPES;\r\n    hidden?: ConditionCheck;\r\n    noLabelMargin?: boolean;\r\n}\r\n\r\nexport interface IAlertConfig extends IPresentationConfig {\r\n    alertType: 'warn' | 'info' | 'error' | 'success' | 'tip';\r\n    label: string;\r\n    content?: string;\r\n    contentType?: 'single';\r\n    link?: {\r\n        url: string;\r\n        name: string;\r\n    };\r\n}\r\n\r\nexport interface ISubtitleConfig extends IPresentationConfig {\r\n    label: string;\r\n    textType: string;\r\n}\r\nexport interface IInfoBoxConfig extends IPresentationConfig {\r\n    icon: 'check_circle' | 'warning' | 'info';\r\n    heading: string;\r\n    caption: string;\r\n    link?: {\r\n        url: string;\r\n        name: string;\r\n    };\r\n}\r\n\r\nexport interface ICurrentStatusInCanadaReadOnlyConfig\r\n    extends IPresentationConfig {\r\n    statusHeading: string;\r\n    toDateLabel: string;\r\n    fromDateLabel: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "childConfigs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IConfig[]",
                    "optional": true,
                    "description": "",
                    "line": 74
                },
                {
                    "name": "comparedWithId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 80
                },
                {
                    "name": "hiddenDay",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 81
                },
                {
                    "name": "maxYear",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 73
                },
                {
                    "name": "minYear",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 72
                },
                {
                    "name": "ongoing",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 79
                },
                {
                    "name": "transformDisplay",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 82
                },
                {
                    "name": "useMaxDateAsToday",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 75
                },
                {
                    "name": "useMaxDayAs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 77
                },
                {
                    "name": "useMinDayAs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 76
                },
                {
                    "name": "useUnknownForMonthAndDay",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 78
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "IConfig"
        },
        {
            "name": "IDateProps",
            "id": "interface-IDateProps-dbd57a1dc611201a04748b3769166f3ecb4c4e296a76234ec8d697e70286604e5124a7f302a4c394549600a385dcc4f43dd5cf5eeec4f4fe9c2cfa9decbc878b",
            "file": "packages/ds/angular/src/lib/jl-cl/jl-cl/IFormBase.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormGroup } from '@angular/forms';\r\nimport { COMPONENT_TYPES } from './dynamic-field.directive';\r\nimport { IValidator } from './validator';\r\nexport type ConditionCheck = (formGroup: FormGroup) => boolean;\r\nexport interface IConfig {\r\n    id: string;\r\n    type: keyof typeof COMPONENT_TYPES;\r\n    label?: string;\r\n    hint?: string;\r\n    alert?: string;\r\n    validation?: IValidator[];\r\n    help?: boolean;\r\n    hideRequiredLabel?: boolean;\r\n    hideStar?: boolean;\r\n    moreInfo?: () => void;\r\n    hidden?: ConditionCheck;\r\n    disabled?: ConditionCheck;\r\n    readonly?: ConditionCheck;\r\n    subText?: string;\r\n    noLabelMargin?: boolean;\r\n}\r\nexport interface IDateProps extends IFieldConfig {\r\n    dateOptions: {\r\n        minDate: Date;\r\n        maxDate: Date;\r\n        dateFormat: 'dd MMM YYYY' | 'MMM dd YYYY';\r\n        pickerLocale: 'GB' | 'US'; // GB uses dd-MMM-YYYY, US uses MMM-dd-YYYY\r\n    };\r\n}\r\nexport interface IListType extends IFieldConfig {\r\n    items: IListItem[];\r\n}\r\n\r\nexport interface IStaticAutocompleteConfig extends IListType {\r\n    forceKeypadOnMobile?: boolean;\r\n    numeric?: boolean;\r\n    optionSelected?: () => void;\r\n}\r\nexport interface IAddressAutocompleteProps {\r\n    cityId?: string;\r\n    postalCodeId?: string;\r\n    provinceId?: string;\r\n    unitId?: string;\r\n    poBoxId?: string;\r\n}\r\n\r\nexport interface IAddressAutocompleteType extends IFieldConfig {\r\n    addressAutocompleteParams: IAddressAutocompleteProps;\r\n}\r\nexport interface IListItem {\r\n    key: string;\r\n    value: string;\r\n}\r\n\r\nexport interface ISelectProps extends IListType {\r\n    searchProps?: {\r\n        hide?: boolean;\r\n        disable?: boolean;\r\n        prePopSearch?: string;\r\n    };\r\n}\r\n\r\nexport interface IFormConfig extends IConfig {\r\n    childConfigs: IConfig[];\r\n}\r\nexport interface IFieldConfig extends IConfig {\r\n    placeholder?: string;\r\n    defaultValue?: unknown;\r\n}\r\n\r\nexport interface IDatepickerConfig extends IConfig {\r\n    minYear: number;\r\n    maxYear: number;\r\n    childConfigs?: IConfig[];\r\n    useMaxDateAsToday?: boolean;\r\n    useMinDayAs?: number;\r\n    useMaxDayAs?: number;\r\n    useUnknownForMonthAndDay?: boolean;\r\n    ongoing?: boolean;\r\n    comparedWithId?: string;\r\n    hiddenDay?: boolean;\r\n    transformDisplay?: (value: any) => string;\r\n}\r\n\r\nexport interface IPresentationConfig {\r\n    id: string;\r\n    type: keyof typeof COMPONENT_TYPES;\r\n    hidden?: ConditionCheck;\r\n    noLabelMargin?: boolean;\r\n}\r\n\r\nexport interface IAlertConfig extends IPresentationConfig {\r\n    alertType: 'warn' | 'info' | 'error' | 'success' | 'tip';\r\n    label: string;\r\n    content?: string;\r\n    contentType?: 'single';\r\n    link?: {\r\n        url: string;\r\n        name: string;\r\n    };\r\n}\r\n\r\nexport interface ISubtitleConfig extends IPresentationConfig {\r\n    label: string;\r\n    textType: string;\r\n}\r\nexport interface IInfoBoxConfig extends IPresentationConfig {\r\n    icon: 'check_circle' | 'warning' | 'info';\r\n    heading: string;\r\n    caption: string;\r\n    link?: {\r\n        url: string;\r\n        name: string;\r\n    };\r\n}\r\n\r\nexport interface ICurrentStatusInCanadaReadOnlyConfig\r\n    extends IPresentationConfig {\r\n    statusHeading: string;\r\n    toDateLabel: string;\r\n    fromDateLabel: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "dateOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "IFieldConfig"
        },
        {
            "name": "IDynamicValidatorModel",
            "id": "interface-IDynamicValidatorModel-dc96d3dcbdcf9b029dc966fb244fa617ce3027661e3daeab2d9129009883f35b00124b550c4307be8ce3653ced326542f8cef6d149536d1e25469fe028301a58",
            "file": "packages/ds/angular/src/lib/jl-cl/jl-cl/validator.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ValidatorFn, Validators } from '@angular/forms';\r\nimport { IListItem } from './IFormBase';\r\nimport {\r\n    maxDateValidator,\r\n    minDateValidator,\r\n} from './validator-functions/date-validator';\r\nimport {\r\n    allowedPatternValidator,\r\n    listValidator,\r\n    validatePrimaryNumber,\r\n    validateTable,\r\n} from './validator-functions/simple-validators';\r\nimport { ErrorNames } from './validator-types';\r\nexport interface IValidator {\r\n    errorName: ErrorNames;\r\n    validator: ValidatorFn;\r\n    errorMsg: string;\r\n}\r\n\r\nexport interface IValidatorModel {\r\n    [validatorName: string]: IValidator;\r\n}\r\nexport interface IDynamicValidatorModel {\r\n    [validatorName: string]: (data: any) => IValidator;\r\n}\r\n\r\nexport const VALIDATORS: IValidatorModel = {\r\n    required: {\r\n        errorName: ErrorNames.required,\r\n        validator: Validators.required,\r\n        errorMsg: 'ErrorMessage.required',\r\n    },\r\n};\r\n\r\nexport const VALIDATOR_TABLE_REQUIRED = {\r\n    tableRequire: {\r\n        errorName: ErrorNames.required,\r\n        validator: validateTable,\r\n        errorMsg: 'ErrorMessage.required',\r\n    },\r\n};\r\n\r\nexport const VALIDATOR_TABLE_PRIMARY_NUMBER = {\r\n    primaryNumberRequire: {\r\n        errorName: ErrorNames.primaryNumberRequired,\r\n        validator: validatePrimaryNumber,\r\n        errorMsg: 'ErrorMessage.primaryNumberRequired',\r\n    },\r\n};\r\n\r\nexport const VALIDATORS_DYNAMIC: IDynamicValidatorModel = {\r\n    minDate: (date: Date) =>\r\n        ({\r\n            errorMsg: 'Date is below minimum',\r\n            errorName: ErrorNames.minDate,\r\n            validator: minDateValidator(date),\r\n        } as IValidator),\r\n    maxDate: (date: Date) =>\r\n        ({\r\n            errorMsg: 'Date is above maximum',\r\n            errorName: ErrorNames.maxDate,\r\n            validator: maxDateValidator(date),\r\n        } as IValidator),\r\n    minLength: (minimum: number) => ({\r\n        errorMsg: 'ErrorMessage.MinLength',\r\n        errorName: ErrorNames.minLength,\r\n        validator: Validators.minLength(minimum),\r\n    }),\r\n    maxLength: (maximum: number) => ({\r\n        errorMsg: 'ErrorMessage.MaxLength',\r\n        errorName: ErrorNames.maxLength,\r\n        validator: Validators.maxLength(maximum),\r\n    }),\r\n    allowedPattern: (regex: RegExp) => ({\r\n        errorMsg: 'ErrorMessage.DisallowedCharacter',\r\n        errorName: ErrorNames.disallowed,\r\n        validator: allowedPatternValidator(regex),\r\n    }),\r\n    autocompleteList: (items: IListItem[]) => ({\r\n        errorMsg: 'ErrorMessage.invalid',\r\n        errorName: ErrorNames.invalid,\r\n        validator: listValidator(items),\r\n    }),\r\n    maxCurrencyLength: (maximum: number) => ({\r\n        errorMsg: 'Must contain only numbers, between 0 and 999,999,999', //Text doesn't exist in translation, will update once added\r\n        errorName: ErrorNames.maxLength,\r\n        validator: Validators.maxLength(maximum),\r\n    }),\r\n};\r\n",
            "properties": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-dc96d3dcbdcf9b029dc966fb244fa617ce3027661e3daeab2d9129009883f35b00124b550c4307be8ce3653ced326542f8cef6d149536d1e25469fe028301a58",
                    "args": [
                        {
                            "name": "validatorName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "IValidator",
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 175,
            "methods": []
        },
        {
            "name": "IField",
            "id": "interface-IField-d6288294a0dbac57dfd1d82e6fbbf007d0d355a5c08a2c6f1a8a8c2531f804cf126301587f629a95ade2dcffa6b942b6869d00d7b66725cc92205061e64a2430",
            "file": "packages/ds/angular/src/lib/jl-cl/jl-cl/dynamic-field.directive.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\r\n    ComponentFactoryResolver,\r\n    ComponentRef,\r\n    Directive,\r\n    Input,\r\n    OnChanges,\r\n    OnInit,\r\n    SimpleChanges,\r\n    ViewContainerRef,\r\n} from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { DynFormBaseComponent } from './form-base/form-base';\r\nimport { IConfig } from './IFormBase';\r\nimport { DynFormAlertComponent } from './jl-form-alert/jl-form-alert.component';\r\nimport { DynCheckboxComponent } from './jl-form-checkbox/jl-form-checkbox.component';\r\nimport { DynDropDownComponent } from './jl-form-dropdown/jl-form-dropdown.component';\r\nimport { DynFormLabelComponent } from './jl-form-label/jl-form-label.component';\r\nimport { DynRadioComponent } from './jl-form-radio/jl-form-radio.component';\r\nimport { DynTextFieldComponent } from './jl-form-textfield/jl-form-textfield.component';\r\n\r\n@Directive({\r\n    selector: '[jlclField]',\r\n})\r\nexport class DynamicFieldDirective implements OnInit, OnChanges {\r\n    @Input()\r\n    config!: IConfig;\r\n    @Input()\r\n    group!: FormGroup;\r\n    @Input()\r\n    disabled = false;\r\n    component: ComponentRef<IField> | undefined;\r\n\r\n    constructor(\r\n        private resolver: ComponentFactoryResolver,\r\n        private container: ViewContainerRef\r\n    ) {}\r\n\r\n    ngOnInit(): void {\r\n        const factory = this.resolver.resolveComponentFactory<IField>(\r\n            COMPONENT_TYPES[this.config.type]\r\n        );\r\n        this.component = this.container.createComponent(factory);\r\n        this.component.instance.group = this.group;\r\n        this.component.instance.config = this.config;\r\n        this.component.instance.disabled = this.disabled;\r\n    }\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        if (this.component) {\r\n            this.component.instance.disabled = this.disabled;\r\n\r\n            if (this.component.instance.ngOnChanges) {\r\n                this.component.instance.ngOnChanges(changes);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport interface IField {\r\n    group: FormGroup;\r\n    config: IConfig;\r\n    disabled: boolean;\r\n    ngOnChanges?: (changes: SimpleChanges) => void;\r\n}\r\n\r\nexport const COMPONENT_TYPES = {\r\n    alertBox: DynFormAlertComponent,\r\n    input: DynTextFieldComponent,\r\n    label: DynFormLabelComponent,\r\n    form: DynFormBaseComponent,\r\n    checkbox: DynCheckboxComponent,\r\n    radio: DynRadioComponent,\r\n    dropdown: DynDropDownComponent,\r\n};\r\n",
            "properties": [
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IConfig",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "group",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "ngOnChanges",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 62
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IFieldConfig",
            "id": "interface-IFieldConfig-dbd57a1dc611201a04748b3769166f3ecb4c4e296a76234ec8d697e70286604e5124a7f302a4c394549600a385dcc4f43dd5cf5eeec4f4fe9c2cfa9decbc878b",
            "file": "packages/ds/angular/src/lib/jl-cl/jl-cl/IFormBase.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormGroup } from '@angular/forms';\r\nimport { COMPONENT_TYPES } from './dynamic-field.directive';\r\nimport { IValidator } from './validator';\r\nexport type ConditionCheck = (formGroup: FormGroup) => boolean;\r\nexport interface IConfig {\r\n    id: string;\r\n    type: keyof typeof COMPONENT_TYPES;\r\n    label?: string;\r\n    hint?: string;\r\n    alert?: string;\r\n    validation?: IValidator[];\r\n    help?: boolean;\r\n    hideRequiredLabel?: boolean;\r\n    hideStar?: boolean;\r\n    moreInfo?: () => void;\r\n    hidden?: ConditionCheck;\r\n    disabled?: ConditionCheck;\r\n    readonly?: ConditionCheck;\r\n    subText?: string;\r\n    noLabelMargin?: boolean;\r\n}\r\nexport interface IDateProps extends IFieldConfig {\r\n    dateOptions: {\r\n        minDate: Date;\r\n        maxDate: Date;\r\n        dateFormat: 'dd MMM YYYY' | 'MMM dd YYYY';\r\n        pickerLocale: 'GB' | 'US'; // GB uses dd-MMM-YYYY, US uses MMM-dd-YYYY\r\n    };\r\n}\r\nexport interface IListType extends IFieldConfig {\r\n    items: IListItem[];\r\n}\r\n\r\nexport interface IStaticAutocompleteConfig extends IListType {\r\n    forceKeypadOnMobile?: boolean;\r\n    numeric?: boolean;\r\n    optionSelected?: () => void;\r\n}\r\nexport interface IAddressAutocompleteProps {\r\n    cityId?: string;\r\n    postalCodeId?: string;\r\n    provinceId?: string;\r\n    unitId?: string;\r\n    poBoxId?: string;\r\n}\r\n\r\nexport interface IAddressAutocompleteType extends IFieldConfig {\r\n    addressAutocompleteParams: IAddressAutocompleteProps;\r\n}\r\nexport interface IListItem {\r\n    key: string;\r\n    value: string;\r\n}\r\n\r\nexport interface ISelectProps extends IListType {\r\n    searchProps?: {\r\n        hide?: boolean;\r\n        disable?: boolean;\r\n        prePopSearch?: string;\r\n    };\r\n}\r\n\r\nexport interface IFormConfig extends IConfig {\r\n    childConfigs: IConfig[];\r\n}\r\nexport interface IFieldConfig extends IConfig {\r\n    placeholder?: string;\r\n    defaultValue?: unknown;\r\n}\r\n\r\nexport interface IDatepickerConfig extends IConfig {\r\n    minYear: number;\r\n    maxYear: number;\r\n    childConfigs?: IConfig[];\r\n    useMaxDateAsToday?: boolean;\r\n    useMinDayAs?: number;\r\n    useMaxDayAs?: number;\r\n    useUnknownForMonthAndDay?: boolean;\r\n    ongoing?: boolean;\r\n    comparedWithId?: string;\r\n    hiddenDay?: boolean;\r\n    transformDisplay?: (value: any) => string;\r\n}\r\n\r\nexport interface IPresentationConfig {\r\n    id: string;\r\n    type: keyof typeof COMPONENT_TYPES;\r\n    hidden?: ConditionCheck;\r\n    noLabelMargin?: boolean;\r\n}\r\n\r\nexport interface IAlertConfig extends IPresentationConfig {\r\n    alertType: 'warn' | 'info' | 'error' | 'success' | 'tip';\r\n    label: string;\r\n    content?: string;\r\n    contentType?: 'single';\r\n    link?: {\r\n        url: string;\r\n        name: string;\r\n    };\r\n}\r\n\r\nexport interface ISubtitleConfig extends IPresentationConfig {\r\n    label: string;\r\n    textType: string;\r\n}\r\nexport interface IInfoBoxConfig extends IPresentationConfig {\r\n    icon: 'check_circle' | 'warning' | 'info';\r\n    heading: string;\r\n    caption: string;\r\n    link?: {\r\n        url: string;\r\n        name: string;\r\n    };\r\n}\r\n\r\nexport interface ICurrentStatusInCanadaReadOnlyConfig\r\n    extends IPresentationConfig {\r\n    statusHeading: string;\r\n    toDateLabel: string;\r\n    fromDateLabel: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "defaultValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": true,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 67
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "IConfig"
        },
        {
            "name": "IFormConfig",
            "id": "interface-IFormConfig-dbd57a1dc611201a04748b3769166f3ecb4c4e296a76234ec8d697e70286604e5124a7f302a4c394549600a385dcc4f43dd5cf5eeec4f4fe9c2cfa9decbc878b",
            "file": "packages/ds/angular/src/lib/jl-cl/jl-cl/IFormBase.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormGroup } from '@angular/forms';\r\nimport { COMPONENT_TYPES } from './dynamic-field.directive';\r\nimport { IValidator } from './validator';\r\nexport type ConditionCheck = (formGroup: FormGroup) => boolean;\r\nexport interface IConfig {\r\n    id: string;\r\n    type: keyof typeof COMPONENT_TYPES;\r\n    label?: string;\r\n    hint?: string;\r\n    alert?: string;\r\n    validation?: IValidator[];\r\n    help?: boolean;\r\n    hideRequiredLabel?: boolean;\r\n    hideStar?: boolean;\r\n    moreInfo?: () => void;\r\n    hidden?: ConditionCheck;\r\n    disabled?: ConditionCheck;\r\n    readonly?: ConditionCheck;\r\n    subText?: string;\r\n    noLabelMargin?: boolean;\r\n}\r\nexport interface IDateProps extends IFieldConfig {\r\n    dateOptions: {\r\n        minDate: Date;\r\n        maxDate: Date;\r\n        dateFormat: 'dd MMM YYYY' | 'MMM dd YYYY';\r\n        pickerLocale: 'GB' | 'US'; // GB uses dd-MMM-YYYY, US uses MMM-dd-YYYY\r\n    };\r\n}\r\nexport interface IListType extends IFieldConfig {\r\n    items: IListItem[];\r\n}\r\n\r\nexport interface IStaticAutocompleteConfig extends IListType {\r\n    forceKeypadOnMobile?: boolean;\r\n    numeric?: boolean;\r\n    optionSelected?: () => void;\r\n}\r\nexport interface IAddressAutocompleteProps {\r\n    cityId?: string;\r\n    postalCodeId?: string;\r\n    provinceId?: string;\r\n    unitId?: string;\r\n    poBoxId?: string;\r\n}\r\n\r\nexport interface IAddressAutocompleteType extends IFieldConfig {\r\n    addressAutocompleteParams: IAddressAutocompleteProps;\r\n}\r\nexport interface IListItem {\r\n    key: string;\r\n    value: string;\r\n}\r\n\r\nexport interface ISelectProps extends IListType {\r\n    searchProps?: {\r\n        hide?: boolean;\r\n        disable?: boolean;\r\n        prePopSearch?: string;\r\n    };\r\n}\r\n\r\nexport interface IFormConfig extends IConfig {\r\n    childConfigs: IConfig[];\r\n}\r\nexport interface IFieldConfig extends IConfig {\r\n    placeholder?: string;\r\n    defaultValue?: unknown;\r\n}\r\n\r\nexport interface IDatepickerConfig extends IConfig {\r\n    minYear: number;\r\n    maxYear: number;\r\n    childConfigs?: IConfig[];\r\n    useMaxDateAsToday?: boolean;\r\n    useMinDayAs?: number;\r\n    useMaxDayAs?: number;\r\n    useUnknownForMonthAndDay?: boolean;\r\n    ongoing?: boolean;\r\n    comparedWithId?: string;\r\n    hiddenDay?: boolean;\r\n    transformDisplay?: (value: any) => string;\r\n}\r\n\r\nexport interface IPresentationConfig {\r\n    id: string;\r\n    type: keyof typeof COMPONENT_TYPES;\r\n    hidden?: ConditionCheck;\r\n    noLabelMargin?: boolean;\r\n}\r\n\r\nexport interface IAlertConfig extends IPresentationConfig {\r\n    alertType: 'warn' | 'info' | 'error' | 'success' | 'tip';\r\n    label: string;\r\n    content?: string;\r\n    contentType?: 'single';\r\n    link?: {\r\n        url: string;\r\n        name: string;\r\n    };\r\n}\r\n\r\nexport interface ISubtitleConfig extends IPresentationConfig {\r\n    label: string;\r\n    textType: string;\r\n}\r\nexport interface IInfoBoxConfig extends IPresentationConfig {\r\n    icon: 'check_circle' | 'warning' | 'info';\r\n    heading: string;\r\n    caption: string;\r\n    link?: {\r\n        url: string;\r\n        name: string;\r\n    };\r\n}\r\n\r\nexport interface ICurrentStatusInCanadaReadOnlyConfig\r\n    extends IPresentationConfig {\r\n    statusHeading: string;\r\n    toDateLabel: string;\r\n    fromDateLabel: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "childConfigs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IConfig[]",
                    "optional": false,
                    "description": "",
                    "line": 64
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "IConfig"
        },
        {
            "name": "IFormErrorInfoArray",
            "id": "interface-IFormErrorInfoArray-88072c0c3fbc36e496e4b8ccf9d7d0925d2ca3cd9eb1be7bd711ddd5de9c771d159a19da244abff02c4f493dbb739ae68078537a948025080f35c7eb94837eec",
            "file": "packages/ds/angular/src/lib/jl-cl/jl-cl/jl-form-error/jl-form-error.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ChangeDetectorRef, Component, Input, OnInit } from '@angular/core';\r\nimport { AbstractControl } from '@angular/forms';\r\nimport { IConfig } from '../IFormBase';\r\nimport { IValidator } from '../validator';\r\nimport { ErrorNames } from '../validator-types';\r\n\r\ninterface IFormErrorInfoArray {\r\n    disallowedCharacter?: string;\r\n    charDiff?: number;\r\n    disallowedPattern?: string;\r\n}\r\n\r\n@Component({\r\n    selector: 'jlcl-form-error',\r\n    templateUrl: './jl-form-error.html',\r\n})\r\nexport class DynFormErrorComponent implements OnInit {\r\n    @Input()\r\n    error!: IValidator;\r\n    //TODO: update type\r\n    @Input()\r\n    validatedField!: AbstractControl;\r\n    @Input()\r\n    config!: IConfig;\r\n\r\n    get errorParams(): IFormErrorInfoArray {\r\n        const infoArray: IFormErrorInfoArray = {\r\n            disallowedCharacter: this.validatedField.getError(\r\n                ErrorNames.disallowed\r\n            )?.disallowedCharacter,\r\n            charDiff: this.getCharDiff(),\r\n            disallowedPattern: this.getDisallowedPattern(),\r\n        };\r\n        return infoArray;\r\n    }\r\n    constructor(private changeRef: ChangeDetectorRef) {}\r\n    ngOnInit(): void {\r\n        this.validatedField.valueChanges.subscribe(() => {\r\n            this.changeRef.markForCheck();\r\n        });\r\n    }\r\n\r\n    getCharDiff(): number | undefined {\r\n        if (this.validatedField.hasError(ErrorNames.maxLength)) {\r\n            const error = this.validatedField.getError(ErrorNames.maxLength);\r\n            return +error?.actualLength - +error?.requiredLength;\r\n        } else if (this.validatedField.hasError(ErrorNames.minLength)) {\r\n            const error = this.validatedField.getError(ErrorNames.minLength);\r\n            return +error.requiredLength - +error.actualLength;\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    getDisallowedPattern(): string | undefined {\r\n        if (\r\n            this.validatedField.hasError(ErrorNames.pattern) &&\r\n            !!this.validatedField.getError(ErrorNames.pattern).displayPattern\r\n        ) {\r\n            return this.validatedField.getError(ErrorNames.pattern)\r\n                .displayPattern;\r\n        }\r\n        return undefined;\r\n    }\r\n}\r\n",
            "properties": [
                {
                    "name": "charDiff",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "disallowedCharacter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "disallowedPattern",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IInfoBoxConfig",
            "id": "interface-IInfoBoxConfig-dbd57a1dc611201a04748b3769166f3ecb4c4e296a76234ec8d697e70286604e5124a7f302a4c394549600a385dcc4f43dd5cf5eeec4f4fe9c2cfa9decbc878b",
            "file": "packages/ds/angular/src/lib/jl-cl/jl-cl/IFormBase.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormGroup } from '@angular/forms';\r\nimport { COMPONENT_TYPES } from './dynamic-field.directive';\r\nimport { IValidator } from './validator';\r\nexport type ConditionCheck = (formGroup: FormGroup) => boolean;\r\nexport interface IConfig {\r\n    id: string;\r\n    type: keyof typeof COMPONENT_TYPES;\r\n    label?: string;\r\n    hint?: string;\r\n    alert?: string;\r\n    validation?: IValidator[];\r\n    help?: boolean;\r\n    hideRequiredLabel?: boolean;\r\n    hideStar?: boolean;\r\n    moreInfo?: () => void;\r\n    hidden?: ConditionCheck;\r\n    disabled?: ConditionCheck;\r\n    readonly?: ConditionCheck;\r\n    subText?: string;\r\n    noLabelMargin?: boolean;\r\n}\r\nexport interface IDateProps extends IFieldConfig {\r\n    dateOptions: {\r\n        minDate: Date;\r\n        maxDate: Date;\r\n        dateFormat: 'dd MMM YYYY' | 'MMM dd YYYY';\r\n        pickerLocale: 'GB' | 'US'; // GB uses dd-MMM-YYYY, US uses MMM-dd-YYYY\r\n    };\r\n}\r\nexport interface IListType extends IFieldConfig {\r\n    items: IListItem[];\r\n}\r\n\r\nexport interface IStaticAutocompleteConfig extends IListType {\r\n    forceKeypadOnMobile?: boolean;\r\n    numeric?: boolean;\r\n    optionSelected?: () => void;\r\n}\r\nexport interface IAddressAutocompleteProps {\r\n    cityId?: string;\r\n    postalCodeId?: string;\r\n    provinceId?: string;\r\n    unitId?: string;\r\n    poBoxId?: string;\r\n}\r\n\r\nexport interface IAddressAutocompleteType extends IFieldConfig {\r\n    addressAutocompleteParams: IAddressAutocompleteProps;\r\n}\r\nexport interface IListItem {\r\n    key: string;\r\n    value: string;\r\n}\r\n\r\nexport interface ISelectProps extends IListType {\r\n    searchProps?: {\r\n        hide?: boolean;\r\n        disable?: boolean;\r\n        prePopSearch?: string;\r\n    };\r\n}\r\n\r\nexport interface IFormConfig extends IConfig {\r\n    childConfigs: IConfig[];\r\n}\r\nexport interface IFieldConfig extends IConfig {\r\n    placeholder?: string;\r\n    defaultValue?: unknown;\r\n}\r\n\r\nexport interface IDatepickerConfig extends IConfig {\r\n    minYear: number;\r\n    maxYear: number;\r\n    childConfigs?: IConfig[];\r\n    useMaxDateAsToday?: boolean;\r\n    useMinDayAs?: number;\r\n    useMaxDayAs?: number;\r\n    useUnknownForMonthAndDay?: boolean;\r\n    ongoing?: boolean;\r\n    comparedWithId?: string;\r\n    hiddenDay?: boolean;\r\n    transformDisplay?: (value: any) => string;\r\n}\r\n\r\nexport interface IPresentationConfig {\r\n    id: string;\r\n    type: keyof typeof COMPONENT_TYPES;\r\n    hidden?: ConditionCheck;\r\n    noLabelMargin?: boolean;\r\n}\r\n\r\nexport interface IAlertConfig extends IPresentationConfig {\r\n    alertType: 'warn' | 'info' | 'error' | 'success' | 'tip';\r\n    label: string;\r\n    content?: string;\r\n    contentType?: 'single';\r\n    link?: {\r\n        url: string;\r\n        name: string;\r\n    };\r\n}\r\n\r\nexport interface ISubtitleConfig extends IPresentationConfig {\r\n    label: string;\r\n    textType: string;\r\n}\r\nexport interface IInfoBoxConfig extends IPresentationConfig {\r\n    icon: 'check_circle' | 'warning' | 'info';\r\n    heading: string;\r\n    caption: string;\r\n    link?: {\r\n        url: string;\r\n        name: string;\r\n    };\r\n}\r\n\r\nexport interface ICurrentStatusInCanadaReadOnlyConfig\r\n    extends IPresentationConfig {\r\n    statusHeading: string;\r\n    toDateLabel: string;\r\n    fromDateLabel: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "caption",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 110
                },
                {
                    "name": "heading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 109
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"check_circle\" | \"warning\" | \"info\"",
                    "optional": false,
                    "description": "",
                    "line": 108
                },
                {
                    "name": "link",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 111
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "IPresentationConfig"
        },
        {
            "name": "IListItem",
            "id": "interface-IListItem-dbd57a1dc611201a04748b3769166f3ecb4c4e296a76234ec8d697e70286604e5124a7f302a4c394549600a385dcc4f43dd5cf5eeec4f4fe9c2cfa9decbc878b",
            "file": "packages/ds/angular/src/lib/jl-cl/jl-cl/IFormBase.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormGroup } from '@angular/forms';\r\nimport { COMPONENT_TYPES } from './dynamic-field.directive';\r\nimport { IValidator } from './validator';\r\nexport type ConditionCheck = (formGroup: FormGroup) => boolean;\r\nexport interface IConfig {\r\n    id: string;\r\n    type: keyof typeof COMPONENT_TYPES;\r\n    label?: string;\r\n    hint?: string;\r\n    alert?: string;\r\n    validation?: IValidator[];\r\n    help?: boolean;\r\n    hideRequiredLabel?: boolean;\r\n    hideStar?: boolean;\r\n    moreInfo?: () => void;\r\n    hidden?: ConditionCheck;\r\n    disabled?: ConditionCheck;\r\n    readonly?: ConditionCheck;\r\n    subText?: string;\r\n    noLabelMargin?: boolean;\r\n}\r\nexport interface IDateProps extends IFieldConfig {\r\n    dateOptions: {\r\n        minDate: Date;\r\n        maxDate: Date;\r\n        dateFormat: 'dd MMM YYYY' | 'MMM dd YYYY';\r\n        pickerLocale: 'GB' | 'US'; // GB uses dd-MMM-YYYY, US uses MMM-dd-YYYY\r\n    };\r\n}\r\nexport interface IListType extends IFieldConfig {\r\n    items: IListItem[];\r\n}\r\n\r\nexport interface IStaticAutocompleteConfig extends IListType {\r\n    forceKeypadOnMobile?: boolean;\r\n    numeric?: boolean;\r\n    optionSelected?: () => void;\r\n}\r\nexport interface IAddressAutocompleteProps {\r\n    cityId?: string;\r\n    postalCodeId?: string;\r\n    provinceId?: string;\r\n    unitId?: string;\r\n    poBoxId?: string;\r\n}\r\n\r\nexport interface IAddressAutocompleteType extends IFieldConfig {\r\n    addressAutocompleteParams: IAddressAutocompleteProps;\r\n}\r\nexport interface IListItem {\r\n    key: string;\r\n    value: string;\r\n}\r\n\r\nexport interface ISelectProps extends IListType {\r\n    searchProps?: {\r\n        hide?: boolean;\r\n        disable?: boolean;\r\n        prePopSearch?: string;\r\n    };\r\n}\r\n\r\nexport interface IFormConfig extends IConfig {\r\n    childConfigs: IConfig[];\r\n}\r\nexport interface IFieldConfig extends IConfig {\r\n    placeholder?: string;\r\n    defaultValue?: unknown;\r\n}\r\n\r\nexport interface IDatepickerConfig extends IConfig {\r\n    minYear: number;\r\n    maxYear: number;\r\n    childConfigs?: IConfig[];\r\n    useMaxDateAsToday?: boolean;\r\n    useMinDayAs?: number;\r\n    useMaxDayAs?: number;\r\n    useUnknownForMonthAndDay?: boolean;\r\n    ongoing?: boolean;\r\n    comparedWithId?: string;\r\n    hiddenDay?: boolean;\r\n    transformDisplay?: (value: any) => string;\r\n}\r\n\r\nexport interface IPresentationConfig {\r\n    id: string;\r\n    type: keyof typeof COMPONENT_TYPES;\r\n    hidden?: ConditionCheck;\r\n    noLabelMargin?: boolean;\r\n}\r\n\r\nexport interface IAlertConfig extends IPresentationConfig {\r\n    alertType: 'warn' | 'info' | 'error' | 'success' | 'tip';\r\n    label: string;\r\n    content?: string;\r\n    contentType?: 'single';\r\n    link?: {\r\n        url: string;\r\n        name: string;\r\n    };\r\n}\r\n\r\nexport interface ISubtitleConfig extends IPresentationConfig {\r\n    label: string;\r\n    textType: string;\r\n}\r\nexport interface IInfoBoxConfig extends IPresentationConfig {\r\n    icon: 'check_circle' | 'warning' | 'info';\r\n    heading: string;\r\n    caption: string;\r\n    link?: {\r\n        url: string;\r\n        name: string;\r\n    };\r\n}\r\n\r\nexport interface ICurrentStatusInCanadaReadOnlyConfig\r\n    extends IPresentationConfig {\r\n    statusHeading: string;\r\n    toDateLabel: string;\r\n    fromDateLabel: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 52
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IListType",
            "id": "interface-IListType-dbd57a1dc611201a04748b3769166f3ecb4c4e296a76234ec8d697e70286604e5124a7f302a4c394549600a385dcc4f43dd5cf5eeec4f4fe9c2cfa9decbc878b",
            "file": "packages/ds/angular/src/lib/jl-cl/jl-cl/IFormBase.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormGroup } from '@angular/forms';\r\nimport { COMPONENT_TYPES } from './dynamic-field.directive';\r\nimport { IValidator } from './validator';\r\nexport type ConditionCheck = (formGroup: FormGroup) => boolean;\r\nexport interface IConfig {\r\n    id: string;\r\n    type: keyof typeof COMPONENT_TYPES;\r\n    label?: string;\r\n    hint?: string;\r\n    alert?: string;\r\n    validation?: IValidator[];\r\n    help?: boolean;\r\n    hideRequiredLabel?: boolean;\r\n    hideStar?: boolean;\r\n    moreInfo?: () => void;\r\n    hidden?: ConditionCheck;\r\n    disabled?: ConditionCheck;\r\n    readonly?: ConditionCheck;\r\n    subText?: string;\r\n    noLabelMargin?: boolean;\r\n}\r\nexport interface IDateProps extends IFieldConfig {\r\n    dateOptions: {\r\n        minDate: Date;\r\n        maxDate: Date;\r\n        dateFormat: 'dd MMM YYYY' | 'MMM dd YYYY';\r\n        pickerLocale: 'GB' | 'US'; // GB uses dd-MMM-YYYY, US uses MMM-dd-YYYY\r\n    };\r\n}\r\nexport interface IListType extends IFieldConfig {\r\n    items: IListItem[];\r\n}\r\n\r\nexport interface IStaticAutocompleteConfig extends IListType {\r\n    forceKeypadOnMobile?: boolean;\r\n    numeric?: boolean;\r\n    optionSelected?: () => void;\r\n}\r\nexport interface IAddressAutocompleteProps {\r\n    cityId?: string;\r\n    postalCodeId?: string;\r\n    provinceId?: string;\r\n    unitId?: string;\r\n    poBoxId?: string;\r\n}\r\n\r\nexport interface IAddressAutocompleteType extends IFieldConfig {\r\n    addressAutocompleteParams: IAddressAutocompleteProps;\r\n}\r\nexport interface IListItem {\r\n    key: string;\r\n    value: string;\r\n}\r\n\r\nexport interface ISelectProps extends IListType {\r\n    searchProps?: {\r\n        hide?: boolean;\r\n        disable?: boolean;\r\n        prePopSearch?: string;\r\n    };\r\n}\r\n\r\nexport interface IFormConfig extends IConfig {\r\n    childConfigs: IConfig[];\r\n}\r\nexport interface IFieldConfig extends IConfig {\r\n    placeholder?: string;\r\n    defaultValue?: unknown;\r\n}\r\n\r\nexport interface IDatepickerConfig extends IConfig {\r\n    minYear: number;\r\n    maxYear: number;\r\n    childConfigs?: IConfig[];\r\n    useMaxDateAsToday?: boolean;\r\n    useMinDayAs?: number;\r\n    useMaxDayAs?: number;\r\n    useUnknownForMonthAndDay?: boolean;\r\n    ongoing?: boolean;\r\n    comparedWithId?: string;\r\n    hiddenDay?: boolean;\r\n    transformDisplay?: (value: any) => string;\r\n}\r\n\r\nexport interface IPresentationConfig {\r\n    id: string;\r\n    type: keyof typeof COMPONENT_TYPES;\r\n    hidden?: ConditionCheck;\r\n    noLabelMargin?: boolean;\r\n}\r\n\r\nexport interface IAlertConfig extends IPresentationConfig {\r\n    alertType: 'warn' | 'info' | 'error' | 'success' | 'tip';\r\n    label: string;\r\n    content?: string;\r\n    contentType?: 'single';\r\n    link?: {\r\n        url: string;\r\n        name: string;\r\n    };\r\n}\r\n\r\nexport interface ISubtitleConfig extends IPresentationConfig {\r\n    label: string;\r\n    textType: string;\r\n}\r\nexport interface IInfoBoxConfig extends IPresentationConfig {\r\n    icon: 'check_circle' | 'warning' | 'info';\r\n    heading: string;\r\n    caption: string;\r\n    link?: {\r\n        url: string;\r\n        name: string;\r\n    };\r\n}\r\n\r\nexport interface ICurrentStatusInCanadaReadOnlyConfig\r\n    extends IPresentationConfig {\r\n    statusHeading: string;\r\n    toDateLabel: string;\r\n    fromDateLabel: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IListItem[]",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "IFieldConfig"
        },
        {
            "name": "IPresentationConfig",
            "id": "interface-IPresentationConfig-dbd57a1dc611201a04748b3769166f3ecb4c4e296a76234ec8d697e70286604e5124a7f302a4c394549600a385dcc4f43dd5cf5eeec4f4fe9c2cfa9decbc878b",
            "file": "packages/ds/angular/src/lib/jl-cl/jl-cl/IFormBase.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormGroup } from '@angular/forms';\r\nimport { COMPONENT_TYPES } from './dynamic-field.directive';\r\nimport { IValidator } from './validator';\r\nexport type ConditionCheck = (formGroup: FormGroup) => boolean;\r\nexport interface IConfig {\r\n    id: string;\r\n    type: keyof typeof COMPONENT_TYPES;\r\n    label?: string;\r\n    hint?: string;\r\n    alert?: string;\r\n    validation?: IValidator[];\r\n    help?: boolean;\r\n    hideRequiredLabel?: boolean;\r\n    hideStar?: boolean;\r\n    moreInfo?: () => void;\r\n    hidden?: ConditionCheck;\r\n    disabled?: ConditionCheck;\r\n    readonly?: ConditionCheck;\r\n    subText?: string;\r\n    noLabelMargin?: boolean;\r\n}\r\nexport interface IDateProps extends IFieldConfig {\r\n    dateOptions: {\r\n        minDate: Date;\r\n        maxDate: Date;\r\n        dateFormat: 'dd MMM YYYY' | 'MMM dd YYYY';\r\n        pickerLocale: 'GB' | 'US'; // GB uses dd-MMM-YYYY, US uses MMM-dd-YYYY\r\n    };\r\n}\r\nexport interface IListType extends IFieldConfig {\r\n    items: IListItem[];\r\n}\r\n\r\nexport interface IStaticAutocompleteConfig extends IListType {\r\n    forceKeypadOnMobile?: boolean;\r\n    numeric?: boolean;\r\n    optionSelected?: () => void;\r\n}\r\nexport interface IAddressAutocompleteProps {\r\n    cityId?: string;\r\n    postalCodeId?: string;\r\n    provinceId?: string;\r\n    unitId?: string;\r\n    poBoxId?: string;\r\n}\r\n\r\nexport interface IAddressAutocompleteType extends IFieldConfig {\r\n    addressAutocompleteParams: IAddressAutocompleteProps;\r\n}\r\nexport interface IListItem {\r\n    key: string;\r\n    value: string;\r\n}\r\n\r\nexport interface ISelectProps extends IListType {\r\n    searchProps?: {\r\n        hide?: boolean;\r\n        disable?: boolean;\r\n        prePopSearch?: string;\r\n    };\r\n}\r\n\r\nexport interface IFormConfig extends IConfig {\r\n    childConfigs: IConfig[];\r\n}\r\nexport interface IFieldConfig extends IConfig {\r\n    placeholder?: string;\r\n    defaultValue?: unknown;\r\n}\r\n\r\nexport interface IDatepickerConfig extends IConfig {\r\n    minYear: number;\r\n    maxYear: number;\r\n    childConfigs?: IConfig[];\r\n    useMaxDateAsToday?: boolean;\r\n    useMinDayAs?: number;\r\n    useMaxDayAs?: number;\r\n    useUnknownForMonthAndDay?: boolean;\r\n    ongoing?: boolean;\r\n    comparedWithId?: string;\r\n    hiddenDay?: boolean;\r\n    transformDisplay?: (value: any) => string;\r\n}\r\n\r\nexport interface IPresentationConfig {\r\n    id: string;\r\n    type: keyof typeof COMPONENT_TYPES;\r\n    hidden?: ConditionCheck;\r\n    noLabelMargin?: boolean;\r\n}\r\n\r\nexport interface IAlertConfig extends IPresentationConfig {\r\n    alertType: 'warn' | 'info' | 'error' | 'success' | 'tip';\r\n    label: string;\r\n    content?: string;\r\n    contentType?: 'single';\r\n    link?: {\r\n        url: string;\r\n        name: string;\r\n    };\r\n}\r\n\r\nexport interface ISubtitleConfig extends IPresentationConfig {\r\n    label: string;\r\n    textType: string;\r\n}\r\nexport interface IInfoBoxConfig extends IPresentationConfig {\r\n    icon: 'check_circle' | 'warning' | 'info';\r\n    heading: string;\r\n    caption: string;\r\n    link?: {\r\n        url: string;\r\n        name: string;\r\n    };\r\n}\r\n\r\nexport interface ICurrentStatusInCanadaReadOnlyConfig\r\n    extends IPresentationConfig {\r\n    statusHeading: string;\r\n    toDateLabel: string;\r\n    fromDateLabel: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "hidden",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ConditionCheck",
                    "optional": true,
                    "description": "",
                    "line": 88
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 86
                },
                {
                    "name": "noLabelMargin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 89
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 87
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ISelectProps",
            "id": "interface-ISelectProps-dbd57a1dc611201a04748b3769166f3ecb4c4e296a76234ec8d697e70286604e5124a7f302a4c394549600a385dcc4f43dd5cf5eeec4f4fe9c2cfa9decbc878b",
            "file": "packages/ds/angular/src/lib/jl-cl/jl-cl/IFormBase.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormGroup } from '@angular/forms';\r\nimport { COMPONENT_TYPES } from './dynamic-field.directive';\r\nimport { IValidator } from './validator';\r\nexport type ConditionCheck = (formGroup: FormGroup) => boolean;\r\nexport interface IConfig {\r\n    id: string;\r\n    type: keyof typeof COMPONENT_TYPES;\r\n    label?: string;\r\n    hint?: string;\r\n    alert?: string;\r\n    validation?: IValidator[];\r\n    help?: boolean;\r\n    hideRequiredLabel?: boolean;\r\n    hideStar?: boolean;\r\n    moreInfo?: () => void;\r\n    hidden?: ConditionCheck;\r\n    disabled?: ConditionCheck;\r\n    readonly?: ConditionCheck;\r\n    subText?: string;\r\n    noLabelMargin?: boolean;\r\n}\r\nexport interface IDateProps extends IFieldConfig {\r\n    dateOptions: {\r\n        minDate: Date;\r\n        maxDate: Date;\r\n        dateFormat: 'dd MMM YYYY' | 'MMM dd YYYY';\r\n        pickerLocale: 'GB' | 'US'; // GB uses dd-MMM-YYYY, US uses MMM-dd-YYYY\r\n    };\r\n}\r\nexport interface IListType extends IFieldConfig {\r\n    items: IListItem[];\r\n}\r\n\r\nexport interface IStaticAutocompleteConfig extends IListType {\r\n    forceKeypadOnMobile?: boolean;\r\n    numeric?: boolean;\r\n    optionSelected?: () => void;\r\n}\r\nexport interface IAddressAutocompleteProps {\r\n    cityId?: string;\r\n    postalCodeId?: string;\r\n    provinceId?: string;\r\n    unitId?: string;\r\n    poBoxId?: string;\r\n}\r\n\r\nexport interface IAddressAutocompleteType extends IFieldConfig {\r\n    addressAutocompleteParams: IAddressAutocompleteProps;\r\n}\r\nexport interface IListItem {\r\n    key: string;\r\n    value: string;\r\n}\r\n\r\nexport interface ISelectProps extends IListType {\r\n    searchProps?: {\r\n        hide?: boolean;\r\n        disable?: boolean;\r\n        prePopSearch?: string;\r\n    };\r\n}\r\n\r\nexport interface IFormConfig extends IConfig {\r\n    childConfigs: IConfig[];\r\n}\r\nexport interface IFieldConfig extends IConfig {\r\n    placeholder?: string;\r\n    defaultValue?: unknown;\r\n}\r\n\r\nexport interface IDatepickerConfig extends IConfig {\r\n    minYear: number;\r\n    maxYear: number;\r\n    childConfigs?: IConfig[];\r\n    useMaxDateAsToday?: boolean;\r\n    useMinDayAs?: number;\r\n    useMaxDayAs?: number;\r\n    useUnknownForMonthAndDay?: boolean;\r\n    ongoing?: boolean;\r\n    comparedWithId?: string;\r\n    hiddenDay?: boolean;\r\n    transformDisplay?: (value: any) => string;\r\n}\r\n\r\nexport interface IPresentationConfig {\r\n    id: string;\r\n    type: keyof typeof COMPONENT_TYPES;\r\n    hidden?: ConditionCheck;\r\n    noLabelMargin?: boolean;\r\n}\r\n\r\nexport interface IAlertConfig extends IPresentationConfig {\r\n    alertType: 'warn' | 'info' | 'error' | 'success' | 'tip';\r\n    label: string;\r\n    content?: string;\r\n    contentType?: 'single';\r\n    link?: {\r\n        url: string;\r\n        name: string;\r\n    };\r\n}\r\n\r\nexport interface ISubtitleConfig extends IPresentationConfig {\r\n    label: string;\r\n    textType: string;\r\n}\r\nexport interface IInfoBoxConfig extends IPresentationConfig {\r\n    icon: 'check_circle' | 'warning' | 'info';\r\n    heading: string;\r\n    caption: string;\r\n    link?: {\r\n        url: string;\r\n        name: string;\r\n    };\r\n}\r\n\r\nexport interface ICurrentStatusInCanadaReadOnlyConfig\r\n    extends IPresentationConfig {\r\n    statusHeading: string;\r\n    toDateLabel: string;\r\n    fromDateLabel: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "searchProps",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 56
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "IListType"
        },
        {
            "name": "IStaticAutocompleteConfig",
            "id": "interface-IStaticAutocompleteConfig-dbd57a1dc611201a04748b3769166f3ecb4c4e296a76234ec8d697e70286604e5124a7f302a4c394549600a385dcc4f43dd5cf5eeec4f4fe9c2cfa9decbc878b",
            "file": "packages/ds/angular/src/lib/jl-cl/jl-cl/IFormBase.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormGroup } from '@angular/forms';\r\nimport { COMPONENT_TYPES } from './dynamic-field.directive';\r\nimport { IValidator } from './validator';\r\nexport type ConditionCheck = (formGroup: FormGroup) => boolean;\r\nexport interface IConfig {\r\n    id: string;\r\n    type: keyof typeof COMPONENT_TYPES;\r\n    label?: string;\r\n    hint?: string;\r\n    alert?: string;\r\n    validation?: IValidator[];\r\n    help?: boolean;\r\n    hideRequiredLabel?: boolean;\r\n    hideStar?: boolean;\r\n    moreInfo?: () => void;\r\n    hidden?: ConditionCheck;\r\n    disabled?: ConditionCheck;\r\n    readonly?: ConditionCheck;\r\n    subText?: string;\r\n    noLabelMargin?: boolean;\r\n}\r\nexport interface IDateProps extends IFieldConfig {\r\n    dateOptions: {\r\n        minDate: Date;\r\n        maxDate: Date;\r\n        dateFormat: 'dd MMM YYYY' | 'MMM dd YYYY';\r\n        pickerLocale: 'GB' | 'US'; // GB uses dd-MMM-YYYY, US uses MMM-dd-YYYY\r\n    };\r\n}\r\nexport interface IListType extends IFieldConfig {\r\n    items: IListItem[];\r\n}\r\n\r\nexport interface IStaticAutocompleteConfig extends IListType {\r\n    forceKeypadOnMobile?: boolean;\r\n    numeric?: boolean;\r\n    optionSelected?: () => void;\r\n}\r\nexport interface IAddressAutocompleteProps {\r\n    cityId?: string;\r\n    postalCodeId?: string;\r\n    provinceId?: string;\r\n    unitId?: string;\r\n    poBoxId?: string;\r\n}\r\n\r\nexport interface IAddressAutocompleteType extends IFieldConfig {\r\n    addressAutocompleteParams: IAddressAutocompleteProps;\r\n}\r\nexport interface IListItem {\r\n    key: string;\r\n    value: string;\r\n}\r\n\r\nexport interface ISelectProps extends IListType {\r\n    searchProps?: {\r\n        hide?: boolean;\r\n        disable?: boolean;\r\n        prePopSearch?: string;\r\n    };\r\n}\r\n\r\nexport interface IFormConfig extends IConfig {\r\n    childConfigs: IConfig[];\r\n}\r\nexport interface IFieldConfig extends IConfig {\r\n    placeholder?: string;\r\n    defaultValue?: unknown;\r\n}\r\n\r\nexport interface IDatepickerConfig extends IConfig {\r\n    minYear: number;\r\n    maxYear: number;\r\n    childConfigs?: IConfig[];\r\n    useMaxDateAsToday?: boolean;\r\n    useMinDayAs?: number;\r\n    useMaxDayAs?: number;\r\n    useUnknownForMonthAndDay?: boolean;\r\n    ongoing?: boolean;\r\n    comparedWithId?: string;\r\n    hiddenDay?: boolean;\r\n    transformDisplay?: (value: any) => string;\r\n}\r\n\r\nexport interface IPresentationConfig {\r\n    id: string;\r\n    type: keyof typeof COMPONENT_TYPES;\r\n    hidden?: ConditionCheck;\r\n    noLabelMargin?: boolean;\r\n}\r\n\r\nexport interface IAlertConfig extends IPresentationConfig {\r\n    alertType: 'warn' | 'info' | 'error' | 'success' | 'tip';\r\n    label: string;\r\n    content?: string;\r\n    contentType?: 'single';\r\n    link?: {\r\n        url: string;\r\n        name: string;\r\n    };\r\n}\r\n\r\nexport interface ISubtitleConfig extends IPresentationConfig {\r\n    label: string;\r\n    textType: string;\r\n}\r\nexport interface IInfoBoxConfig extends IPresentationConfig {\r\n    icon: 'check_circle' | 'warning' | 'info';\r\n    heading: string;\r\n    caption: string;\r\n    link?: {\r\n        url: string;\r\n        name: string;\r\n    };\r\n}\r\n\r\nexport interface ICurrentStatusInCanadaReadOnlyConfig\r\n    extends IPresentationConfig {\r\n    statusHeading: string;\r\n    toDateLabel: string;\r\n    fromDateLabel: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "forceKeypadOnMobile",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "numeric",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "optionSelected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 37
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "IListType"
        },
        {
            "name": "ISubtitleConfig",
            "id": "interface-ISubtitleConfig-dbd57a1dc611201a04748b3769166f3ecb4c4e296a76234ec8d697e70286604e5124a7f302a4c394549600a385dcc4f43dd5cf5eeec4f4fe9c2cfa9decbc878b",
            "file": "packages/ds/angular/src/lib/jl-cl/jl-cl/IFormBase.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormGroup } from '@angular/forms';\r\nimport { COMPONENT_TYPES } from './dynamic-field.directive';\r\nimport { IValidator } from './validator';\r\nexport type ConditionCheck = (formGroup: FormGroup) => boolean;\r\nexport interface IConfig {\r\n    id: string;\r\n    type: keyof typeof COMPONENT_TYPES;\r\n    label?: string;\r\n    hint?: string;\r\n    alert?: string;\r\n    validation?: IValidator[];\r\n    help?: boolean;\r\n    hideRequiredLabel?: boolean;\r\n    hideStar?: boolean;\r\n    moreInfo?: () => void;\r\n    hidden?: ConditionCheck;\r\n    disabled?: ConditionCheck;\r\n    readonly?: ConditionCheck;\r\n    subText?: string;\r\n    noLabelMargin?: boolean;\r\n}\r\nexport interface IDateProps extends IFieldConfig {\r\n    dateOptions: {\r\n        minDate: Date;\r\n        maxDate: Date;\r\n        dateFormat: 'dd MMM YYYY' | 'MMM dd YYYY';\r\n        pickerLocale: 'GB' | 'US'; // GB uses dd-MMM-YYYY, US uses MMM-dd-YYYY\r\n    };\r\n}\r\nexport interface IListType extends IFieldConfig {\r\n    items: IListItem[];\r\n}\r\n\r\nexport interface IStaticAutocompleteConfig extends IListType {\r\n    forceKeypadOnMobile?: boolean;\r\n    numeric?: boolean;\r\n    optionSelected?: () => void;\r\n}\r\nexport interface IAddressAutocompleteProps {\r\n    cityId?: string;\r\n    postalCodeId?: string;\r\n    provinceId?: string;\r\n    unitId?: string;\r\n    poBoxId?: string;\r\n}\r\n\r\nexport interface IAddressAutocompleteType extends IFieldConfig {\r\n    addressAutocompleteParams: IAddressAutocompleteProps;\r\n}\r\nexport interface IListItem {\r\n    key: string;\r\n    value: string;\r\n}\r\n\r\nexport interface ISelectProps extends IListType {\r\n    searchProps?: {\r\n        hide?: boolean;\r\n        disable?: boolean;\r\n        prePopSearch?: string;\r\n    };\r\n}\r\n\r\nexport interface IFormConfig extends IConfig {\r\n    childConfigs: IConfig[];\r\n}\r\nexport interface IFieldConfig extends IConfig {\r\n    placeholder?: string;\r\n    defaultValue?: unknown;\r\n}\r\n\r\nexport interface IDatepickerConfig extends IConfig {\r\n    minYear: number;\r\n    maxYear: number;\r\n    childConfigs?: IConfig[];\r\n    useMaxDateAsToday?: boolean;\r\n    useMinDayAs?: number;\r\n    useMaxDayAs?: number;\r\n    useUnknownForMonthAndDay?: boolean;\r\n    ongoing?: boolean;\r\n    comparedWithId?: string;\r\n    hiddenDay?: boolean;\r\n    transformDisplay?: (value: any) => string;\r\n}\r\n\r\nexport interface IPresentationConfig {\r\n    id: string;\r\n    type: keyof typeof COMPONENT_TYPES;\r\n    hidden?: ConditionCheck;\r\n    noLabelMargin?: boolean;\r\n}\r\n\r\nexport interface IAlertConfig extends IPresentationConfig {\r\n    alertType: 'warn' | 'info' | 'error' | 'success' | 'tip';\r\n    label: string;\r\n    content?: string;\r\n    contentType?: 'single';\r\n    link?: {\r\n        url: string;\r\n        name: string;\r\n    };\r\n}\r\n\r\nexport interface ISubtitleConfig extends IPresentationConfig {\r\n    label: string;\r\n    textType: string;\r\n}\r\nexport interface IInfoBoxConfig extends IPresentationConfig {\r\n    icon: 'check_circle' | 'warning' | 'info';\r\n    heading: string;\r\n    caption: string;\r\n    link?: {\r\n        url: string;\r\n        name: string;\r\n    };\r\n}\r\n\r\nexport interface ICurrentStatusInCanadaReadOnlyConfig\r\n    extends IPresentationConfig {\r\n    statusHeading: string;\r\n    toDateLabel: string;\r\n    fromDateLabel: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 104
                },
                {
                    "name": "textType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 105
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "IPresentationConfig"
        },
        {
            "name": "ITableColumnConfig",
            "id": "interface-ITableColumnConfig-a95bf88aa4c19ac7898c7b9ac61dac5ff6d5b89f31eaeca6bbe8885c3bf281c1b89fdbfec92bd12e13001c3551a22b77498146b9c8d80d3249c9a5cc980d21f3",
            "file": "packages/ds/angular/src/lib/jl-cl/jl-cl/ITableBase.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormGroup } from '@angular/forms';\r\nimport {\r\n    IConfig,\r\n    IDatepickerConfig,\r\n    IFormConfig,\r\n    IListType,\r\n} from './IFormBase';\r\n\r\nexport type ConditionCheck = (formGroup: FormGroup) => string;\r\n\r\nexport interface ITableConfig extends IFormConfig {\r\n    addButtonLabel: string;\r\n    childConfigs: ITableColumnConfig[];\r\n    sort?: {\r\n        columnName?: string;\r\n        customized?: (value: any) => Array<any>;\r\n    };\r\n    columnOrder?: string[];\r\n    mobileView?: {\r\n        oneLineFromToDateIDs?: string[];\r\n        titleTransformDisplay?: (value: any) => string;\r\n        columnOrder: string[];\r\n    };\r\n    modal: {\r\n        submit: {\r\n            titleLabel: string;\r\n            submitLabel: string;\r\n        };\r\n        edit: {\r\n            titleLabel: string;\r\n        };\r\n        delete: {\r\n            titleLabel: string;\r\n            contentLabel: string;\r\n            deleteLabel: string;\r\n            deleteContentVariable: ConditionCheck;\r\n        };\r\n    };\r\n}\r\nexport interface ITableTransformDisplayOptions {\r\n    isMobileView?: boolean;\r\n    rowValues?: any;\r\n}\r\nexport interface ITableColumnConfig\r\n    extends IConfig,\r\n        IListType,\r\n        IDatepickerConfig {\r\n    unique?: {\r\n        watchValue: string;\r\n        resetValue: string;\r\n    };\r\n    columnHeader: string;\r\n    transformDisplay?: (\r\n        value: string,\r\n        options?: ITableTransformDisplayOptions\r\n    ) => string;\r\n}\r\n",
            "properties": [
                {
                    "name": "columnHeader",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "transformDisplay",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "unique",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 48
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "IConfig"
        },
        {
            "name": "ITableConfig",
            "id": "interface-ITableConfig-a95bf88aa4c19ac7898c7b9ac61dac5ff6d5b89f31eaeca6bbe8885c3bf281c1b89fdbfec92bd12e13001c3551a22b77498146b9c8d80d3249c9a5cc980d21f3",
            "file": "packages/ds/angular/src/lib/jl-cl/jl-cl/ITableBase.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormGroup } from '@angular/forms';\r\nimport {\r\n    IConfig,\r\n    IDatepickerConfig,\r\n    IFormConfig,\r\n    IListType,\r\n} from './IFormBase';\r\n\r\nexport type ConditionCheck = (formGroup: FormGroup) => string;\r\n\r\nexport interface ITableConfig extends IFormConfig {\r\n    addButtonLabel: string;\r\n    childConfigs: ITableColumnConfig[];\r\n    sort?: {\r\n        columnName?: string;\r\n        customized?: (value: any) => Array<any>;\r\n    };\r\n    columnOrder?: string[];\r\n    mobileView?: {\r\n        oneLineFromToDateIDs?: string[];\r\n        titleTransformDisplay?: (value: any) => string;\r\n        columnOrder: string[];\r\n    };\r\n    modal: {\r\n        submit: {\r\n            titleLabel: string;\r\n            submitLabel: string;\r\n        };\r\n        edit: {\r\n            titleLabel: string;\r\n        };\r\n        delete: {\r\n            titleLabel: string;\r\n            contentLabel: string;\r\n            deleteLabel: string;\r\n            deleteContentVariable: ConditionCheck;\r\n        };\r\n    };\r\n}\r\nexport interface ITableTransformDisplayOptions {\r\n    isMobileView?: boolean;\r\n    rowValues?: any;\r\n}\r\nexport interface ITableColumnConfig\r\n    extends IConfig,\r\n        IListType,\r\n        IDatepickerConfig {\r\n    unique?: {\r\n        watchValue: string;\r\n        resetValue: string;\r\n    };\r\n    columnHeader: string;\r\n    transformDisplay?: (\r\n        value: string,\r\n        options?: ITableTransformDisplayOptions\r\n    ) => string;\r\n}\r\n",
            "properties": [
                {
                    "name": "addButtonLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "childConfigs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ITableColumnConfig[]",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "columnOrder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "mobileView",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "modal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "sort",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "IFormConfig"
        },
        {
            "name": "ITableTransformDisplayOptions",
            "id": "interface-ITableTransformDisplayOptions-a95bf88aa4c19ac7898c7b9ac61dac5ff6d5b89f31eaeca6bbe8885c3bf281c1b89fdbfec92bd12e13001c3551a22b77498146b9c8d80d3249c9a5cc980d21f3",
            "file": "packages/ds/angular/src/lib/jl-cl/jl-cl/ITableBase.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormGroup } from '@angular/forms';\r\nimport {\r\n    IConfig,\r\n    IDatepickerConfig,\r\n    IFormConfig,\r\n    IListType,\r\n} from './IFormBase';\r\n\r\nexport type ConditionCheck = (formGroup: FormGroup) => string;\r\n\r\nexport interface ITableConfig extends IFormConfig {\r\n    addButtonLabel: string;\r\n    childConfigs: ITableColumnConfig[];\r\n    sort?: {\r\n        columnName?: string;\r\n        customized?: (value: any) => Array<any>;\r\n    };\r\n    columnOrder?: string[];\r\n    mobileView?: {\r\n        oneLineFromToDateIDs?: string[];\r\n        titleTransformDisplay?: (value: any) => string;\r\n        columnOrder: string[];\r\n    };\r\n    modal: {\r\n        submit: {\r\n            titleLabel: string;\r\n            submitLabel: string;\r\n        };\r\n        edit: {\r\n            titleLabel: string;\r\n        };\r\n        delete: {\r\n            titleLabel: string;\r\n            contentLabel: string;\r\n            deleteLabel: string;\r\n            deleteContentVariable: ConditionCheck;\r\n        };\r\n    };\r\n}\r\nexport interface ITableTransformDisplayOptions {\r\n    isMobileView?: boolean;\r\n    rowValues?: any;\r\n}\r\nexport interface ITableColumnConfig\r\n    extends IConfig,\r\n        IListType,\r\n        IDatepickerConfig {\r\n    unique?: {\r\n        watchValue: string;\r\n        resetValue: string;\r\n    };\r\n    columnHeader: string;\r\n    transformDisplay?: (\r\n        value: string,\r\n        options?: ITableTransformDisplayOptions\r\n    ) => string;\r\n}\r\n",
            "properties": [
                {
                    "name": "isMobileView",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "rowValues",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 42
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IValidator",
            "id": "interface-IValidator-dc96d3dcbdcf9b029dc966fb244fa617ce3027661e3daeab2d9129009883f35b00124b550c4307be8ce3653ced326542f8cef6d149536d1e25469fe028301a58",
            "file": "packages/ds/angular/src/lib/jl-cl/jl-cl/validator.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ValidatorFn, Validators } from '@angular/forms';\r\nimport { IListItem } from './IFormBase';\r\nimport {\r\n    maxDateValidator,\r\n    minDateValidator,\r\n} from './validator-functions/date-validator';\r\nimport {\r\n    allowedPatternValidator,\r\n    listValidator,\r\n    validatePrimaryNumber,\r\n    validateTable,\r\n} from './validator-functions/simple-validators';\r\nimport { ErrorNames } from './validator-types';\r\nexport interface IValidator {\r\n    errorName: ErrorNames;\r\n    validator: ValidatorFn;\r\n    errorMsg: string;\r\n}\r\n\r\nexport interface IValidatorModel {\r\n    [validatorName: string]: IValidator;\r\n}\r\nexport interface IDynamicValidatorModel {\r\n    [validatorName: string]: (data: any) => IValidator;\r\n}\r\n\r\nexport const VALIDATORS: IValidatorModel = {\r\n    required: {\r\n        errorName: ErrorNames.required,\r\n        validator: Validators.required,\r\n        errorMsg: 'ErrorMessage.required',\r\n    },\r\n};\r\n\r\nexport const VALIDATOR_TABLE_REQUIRED = {\r\n    tableRequire: {\r\n        errorName: ErrorNames.required,\r\n        validator: validateTable,\r\n        errorMsg: 'ErrorMessage.required',\r\n    },\r\n};\r\n\r\nexport const VALIDATOR_TABLE_PRIMARY_NUMBER = {\r\n    primaryNumberRequire: {\r\n        errorName: ErrorNames.primaryNumberRequired,\r\n        validator: validatePrimaryNumber,\r\n        errorMsg: 'ErrorMessage.primaryNumberRequired',\r\n    },\r\n};\r\n\r\nexport const VALIDATORS_DYNAMIC: IDynamicValidatorModel = {\r\n    minDate: (date: Date) =>\r\n        ({\r\n            errorMsg: 'Date is below minimum',\r\n            errorName: ErrorNames.minDate,\r\n            validator: minDateValidator(date),\r\n        } as IValidator),\r\n    maxDate: (date: Date) =>\r\n        ({\r\n            errorMsg: 'Date is above maximum',\r\n            errorName: ErrorNames.maxDate,\r\n            validator: maxDateValidator(date),\r\n        } as IValidator),\r\n    minLength: (minimum: number) => ({\r\n        errorMsg: 'ErrorMessage.MinLength',\r\n        errorName: ErrorNames.minLength,\r\n        validator: Validators.minLength(minimum),\r\n    }),\r\n    maxLength: (maximum: number) => ({\r\n        errorMsg: 'ErrorMessage.MaxLength',\r\n        errorName: ErrorNames.maxLength,\r\n        validator: Validators.maxLength(maximum),\r\n    }),\r\n    allowedPattern: (regex: RegExp) => ({\r\n        errorMsg: 'ErrorMessage.DisallowedCharacter',\r\n        errorName: ErrorNames.disallowed,\r\n        validator: allowedPatternValidator(regex),\r\n    }),\r\n    autocompleteList: (items: IListItem[]) => ({\r\n        errorMsg: 'ErrorMessage.invalid',\r\n        errorName: ErrorNames.invalid,\r\n        validator: listValidator(items),\r\n    }),\r\n    maxCurrencyLength: (maximum: number) => ({\r\n        errorMsg: 'Must contain only numbers, between 0 and 999,999,999', //Text doesn't exist in translation, will update once added\r\n        errorName: ErrorNames.maxLength,\r\n        validator: Validators.maxLength(maximum),\r\n    }),\r\n};\r\n",
            "properties": [
                {
                    "name": "errorMsg",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "errorName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ErrorNames",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "validator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ValidatorFn",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IValidatorModel",
            "id": "interface-IValidatorModel-dc96d3dcbdcf9b029dc966fb244fa617ce3027661e3daeab2d9129009883f35b00124b550c4307be8ce3653ced326542f8cef6d149536d1e25469fe028301a58",
            "file": "packages/ds/angular/src/lib/jl-cl/jl-cl/validator.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ValidatorFn, Validators } from '@angular/forms';\r\nimport { IListItem } from './IFormBase';\r\nimport {\r\n    maxDateValidator,\r\n    minDateValidator,\r\n} from './validator-functions/date-validator';\r\nimport {\r\n    allowedPatternValidator,\r\n    listValidator,\r\n    validatePrimaryNumber,\r\n    validateTable,\r\n} from './validator-functions/simple-validators';\r\nimport { ErrorNames } from './validator-types';\r\nexport interface IValidator {\r\n    errorName: ErrorNames;\r\n    validator: ValidatorFn;\r\n    errorMsg: string;\r\n}\r\n\r\nexport interface IValidatorModel {\r\n    [validatorName: string]: IValidator;\r\n}\r\nexport interface IDynamicValidatorModel {\r\n    [validatorName: string]: (data: any) => IValidator;\r\n}\r\n\r\nexport const VALIDATORS: IValidatorModel = {\r\n    required: {\r\n        errorName: ErrorNames.required,\r\n        validator: Validators.required,\r\n        errorMsg: 'ErrorMessage.required',\r\n    },\r\n};\r\n\r\nexport const VALIDATOR_TABLE_REQUIRED = {\r\n    tableRequire: {\r\n        errorName: ErrorNames.required,\r\n        validator: validateTable,\r\n        errorMsg: 'ErrorMessage.required',\r\n    },\r\n};\r\n\r\nexport const VALIDATOR_TABLE_PRIMARY_NUMBER = {\r\n    primaryNumberRequire: {\r\n        errorName: ErrorNames.primaryNumberRequired,\r\n        validator: validatePrimaryNumber,\r\n        errorMsg: 'ErrorMessage.primaryNumberRequired',\r\n    },\r\n};\r\n\r\nexport const VALIDATORS_DYNAMIC: IDynamicValidatorModel = {\r\n    minDate: (date: Date) =>\r\n        ({\r\n            errorMsg: 'Date is below minimum',\r\n            errorName: ErrorNames.minDate,\r\n            validator: minDateValidator(date),\r\n        } as IValidator),\r\n    maxDate: (date: Date) =>\r\n        ({\r\n            errorMsg: 'Date is above maximum',\r\n            errorName: ErrorNames.maxDate,\r\n            validator: maxDateValidator(date),\r\n        } as IValidator),\r\n    minLength: (minimum: number) => ({\r\n        errorMsg: 'ErrorMessage.MinLength',\r\n        errorName: ErrorNames.minLength,\r\n        validator: Validators.minLength(minimum),\r\n    }),\r\n    maxLength: (maximum: number) => ({\r\n        errorMsg: 'ErrorMessage.MaxLength',\r\n        errorName: ErrorNames.maxLength,\r\n        validator: Validators.maxLength(maximum),\r\n    }),\r\n    allowedPattern: (regex: RegExp) => ({\r\n        errorMsg: 'ErrorMessage.DisallowedCharacter',\r\n        errorName: ErrorNames.disallowed,\r\n        validator: allowedPatternValidator(regex),\r\n    }),\r\n    autocompleteList: (items: IListItem[]) => ({\r\n        errorMsg: 'ErrorMessage.invalid',\r\n        errorName: ErrorNames.invalid,\r\n        validator: listValidator(items),\r\n    }),\r\n    maxCurrencyLength: (maximum: number) => ({\r\n        errorMsg: 'Must contain only numbers, between 0 and 999,999,999', //Text doesn't exist in translation, will update once added\r\n        errorName: ErrorNames.maxLength,\r\n        validator: Validators.maxLength(maximum),\r\n    }),\r\n};\r\n",
            "properties": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-dc96d3dcbdcf9b029dc966fb244fa617ce3027661e3daeab2d9129009883f35b00124b550c4307be8ce3653ced326542f8cef6d149536d1e25469fe028301a58",
                    "args": [
                        {
                            "name": "validatorName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "IValidator",
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 175,
            "methods": []
        },
        {
            "name": "User",
            "id": "interface-User-dcc5c3137cd472dd0002d85b562efd23162e3eff53ca4438a6251e6c46e3b8299076255380d1d42f386510cb6f2cbaab49fa5b5f253be459cdc3869428c5c400",
            "file": "stories/User.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {}\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "AngularService",
            "id": "injectable-AngularService-4fcb26090d0464514aaa2600a3e8c5b027323f0b75cda40ac3071929c0c8c3d885edef5a13b20fbf5f38e21b445e2eba5385ac05b3dcf43cf79a41a287a70b73",
            "file": "packages/ds/angular/src/lib/angular.service.ts",
            "properties": [],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AngularService {\r\n\r\n  constructor() { }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 6
            },
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [
        {
            "name": "DynamicFieldDirective",
            "id": "directive-DynamicFieldDirective-d6288294a0dbac57dfd1d82e6fbbf007d0d355a5c08a2c6f1a8a8c2531f804cf126301587f629a95ade2dcffa6b942b6869d00d7b66725cc92205061e64a2430",
            "file": "packages/ds/angular/src/lib/jl-cl/jl-cl/dynamic-field.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\r\n    ComponentFactoryResolver,\r\n    ComponentRef,\r\n    Directive,\r\n    Input,\r\n    OnChanges,\r\n    OnInit,\r\n    SimpleChanges,\r\n    ViewContainerRef,\r\n} from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { DynFormBaseComponent } from './form-base/form-base';\r\nimport { IConfig } from './IFormBase';\r\nimport { DynFormAlertComponent } from './jl-form-alert/jl-form-alert.component';\r\nimport { DynCheckboxComponent } from './jl-form-checkbox/jl-form-checkbox.component';\r\nimport { DynDropDownComponent } from './jl-form-dropdown/jl-form-dropdown.component';\r\nimport { DynFormLabelComponent } from './jl-form-label/jl-form-label.component';\r\nimport { DynRadioComponent } from './jl-form-radio/jl-form-radio.component';\r\nimport { DynTextFieldComponent } from './jl-form-textfield/jl-form-textfield.component';\r\n\r\n@Directive({\r\n    selector: '[jlclField]',\r\n})\r\nexport class DynamicFieldDirective implements OnInit, OnChanges {\r\n    @Input()\r\n    config!: IConfig;\r\n    @Input()\r\n    group!: FormGroup;\r\n    @Input()\r\n    disabled = false;\r\n    component: ComponentRef<IField> | undefined;\r\n\r\n    constructor(\r\n        private resolver: ComponentFactoryResolver,\r\n        private container: ViewContainerRef\r\n    ) {}\r\n\r\n    ngOnInit(): void {\r\n        const factory = this.resolver.resolveComponentFactory<IField>(\r\n            COMPONENT_TYPES[this.config.type]\r\n        );\r\n        this.component = this.container.createComponent(factory);\r\n        this.component.instance.group = this.group;\r\n        this.component.instance.config = this.config;\r\n        this.component.instance.disabled = this.disabled;\r\n    }\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        if (this.component) {\r\n            this.component.instance.disabled = this.disabled;\r\n\r\n            if (this.component.instance.ngOnChanges) {\r\n                this.component.instance.ngOnChanges(changes);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport interface IField {\r\n    group: FormGroup;\r\n    config: IConfig;\r\n    disabled: boolean;\r\n    ngOnChanges?: (changes: SimpleChanges) => void;\r\n}\r\n\r\nexport const COMPONENT_TYPES = {\r\n    alertBox: DynFormAlertComponent,\r\n    input: DynTextFieldComponent,\r\n    label: DynFormLabelComponent,\r\n    form: DynFormBaseComponent,\r\n    checkbox: DynCheckboxComponent,\r\n    radio: DynRadioComponent,\r\n    dropdown: DynDropDownComponent,\r\n};\r\n",
            "selector": "[jlclField]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "IConfig",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "group",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "FormGroup",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "component",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ComponentRef<IField> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "container",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "container",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        }
    ],
    "components": [
        {
            "name": "AngularComponent",
            "id": "component-AngularComponent-b3cb79d12d35b4c6e34925c6261ec4bcb0935f19ee5d1b93e58f59ea3cc6c169503514407dcbf666870d05d23ee8c4f1bd156c5cfcc798ceb60a3525915d6c04",
            "file": "packages/ds/angular/src/lib/angular.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-angular",
            "styleUrls": [],
            "styles": [],
            "template": "<p>\n  angular works!\n</p>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'lib-angular',\r\n  template: `\r\n    <p>\r\n      angular works!\r\n    </p>\r\n  `,\r\n  styles: [\r\n  ]\r\n})\r\nexport class AngularComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 13
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-2ad63e6b5b1632240025a741cc03f3a5d069afd667ecf75cfbe131c007e14bf4c3f35db7cb1b71dc1ae5b793bf9f89517bb31a0b91e6cf1bb228b3a3cc4651ee",
            "file": "sample/src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "config",
                    "defaultValue": "{\r\n    id: 'firstName',\r\n    type: 'input',\r\n    label: 'test label',\r\n    hint: 'test test',\r\n    placeholder: '',\r\n  } as IFieldConfig",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "title",
                    "defaultValue": "'sample'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { IFieldConfig } from 'packages/ds/angular/src/lib/jl-cl/jl-cl/IFormBase';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss'],\r\n})\r\nexport class AppComponent {\r\n  title = 'sample';\r\n\r\n  config = {\r\n    id: 'firstName',\r\n    type: 'input',\r\n    label: 'test label',\r\n    hint: 'test test',\r\n    placeholder: '',\r\n  } as IFieldConfig;\r\n\r\n  constructor(private translate: TranslateService) {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use \"~@ircc-ca/ds-sdc-core/layout/layout-grid\" as layouts;\r\n@use \"~@ircc-ca/ds-sdc-core/typography/typography\";\r\n.sidenav {\r\n    grid-column: first / span 1;\r\n    background-color: orange;\r\n    height: 100%;\r\n    > * {\r\n        grid-column: auto / span 1;\r\n    }\r\n}\r\n.sidenav2 {\r\n    grid-column: span 1 / last;\r\n    background-color: orange;\r\n}\r\n.masthead {\r\n    grid-row: 1 / 2;\r\n    grid-column: first / last;\r\n    background-color: aquamarine;\r\n}\r\n\r\n.wrapper {\r\n    @include layouts.grid(auto 1fr auto, 1fr auto);\r\n    height: 100%;\r\n}",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "\r\n  <!-- Next Steps -->\r\n  <div class=\"wrapper\">\r\n    <h1 class=\"masthead\">Test Page <a href=\"#nowhere\">asdasd</a></h1>\r\n    <div class=\"sidenav panel-1-column\" hidden=\"true\">\r\n      <h2>Panel <strong>asudnasd</strong></h2>\r\n      <nav>\r\n        <ul>\r\n          <li><a href=\"#nowhere\" title=\"Lorum ipsum dolor sit amet\">Lorem</a></li>\r\n          <li><a href=\"#nowhere\" title=\"Aliquam tincidunt mauris eu risus\">Aliquam</a></li>\r\n          <li><a href=\"#nowhere\" title=\"Morbi in sem quis dui placerat ornare\">Morbi</a></li>\r\n          <li><a href=\"#nowhere\" title=\"Praesent dapibus, neque id cursus faucibus\">Praesent</a></li>\r\n          <li><a href=\"#nowhere\" title=\"Pellentesque fermentum dolor\">Pellentesque</a></li>\r\n        </ul>\r\n      </nav>\r\n    </div>\r\n    <div class=\"content-area-responsive-margins\">\r\n      <h2>Next Steps</h2>\r\n      <p>What do you want to do next with your app? <a href=\"#nothere\">What do you want to do next with your app?</a> What do\r\n        you want to do\r\n        next with your app?</p>\r\n      <p><strong>asdasdasd</strong>What do you want to do next with your app?</p>\r\n      <p>What do you want to do next with your app?</p>\r\n      <p>What do you want to do next with your app?</p>\r\n      <p>What do you want to do next with your app?</p>\r\n      <p>What do you want to do next with your app?</p>\r\n      <a href=\"www.github.com\"><span class=\"font\" aria-hidden></span> Github</a>\r\n      <input type=\"button\" value=\"<p class='font'></p><br/>Test Button\">\r\n      <jlcl-label [config]=\"config\"></jlcl-label>\r\n      <lib-header></lib-header>\r\n      <lib-header></lib-header>\r\n      <a href=\"www.github.com\">Github</a>\r\n      <button>Test Button</button>\r\n      <p>What do you want to do next with your app?</p>\r\n      <p>What do you want to do next with your app?</p>\r\n      <p>What do you want to do next with your app?</p>\r\n      <p>What do you want to do next with your app?</p>\r\n      <p>What do you want to do next with your app?</p>\r\n      <p>What do you want to do next with your app?</p>\r\n      </div>\r\n      <div class=\"sidenav2 panel-2-column\">\r\n        <h2>Panel</h2>\r\n        <nav>\r\n          <ul>\r\n            <li><a href=\"#nowhere\" title=\"Lorum ipsum dolor sit amet\">Lorem</a></li>\r\n            <li><a href=\"#nowhere\" title=\"Aliquam tincidunt mauris eu risus\">Aliquam</a></li>\r\n            <li><a href=\"#nowhere\" title=\"Morbi in sem quis dui placerat ornare\">Morbi</a></li>\r\n            <li><a href=\"#nowhere\" title=\"Praesent dapibus, neque id cursus faucibus\">Praesent</a></li>\r\n            <li><a href=\"#nowhere\" title=\"Pellentesque fermentum dolor\">Pellentesque</a></li>\r\n          </ul>\r\n        </nav>\r\n      </div>\r\n  </div>"
        },
        {
            "name": "BaseFieldComponent",
            "id": "component-BaseFieldComponent-c27c9c165b3a24180ab7bc2b38c84be6cfbed1ab8d2226388dfa36fd168e2280e797ec1a721ad72b29b6ae849b417a145c5ae93f563e96fddee1994274ed7598",
            "file": "packages/ds/angular/src/lib/jl-cl/jl-cl/jl-base-field.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "IConfig",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "group",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "FormGroup",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "localGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewChecked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n    ChangeDetectorRef,\r\n    Component,\r\n    Input,\r\n    OnDestroy,\r\n    OnInit,\r\n    SimpleChanges\r\n} from '@angular/core';\r\nimport { AbstractControl, FormControl, FormGroup } from '@angular/forms';\r\nimport { COMPONENT_TYPES, IField } from './dynamic-field.directive';\r\nimport { IConfig } from './IFormBase';\r\nimport { IValidator, VALIDATORS } from './validator';\r\n\r\n@Component({\r\n    template: ``,\r\n})\r\nexport class BaseFieldComponent implements IField, OnInit, OnDestroy {\r\n    @Input()\r\n    config!: IConfig;\r\n    @Input()\r\n    group!: FormGroup;\r\n    @Input()\r\n    disabled = false;\r\n\r\n    localGroup!: FormGroup;\r\n\r\n    public get formControl(): AbstractControl {\r\n        return this.group?.get(this.config.id) as AbstractControl;\r\n    }\r\n\r\n    public get isRequired(): boolean {\r\n        return (\r\n            this.config.validation?.find((validator: IValidator) => {\r\n                return validator === VALIDATORS['required'];\r\n            }) !== undefined\r\n        );\r\n    }\r\n    constructor(protected changeRef: ChangeDetectorRef) {}\r\n\r\n    ngOnDestroy(): void {\r\n        this.group.removeControl(this.config.id);\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        const formTypes: (keyof typeof COMPONENT_TYPES)[] = [\r\n            'form',\r\n        ];\r\n        if (formTypes.includes(this.config.type)) {\r\n            const control = new FormGroup({});\r\n            this.group.addControl(this.config.id, control);\r\n            this.localGroup = control;\r\n        } else {\r\n            this.group.addControl(this.config.id, new FormControl());\r\n            this.localGroup = this.group;\r\n        }\r\n        this.changeRef.detectChanges();\r\n    }\r\n\r\n    ngAfterViewChecked(): void {\r\n        this.changeRef.detectChanges();\r\n    }\r\n\r\n    ngAfterViewInit(): void {\r\n        if (this.disabled) {\r\n            this.formControl.disable();\r\n        }\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        if ('disabled' in changes) {\r\n            if (this.disabled) {\r\n                this.formControl.disable();\r\n            } else {\r\n                this.formControl.enable();\r\n            }\r\n        }\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "changeRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 37,
                "jsdoctags": [
                    {
                        "name": "changeRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "IField",
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "formControl": {
                    "name": "formControl",
                    "getSignature": {
                        "name": "formControl",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 27
                    }
                },
                "isRequired": {
                    "name": "isRequired",
                    "getSignature": {
                        "name": "isRequired",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 31
                    }
                }
            }
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-ad40de5de3e43c5952b4f04237a88fcd351b7f8e7120cd626c3224a61ba4b2dab29b3452591934b0b53b936907309149a745bba2fec3f342b1808da19cf54afa",
            "file": "stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<div class=\"alert\" role=\"critical\">    <strong>Title</strong>\n    <p>body text</p>\n  </div>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 22,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 662,
                            "end": 676,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 663,
                                "end": 671,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 36,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the page?\n",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 16,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 28,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 42,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'storybook-button',\r\n  template: `<div class=\"alert\" role=\"critical\">\r\n    <strong>Title</strong>\r\n    <p>body text</p>\r\n  </div>`,\r\n  styleUrls: ['./button.css'],\r\n})\r\nexport default class ButtonComponent {\r\n  /**\r\n   * Is this the principal call to action on the page?\r\n   */\r\n  @Input()\r\n  primary = false;\r\n\r\n  /**\r\n   * What background color to use\r\n   */\r\n  @Input()\r\n  backgroundColor?: string;\r\n\r\n  /**\r\n   * How large should the button be?\r\n   */\r\n  @Input()\r\n  size: 'small' | 'medium' | 'large' = 'medium';\r\n\r\n  /**\r\n   * Button contents\r\n   *\r\n   * @required\r\n   */\r\n  @Input()\r\n  label = 'Button';\r\n\r\n  /**\r\n   * Optional click handler\r\n   */\r\n  @Output()\r\n  onClick = new EventEmitter<Event>();\r\n\r\n  public get classes(): string[] {\r\n    const mode = this.primary\r\n      ? 'storybook-button--primary'\r\n      : 'storybook-button--secondary';\r\n\r\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\r\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\r\n  font-weight: 700;\r\n  border: 0;\r\n  border-radius: 3em;\r\n  cursor: pointer;\r\n  display: inline-block;\r\n  line-height: 1;\r\n}\r\n.storybook-button--primary {\r\n  color: white;\r\n  background-color: #1ea7fd;\r\n}\r\n.storybook-button--secondary {\r\n  color: #333;\r\n  background-color: transparent;\r\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\r\n}\r\n.storybook-button--small {\r\n  font-size: 12px;\r\n  padding: 10px 16px;\r\n}\r\n.storybook-button--medium {\r\n  font-size: 14px;\r\n  padding: 11px 20px;\r\n}\r\n.storybook-button--large {\r\n  font-size: 16px;\r\n  padding: 12px 24px;\r\n}\r\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 44
                    }
                }
            }
        },
        {
            "name": "DynCheckboxComponent",
            "id": "component-DynCheckboxComponent-f681efbb21a149f173fdb38fabc2d058040b3df4c493fbadefe19b09e21db6e4830dc65f62a5af271f460d86dc45ba655ab37fd226f2bbc9eccca232de358f61",
            "file": "packages/ds/angular/src/lib/jl-cl/jl-cl/jl-form-checkbox/jl-form-checkbox.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jlcl-checkbox",
            "styleUrls": [
                "./jl-form-checkbox.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./jl-form-checkbox.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "IFieldConfig",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "group",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "FormGroup",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "localGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewChecked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { IFieldConfig } from '../IFormBase';\r\nimport { BaseFieldComponent } from '../jl-base-field';\r\n\r\n@Component({\r\n    selector: 'jlcl-checkbox',\r\n    templateUrl: './jl-form-checkbox.component.html',\r\n    styleUrls: ['./jl-form-checkbox.component.scss'],\r\n})\r\nexport class DynCheckboxComponent extends BaseFieldComponent {\r\n    @Input()\r\n    override config!: IFieldConfig;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container {\r\n    display: flex;\r\n    flex-direction: row;\r\n    margin: 4px 0px;\r\n    width: 100%;\r\n}\r\n.text {\r\n    display: flex;\r\n    flex-direction: column;\r\n    margin-left: 12px;\r\n}\r\nmat-label {\r\n    font-family: 'Noto Sans', sans-serif;\r\n    font-style: normal;\r\n    font-weight: normal;\r\n    font-size: 16px;\r\n    line-height: 140%;\r\n    display: flex;\r\n    align-items: center;\r\n    margin: 0px 8px;\r\n}\r\n",
                    "styleUrl": "./jl-form-checkbox.component.scss"
                }
            ],
            "stylesData": "",
            "extends": "BaseFieldComponent",
            "templateData": "<div [formGroup]=\"group\" class=\"container\">\r\n    <mat-checkbox width=\"100%\" marginTop=\"0\" [formControlName]=\"config.id\" [attr.aria-labelledby]=\"config.id + '-lbl'\"\r\n        [attr.data-test]=\"'mat-checkbox-' + config.id\" color=\"primary\" [attr.aria-describedby]=\"config.id+'-err'\" \r\n        [attr.aria-invalid]=\"!formControl.valid\" [disabled]=\"disabled\">\r\n    </mat-checkbox>\r\n    <section class=\"text\">\r\n        <body *ngIf=\"config.subText\">\r\n            {{config.subText | translate}}\r\n        </body>\r\n        <jlcl-validation-list [config]=\"config\" [group]=\"group\"></jlcl-validation-list>\r\n    </section>\r\n</div>"
        },
        {
            "name": "DynDropDownComponent",
            "id": "component-DynDropDownComponent-2f1e114b98be65419327569367f7e33bc8ffec5f094b65ffbacf007789012a6fcac68a08195e5bd1399be5e8f2d0cd1bda1dff72b24b109230430dc79558a6bc",
            "file": "packages/ds/angular/src/lib/jl-cl/jl-cl/jl-form-dropdown/jl-form-dropdown.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jlcl-dropdown",
            "styleUrls": [
                "./jl-form-dropdown.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./jl-form-dropdown.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "IListType",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "group",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "FormGroup",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "localGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewChecked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { ListFieldComponent } from '../jl-list-field';\r\n\r\n@Component({\r\n    selector: 'jlcl-dropdown',\r\n    templateUrl: './jl-form-dropdown.component.html',\r\n    styleUrls: ['./jl-form-dropdown.component.scss'],\r\n})\r\nexport class DynDropDownComponent extends ListFieldComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".dropdown-container {\r\n    margin-bottom: 0px;\r\n    padding-bottom: 0px;\r\n}\r\n\r\n.dropdown {\r\n    padding: 0px;\r\n    max-width: 508px;\r\n}\r\nmat-form-field {\r\n    width: 100%;\r\n}\r\n::ng-deep .mat-form-field-appearance-outline .mat-form-field-infix {\r\n    padding: 0.7em 0 1.3em 0;\r\n    .mat-select-arrow-wrapper {\r\n        vertical-align: 0\r\n    }\r\n  }\r\n",
                    "styleUrl": "./jl-form-dropdown.component.scss"
                }
            ],
            "stylesData": "",
            "extends": "ListFieldComponent",
            "templateData": "<div class=\"dropdown-container\">\r\n    <div>\r\n        <app-alert *ngIf=\"config.alert\" [type]=\"'info'\" [body]=\"config.alert\" class=\"no-mobile\"></app-alert>\r\n        <jlcl-label [config]=\"config\" [group]=\"group\"></jlcl-label>\r\n        <p class=\"hint\" *ngIf=\"config.hint\" [innerHtml]=\"config.hint | translate\"></p>\r\n    </div>\r\n    <div class=\"dropdown\" [formGroup]=\"group\">\r\n        <mat-form-field appearance=\"outline\">\r\n            <mat-select [attr.id]=\"config.id\" [formControlName]=\"config.id\" [(ngModel)]=\"config.defaultValue\"\r\n                [attr.aria-labelledby]=\"config.id + '-lbl'\" [attr.data-test]=\"'mat-select-' + config.id + '-test'\"\r\n                [disableOptionCentering]=\"true\" [placeholder]=\"(config.placeholder || '')  | translate\">\r\n                <mat-option *ngFor=\"let item of config.items\" [value]=\"item.key\" class=\"container\"\r\n                    [attr.data-test]=\"config.id + '-' + item.value\">\r\n                    {{item.value | translate}}\r\n                </mat-option>\r\n            </mat-select>\r\n        </mat-form-field>\r\n        <jlcl-validation-list [config]=\"config\" [group]=\"group\"></jlcl-validation-list>\r\n\r\n    </div>\r\n</div>"
        },
        {
            "name": "DynFormAlertComponent",
            "id": "component-DynFormAlertComponent-5cbe120167638f0e624e9e6195fb9e286b4bf6c53d7fd9fcb31f57bdc7cbd6ee568eca9f4f27b3c8979de352863bf3a4bf879309df563bc6432f652c107ccf87",
            "file": "packages/ds/angular/src/lib/jl-cl/jl-cl/jl-form-alert/jl-form-alert.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jlcl-alert",
            "styleUrls": [
                "./jl-form-alert.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./jl-form-alert.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "IAlertConfig",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "group",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "FormGroup",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "iconMap",
                    "defaultValue": "{\r\n        info: 'info_outline',\r\n        warn: 'warning_amber',\r\n        error: 'info_outline',\r\n        success: 'check_circle_outline',\r\n        tip: 'lightbulb_outline',\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "getCssClass",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "hidden",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isSingleLine",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { IField } from '../dynamic-field.directive';\r\nimport { IAlertConfig } from '../IFormBase';\r\n\r\n@Component({\r\n    selector: 'jlcl-alert',\r\n    templateUrl: './jl-form-alert.component.html',\r\n    styleUrls: ['./jl-form-alert.component.scss'],\r\n})\r\nexport class DynFormAlertComponent implements IField {\r\n    @Input()\r\n    group!: FormGroup;\r\n    @Input()\r\n    disabled!: boolean;\r\n    @Input()\r\n    config!: IAlertConfig;\r\n\r\n    iconMap = {\r\n        info: 'info_outline',\r\n        warn: 'warning_amber',\r\n        error: 'info_outline',\r\n        success: 'check_circle_outline',\r\n        tip: 'lightbulb_outline',\r\n    };\r\n\r\n    getCssClass() {\r\n        if (this.config.alertType === 'warn')\r\n            return 'warn-icon material-icons-round';\r\n        else return this.config.alertType + '-icon';\r\n    }\r\n    isSingleLine() {\r\n        if (this.config.contentType === 'single') return true;\r\n        else return false;\r\n    }\r\n    hidden() {\r\n        return this.config.hidden && this.config.hidden(this.group);\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./jl-form-alert.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "IField"
            ],
            "templateData": "<div class=\"info-box\" [ngClass]=\"config.alertType + '-color'\">\r\n    <div [ngClass]=\"isSingleLine() ? 'singleLineContent content' : 'content'\">\r\n        <mat-icon [ngClass]=\"getCssClass()\">\r\n            {{iconMap[config.alertType]}}</mat-icon>\r\n        <div class=\"text-content\">\r\n            <p class='subtitle2' [innerHtml]=\"config.label | translate\"></p>\r\n            <div *ngIf=\"config.content\" class=\"description\">\r\n                <div>\r\n                    <p class='body2' [innerHtml]=\"config.content | translate\"></p>\r\n                </div>\r\n            </div>\r\n            <div *ngIf=\"config.link\" class=\"link2 info-link\">\r\n                <a [href]=\"config.link.url | translate\" target=\"_blank\">\r\n                    {{config.link.name | translate}}\r\n                    <mat-icon class=\"launch\" aria-hidden=\"false\" aria-label=\"launch icon\">\r\n                        launch</mat-icon>\r\n                </a>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>"
        },
        {
            "name": "DynFormBaseComponent",
            "id": "component-DynFormBaseComponent-d2bd93d5d318cd7461e10992d422a668d3914820306e87be532320d7ecf9ff3acabcee911987edcee69e727519b18a68ca26ec155e8f9e71bb98bb39a09bbd64",
            "file": "packages/ds/angular/src/lib/jl-cl/jl-cl/form-base/form-base.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jlcl-form-base",
            "styleUrls": [
                "./form-base.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./form-base.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "IFormConfig",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "group",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "FormGroup",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "localGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewChecked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { IField } from '../dynamic-field.directive';\r\nimport { IFormConfig } from '../IFormBase';\r\nimport { BaseFieldComponent } from '../jl-base-field';\r\n\r\n@Component({\r\n    selector: 'jlcl-form-base',\r\n    templateUrl: './form-base.html',\r\n    styleUrls: ['./form-base.scss'],\r\n})\r\nexport class DynFormBaseComponent extends BaseFieldComponent implements IField {\r\n    @Input()\r\n    override config!: IFormConfig;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "// @import '~/src/assets/style-guide/breakpoints.scss';\r\n\r\n.form-container {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-content: inherit;\r\n    width: 100%;\r\n    // @include screen('phone') {\r\n    //     align-content: inherit;\r\n    // }\r\n}\r\n.child-config-container {\r\n    margin-top: 10px;\r\n}\r\n",
                    "styleUrl": "./form-base.scss"
                }
            ],
            "stylesData": "",
            "extends": "BaseFieldComponent",
            "implements": [
                "IField"
            ],
            "templateData": "<form [formGroup]=\"group\">\r\n    <div class=\"form-container\">\r\n        <app-alert *ngIf=\"config.alert\" [type]=\"'info'\" [body]=\"config.alert\" class=\"no-mobile\"></app-alert>\r\n        <jlcl-label *ngIf=\"config.label\" [config]=\"config\" [group]=\"group\"></jlcl-label>\r\n        <p *ngIf=\"config.hint\" [innerHtml]=\"config.hint | translate\"></p>\r\n        <div *ngFor=\"let child of config.childConfigs\">\r\n            <span [hidden]=\"!(child.hidden === undefined || child.hidden(group) === false)\">\r\n                <ng-container jlclField [config]=\"child\" [group]=\"localGroup\"\r\n                    [disabled]=\"(!(child.hidden === undefined || child.hidden(group) === false)) || (child.disabled !== undefined && child.disabled(group) === true)\">\r\n                </ng-container>\r\n            </span>\r\n\r\n        </div>\r\n        <jlcl-validation-list *ngIf=\"config.validation\" [config]=\"config\" [group]=\"group\"></jlcl-validation-list>\r\n    </div>\r\n    <ng-content></ng-content>\r\n</form>"
        },
        {
            "name": "DynFormErrorComponent",
            "id": "component-DynFormErrorComponent-88072c0c3fbc36e496e4b8ccf9d7d0925d2ca3cd9eb1be7bd711ddd5de9c771d159a19da244abff02c4f493dbb739ae68078537a948025080f35c7eb94837eec",
            "file": "packages/ds/angular/src/lib/jl-cl/jl-cl/jl-form-error/jl-form-error.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jlcl-form-error",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./jl-form-error.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "IConfig",
                    "decorators": []
                },
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "IValidator",
                    "decorators": []
                },
                {
                    "name": "validatedField",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "AbstractControl",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "getCharDiff",
                    "args": [],
                    "optional": false,
                    "returnType": "number | undefined",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getDisallowedPattern",
                    "args": [],
                    "optional": false,
                    "returnType": "string | undefined",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectorRef, Component, Input, OnInit } from '@angular/core';\r\nimport { AbstractControl } from '@angular/forms';\r\nimport { IConfig } from '../IFormBase';\r\nimport { IValidator } from '../validator';\r\nimport { ErrorNames } from '../validator-types';\r\n\r\ninterface IFormErrorInfoArray {\r\n    disallowedCharacter?: string;\r\n    charDiff?: number;\r\n    disallowedPattern?: string;\r\n}\r\n\r\n@Component({\r\n    selector: 'jlcl-form-error',\r\n    templateUrl: './jl-form-error.html',\r\n})\r\nexport class DynFormErrorComponent implements OnInit {\r\n    @Input()\r\n    error!: IValidator;\r\n    //TODO: update type\r\n    @Input()\r\n    validatedField!: AbstractControl;\r\n    @Input()\r\n    config!: IConfig;\r\n\r\n    get errorParams(): IFormErrorInfoArray {\r\n        const infoArray: IFormErrorInfoArray = {\r\n            disallowedCharacter: this.validatedField.getError(\r\n                ErrorNames.disallowed\r\n            )?.disallowedCharacter,\r\n            charDiff: this.getCharDiff(),\r\n            disallowedPattern: this.getDisallowedPattern(),\r\n        };\r\n        return infoArray;\r\n    }\r\n    constructor(private changeRef: ChangeDetectorRef) {}\r\n    ngOnInit(): void {\r\n        this.validatedField.valueChanges.subscribe(() => {\r\n            this.changeRef.markForCheck();\r\n        });\r\n    }\r\n\r\n    getCharDiff(): number | undefined {\r\n        if (this.validatedField.hasError(ErrorNames.maxLength)) {\r\n            const error = this.validatedField.getError(ErrorNames.maxLength);\r\n            return +error?.actualLength - +error?.requiredLength;\r\n        } else if (this.validatedField.hasError(ErrorNames.minLength)) {\r\n            const error = this.validatedField.getError(ErrorNames.minLength);\r\n            return +error.requiredLength - +error.actualLength;\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    getDisallowedPattern(): string | undefined {\r\n        if (\r\n            this.validatedField.hasError(ErrorNames.pattern) &&\r\n            !!this.validatedField.getError(ErrorNames.pattern).displayPattern\r\n        ) {\r\n            return this.validatedField.getError(ErrorNames.pattern)\r\n                .displayPattern;\r\n        }\r\n        return undefined;\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "changeRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 35,
                "jsdoctags": [
                    {
                        "name": "changeRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "errorParams": {
                    "name": "errorParams",
                    "getSignature": {
                        "name": "errorParams",
                        "type": "",
                        "returnType": "IFormErrorInfoArray",
                        "line": 26
                    }
                }
            },
            "templateData": "<mat-error *ngIf=\"validatedField.hasError(error.errorName) && error.errorMsg?.length\">\r\n    {{error.errorMsg | translate}}\r\n</mat-error>"
        },
        {
            "name": "DynFormLabelComponent",
            "id": "component-DynFormLabelComponent-fa8a84aee460c504c2ea7820c9abbd2c17a06651fd154bdca6589b6aefd56589951b09a2ccdbc915b2cd2c60f9d5d455d399a26989aee6b69bf51abe8d6c45c9",
            "file": "packages/ds/angular/src/lib/jl-cl/jl-cl/jl-form-label/jl-form-label.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jlcl-label",
            "styleUrls": [
                "./jl-form-label.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./jl-form-label.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "IFieldConfig",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "group",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "FormGroup",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { IField } from '../dynamic-field.directive';\r\nimport { IFieldConfig } from '../IFormBase';\r\nimport { IValidator } from '../validator';\r\nimport { ErrorNames } from '../validator-types';\r\n\r\n@Component({\r\n    selector: 'jlcl-label',\r\n    templateUrl: './jl-form-label.component.html',\r\n    styleUrls: ['./jl-form-label.component.scss'],\r\n})\r\nexport class DynFormLabelComponent implements IField {\r\n    @Input()\r\n    group!: FormGroup;\r\n    @Input()\r\n    disabled!: boolean;\r\n    @Input()\r\n    config!: IFieldConfig;\r\n\r\n    public get isRequired(): boolean {\r\n        return (\r\n            this.config.validation?.find((validator: IValidator) => {\r\n                return validator.errorName === ErrorNames.required;\r\n            }) !== undefined\r\n        );\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "// @import '~/src/assets/style-guide/theme';\r\n\r\n.jlcl-label {\r\n    max-width: 774px;\r\n}\r\n\r\n.label-margin {\r\n    margin-top: 24px;\r\n}\r\n\r\n.requiredPrefix {\r\n    &::before {\r\n        content: '*';\r\n        color: get-color(error);\r\n    }\r\n}\r\n.required {\r\n    color: get-color(error);\r\n}\r\n.optional {\r\n    color: get-color(neutral, 600);\r\n}\r\n",
                    "styleUrl": "./jl-form-label.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "IField"
            ],
            "accessors": {
                "isRequired": {
                    "name": "isRequired",
                    "getSignature": {
                        "name": "isRequired",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 21
                    }
                }
            },
            "templateData": "<div class=\"jlcl-label\" [ngClass]=\"{'label-margin': config.noLabelMargin !== true}\">\r\n    <mat-label class=\"subtitle1\" [ngClass]=\"(isRequired && !config.hideStar) ? 'requiredPrefix' : ''\" *ngIf=\"config.label\"\r\n        textWrap=\"true\"\r\n        [attr.id]=\"config.id + '-lbl'\" [attr.aria-required]=\"isRequired\">\r\n        {{ config.label | translate }}\r\n        <span *ngIf=\"!config.hideRequiredLabel\">\r\n            <span *ngIf=\"isRequired\" class=\"required subtitle1\" [attr.aria-hidden]=\"true\">{{ 'General.required' |\r\n                translate }}</span>\r\n            <span *ngIf=\"!isRequired\" class=\"optional subtitle1\" [attr.aria-hidden]=\"true\">{{ 'General.optional' |\r\n                translate }}</span>\r\n        </span>\r\n    </mat-label>\r\n    <app-info-bubble *ngIf=\"config.moreInfo\" (infoEvent)=\"config.moreInfo()\"></app-info-bubble>\r\n</div>\r\n"
        },
        {
            "name": "DynRadioComponent",
            "id": "component-DynRadioComponent-42413a9c32b0cd1e9dcc6d96eafca5e039fec1680467aa6f557f2fa2efc917628fb461e01a4b49419929d9653cbc26bea9068b720d316f0a272b8a9fd31dc9f1",
            "file": "packages/ds/angular/src/lib/jl-cl/jl-cl/jl-form-radio/jl-form-radio.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jlcl-radio",
            "styleUrls": [
                "./jl-form-radio.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./jl-form-radio.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "IListType",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "group",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "FormGroup",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "localGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewChecked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { ListFieldComponent } from '../jl-list-field';\r\n\r\n@Component({\r\n    selector: 'jlcl-radio',\r\n    templateUrl: './jl-form-radio.component.html',\r\n    styleUrls: ['./jl-form-radio.component.scss'],\r\n})\r\nexport class DynRadioComponent extends ListFieldComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container {\r\n    display: flex;\r\n    flex-direction: column;\r\n    margin-top: 8px;\r\n    &:first-child{\r\n        margin-top: 0px;\r\n    }\r\n    margin-left: 0px;\r\n    padding-left: 0px;\r\n    width: 100%;\r\n    line-height: 32px;\r\n}\r\n\r\n.radio {\r\n    padding: 0px;\r\n    margin-bottom: 0px;\r\n    margin-top: 12px;\r\n}\r\n",
                    "styleUrl": "./jl-form-radio.component.scss"
                }
            ],
            "stylesData": "",
            "extends": "ListFieldComponent",
            "templateData": "<div>\r\n    <app-alert *ngIf=\"config.alert\" [type]=\"'info'\" [body]=\"config.alert\" class=\"no-mobile\"></app-alert>\r\n    <jlcl-label [config]=\"config\" [group]=\"group\"></jlcl-label>\r\n    <p class=\"body2\" *ngIf=\"config.hint\" [innerHtml]=\"config.hint | translate\"></p>\r\n\r\n</div>\r\n<div class=\"radio\" [formGroup]=\"group\">\r\n    <mat-radio-group [attr.aria-labelledby]=\"config.id+'-lbl'\" [formControlName]=\"config.id\"\r\n        [attr.data-test]=\"'mat-radio-' + config.id\">\r\n        <mat-radio-button *ngFor=\"let item of config.items\" [value]=\"item.key\" class=\"container body1\"\r\n            [attr.data-test]=\"config.id + '-' + item.value\"><span [innerHtml]=\"(item.value || item.key) | translate\"></span>\r\n        </mat-radio-button>\r\n\r\n    </mat-radio-group>\r\n\r\n    <jlcl-validation-list class=\"validation\" [config]=\"config\" [group]=\"group\"></jlcl-validation-list>\r\n</div>"
        },
        {
            "name": "DynTextFieldComponent",
            "id": "component-DynTextFieldComponent-0150225eae75a894aea133078fe40aa7f23090040271df7bca935df40822f6e2c4ee6a5a3fd9481bf3b1c5b92f1ca0ba74795a317b8307c2fd4d028986d381e9",
            "file": "packages/ds/angular/src/lib/jl-cl/jl-cl/jl-form-textfield/jl-form-textfield.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jlcl-text-field",
            "styleUrls": [
                "./jl-form-textfield.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./jl-form-textfield.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "IFieldConfig",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "group",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "FormGroup",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "localGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewChecked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { IFieldConfig } from '../IFormBase';\r\nimport { BaseFieldComponent } from '../jl-base-field';\r\n\r\n@Component({\r\n    selector: 'jlcl-text-field',\r\n    templateUrl: './jl-form-textfield.component.html',\r\n    styleUrls: ['./jl-form-textfield.component.scss'],\r\n})\r\nexport class DynTextFieldComponent extends BaseFieldComponent {\r\n    @Input()\r\n    override config!: IFieldConfig;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "// @import '~/src/assets/style-guide/breakpoints.scss';\r\n// @import '~/src/assets/style-guide/theme';\r\n\r\ndiv.tf-container {\r\n    display: flex;\r\n    flex-direction: column;\r\n    flex-basis: auto;\r\n}\r\n\r\n.input {\r\n    margin-top: 4px;\r\n    padding-left: 14px;\r\n    width: 508px;\r\n    height: 56px;\r\n    border-radius: 5px;\r\n    border: 1px solid get-border-color();\r\n    // @include screen('phone') {\r\n    //     white-space: normal;\r\n    //     width: 100%;\r\n    // }\r\n}\r\n\r\n.inputSubTitle {\r\n    white-space: normal;\r\n    font-weight: 700;\r\n    font-family: 'Noto Sans', sans-serif;\r\n    width: 508px;\r\n    height: 22px;\r\n    // @include screen('phone') {\r\n    //     white-space: normal;\r\n    //     width: 100%;\r\n    // }\r\n}\r\n\r\n.no-border {\r\n    margin-top: 4px;\r\n    padding-left: 14px;\r\n    width: 508px; \r\n    height: 56px;\r\n    border: none;\r\n    outline: none;\r\n    // @include screen('phone') {\r\n    //     white-space: normal;\r\n    //     width: 100%;\r\n    // }\r\n}\r\n\r\n.validation {\r\n    font-size: 12px;\r\n    font-family: 'Noto Sans', sans-serif;\r\n}\r\n",
                    "styleUrl": "./jl-form-textfield.component.scss"
                }
            ],
            "stylesData": "",
            "extends": "BaseFieldComponent",
            "templateData": "<div class=\"tf-container\" [formGroup]=\"group\">\r\n    <span *ngIf=\"config.subText\" class=\"inputSubTitle\">\r\n        {{config.subText | translate}}\r\n    </span>\r\n    <app-alert *ngIf=\"config.alert\" [type]=\"'info'\" [body]=\"config.alert\" class=\"no-mobile\"></app-alert>\r\n    <jlcl-label [config]=\"config\" [group]=\"group\"></jlcl-label>\r\n    <span class=\"body2\" *ngIf=\"config.hint\" [innerHtml]=\"config.hint | translate\"></span>\r\n    <input [ngClass]=\"{'input': !config.readonly, 'no-border': config.readonly}\" type=\" text\" width=\"100%\" marginTop=\"0\"\r\n        [formControlName]=\"config.id\" [placeholder]=\"config.placeholder || ''\" [attr.data-test]=\"config.id + '-test'\"\r\n        [attr.disabled]=\"config.disabled\" [attr.readonly]=\"config.readonly\" [attr.aria-labelledby]=\"config.id + '-lbl'\"\r\n        [attr.aria-required]=\"isRequired\" />\r\n    <jlcl-validation-list class=\"validation\" [config]=\"config\" [group]=\"group\"></jlcl-validation-list>\r\n</div>"
        },
        {
            "name": "DynValidationListComponent",
            "id": "component-DynValidationListComponent-cbb2bff28d14258dbc044ed68ac8772a6dad0c80f3773667bd102bda702e372132aa793c6890b8446c5d5847034d40be4c83f82bc64a00f3f521fbdc62b69f68",
            "file": "packages/ds/angular/src/lib/jl-cl/jl-cl/jl-validation-list/jl-validation-list.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jlcl-validation-list",
            "styleUrls": [
                "./jl-validation-list.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./jl-validation-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "IConfig",
                    "decorators": []
                },
                {
                    "name": "group",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "FormGroup",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "class",
                    "defaultValue": "'jlcl-validation-list'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class",
                    "defaultValue": "'jlcl-validation-list'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "string",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n    Component,\r\n    HostBinding,\r\n    Input,\r\n    OnInit,\r\n    ViewEncapsulation\r\n} from '@angular/core';\r\n\r\nimport { AbstractControl, FormGroup, ValidatorFn } from '@angular/forms';\r\nimport { IConfig } from '../IFormBase';\r\nimport { IValidator } from '../validator';\r\n\r\n@Component({\r\n    selector: 'jlcl-validation-list',\r\n    templateUrl: './jl-validation-list.component.html',\r\n    // styleUrls: ['./jl-validation-list.component.scss'],\r\n    styleUrls: ['./jl-validation-list.component.css'],\r\n    encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class DynValidationListComponent implements OnInit {\r\n    @HostBinding('class') class = 'jlcl-validation-list';\r\n    @Input()\r\n    config!: IConfig;\r\n    @Input()\r\n    group!: FormGroup;\r\n    get formControl(): AbstractControl {\r\n        return this.group?.get(this.config.id) as AbstractControl;\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        const validators = [] as ValidatorFn[];\r\n        this.config.validation?.forEach((validator: IValidator) => {\r\n            validators.push(validator.validator);\r\n        });\r\n        this.formControl?.setValidators(validators);\r\n        this.formControl?.updateValueAndValidity();\r\n    }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".errorList {\r\n    display: flex;\r\n    flex-direction: column;\r\n    margin: 0, 5rem;\r\n}\r\n.error-container {\r\n    display: flex;\r\n    flex-direction: row;\r\n    width: 100%;\r\n}\r\n",
                    "styleUrl": "./jl-validation-list.component.css"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "formControl": {
                    "name": "formControl",
                    "getSignature": {
                        "name": "formControl",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 26
                    }
                }
            },
            "templateData": "<div class=\"error-container\"\r\n    *ngIf=\"formControl && formControl.invalid && (!formControl.pristine || formControl.touched)\"\r\n    color=\"error\">\r\n    <div class=\"errorList\" [attr.id]=\"config.id+'-err'\" role=\"alert\">\r\n        <div *ngFor=\"let validatorConfig of config.validation\">\r\n            <jlcl-form-error [config]=\"config\" [error]=\"validatorConfig\"\r\n                [validatedField]=\"formControl\">\r\n            </jlcl-form-error>\r\n        </div>\r\n    </div>\r\n</div>"
        },
        {
            "name": "FooterComponent",
            "id": "component-FooterComponent-65536d5e8de4d3fcdccc127e567e1d2ec2c5dce097390a29a39c6501833063b144ddec51f9ffabff72acf78cea09acc89d77aff9b39562a06e388f8448287cea",
            "file": "packages/ds/angular/src/template/footer/footer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-footer",
            "styleUrls": [
                "./footer.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./footer.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'lib-footer',\r\n  templateUrl: './footer.component.html',\r\n  styleUrls: ['./footer.component.css']\r\n})\r\nexport class FooterComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./footer.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>footer works!</p>\r\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-bda17aa3451a9f731685153f2587877b8267c32007f05e7abad3581336e6bc02346a1b660e8c69c4d90b4526b6e047b3ac1f4246252c9dc83985c9148aab5e97",
            "file": "stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            primary\n            size=\"small\"\n            primary=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\nimport { User } from './User';\r\n\r\n@Component({\r\n  selector: 'storybook-header',\r\n  template: `<header>\r\n    <div class=\"wrapper\">\r\n      <div>\r\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\r\n          <g fill=\"none\" fillRule=\"evenodd\">\r\n            <path\r\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\r\n              fill=\"#FFF\"\r\n            />\r\n            <path\r\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\r\n              fill=\"#555AB9\"\r\n            />\r\n            <path\r\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\r\n              fill=\"#91BAF8\"\r\n            />\r\n          </g>\r\n        </svg>\r\n        <h1>Acme</h1>\r\n      </div>\r\n      <div>\r\n        <div *ngIf=\"user\">\r\n          <span class=\"welcome\">\r\n            Welcome, <b>{{ user.name }}</b\r\n            >!\r\n          </span>\r\n          <storybook-button\r\n            *ngIf=\"user\"\r\n            size=\"small\"\r\n            (onClick)=\"onLogout.emit($event)\"\r\n            label=\"Log out\"\r\n          ></storybook-button>\r\n        </div>\r\n        <div *ngIf=\"!user\">\r\n          <storybook-button\r\n            *ngIf=\"!user\"\r\n            size=\"small\"\r\n            class=\"margin-left\"\r\n            (onClick)=\"onLogin.emit($event)\"\r\n            label=\"Log in\"\r\n          ></storybook-button>\r\n          <storybook-button\r\n            *ngIf=\"!user\"\r\n            primary\r\n            size=\"small\"\r\n            primary=\"true\"\r\n            class=\"margin-left\"\r\n            (onClick)=\"onCreateAccount.emit($event)\"\r\n            label=\"Sign up\"\r\n          ></storybook-button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </header>`,\r\n  styleUrls: ['./header.css'],\r\n})\r\nexport default class HeaderComponent {\r\n  @Input()\r\n  user: User | null = null;\r\n\r\n  @Output()\r\n  onLogin = new EventEmitter<Event>();\r\n\r\n  @Output()\r\n  onLogout = new EventEmitter<Event>();\r\n\r\n  @Output()\r\n  onCreateAccount = new EventEmitter<Event>();\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\r\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\r\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\r\n  padding: 15px 20px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n}\r\n\r\nsvg {\r\n  display: inline-block;\r\n  vertical-align: top;\r\n}\r\n\r\nh1 {\r\n  font-weight: 900;\r\n  font-size: 20px;\r\n  line-height: 1;\r\n  margin: 6px 0 6px 10px;\r\n  display: inline-block;\r\n  vertical-align: top;\r\n}\r\n\r\nbutton + button {\r\n  margin-left: 10px;\r\n}\r\n\r\n.welcome {\r\n  color: #333;\r\n  font-size: 14px;\r\n  margin-right: 10px;\r\n}\r\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-e8d6fa22df872c3b7642d30b3f9ac23ab671b444d9bf15f9035900cba1295069f456c9e01f36ee6e5afd6659d73a969b6905ca6ca2c595c2bcdcd6717caf0193-1",
            "file": "packages/ds/angular/src/template/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-header",
            "styleUrls": [
                "./header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'lib-header',\r\n  templateUrl: './header.component.html',\r\n  styleUrls: ['./header.component.scss']\r\n})\r\nexport class HeaderComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use \"~@ircc-ca/ds-sdc-core/typography/typography\";\r\n\r\n.font:before {\r\n    @include typography.fonts-FA-decor-icon('\\e2df', 'fa-solid');\r\n}",
                    "styleUrl": "./header.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "HeaderComponent-1",
            "templateData": "<p><span class=\"font\" aria-hidden=\"true\"></span>header works!</p>\r\n"
        },
        {
            "name": "JlFormButtonComponent",
            "id": "component-JlFormButtonComponent-81e8171befd2d07c75c6c121582686d088b54633a2e2c56e0467fc36127977eb0a4aae7a8ec5a89a85afac07b1395de3d0e55c1726ce0cedc0544c2bbe1acdeb",
            "file": "packages/ds/angular/src/lib/jl-cl/jl-cl/jl-form-button/jl-form-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-jl-form-button",
            "styleUrls": [
                "./jl-form-button.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./jl-form-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'lib-jl-form-button',\r\n  templateUrl: './jl-form-button.component.html',\r\n  styleUrls: ['./jl-form-button.component.css']\r\n})\r\nexport class JlFormButtonComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./jl-form-button.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>jl-form-button works!</p>\r\n"
        },
        {
            "name": "JlFormLinkComponent",
            "id": "component-JlFormLinkComponent-9d8223dc5944b129cce3d5463155794f7fa3851416254bc5593cd45a6689a5a68d6e6fbbf4006e73c4b22e6dcdcacad5a996da82d1b262f377664db3e35cd58b",
            "file": "packages/ds/angular/src/lib/jl-cl/jl-cl/jl-form-link/jl-form-link.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-jl-form-link",
            "styleUrls": [
                "./jl-form-link.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./jl-form-link.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'lib-jl-form-link',\r\n  templateUrl: './jl-form-link.component.html',\r\n  styleUrls: ['./jl-form-link.component.css']\r\n})\r\nexport class JlFormLinkComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./jl-form-link.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>jl-form-link works!</p>\r\n"
        },
        {
            "name": "ListFieldComponent",
            "id": "component-ListFieldComponent-e09efff8b50a7d2e47299bb17f3283a966104c6500d6583c404a2e75ddacf3f3da49c3c3d6eca2c6b6b9e6ae7c61437aa1c96d33cb51c51f8cdbda22bfb3dd4d",
            "file": "packages/ds/angular/src/lib/jl-cl/jl-cl/jl-list-field.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "IListType",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "group",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "FormGroup",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "localGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewChecked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseFieldComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectorRef, Component, Input } from '@angular/core';\r\nimport { IListType } from './IFormBase';\r\nimport { BaseFieldComponent } from './jl-base-field';\r\n\r\n@Component({\r\n    template: ``,\r\n})\r\nexport class ListFieldComponent extends BaseFieldComponent {\r\n    @Input()\r\n    override config!: IListType;\r\n\r\n    constructor(protected override changeRef: ChangeDetectorRef) {\r\n        super(changeRef);\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "changeRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "changeRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseFieldComponent"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-1fc7c24c98b4f0b0f413d91f5a6126f11ad55647457f5a7f372b7f83fe8ecd6dbe67b5ca4b826ed20b9bfbc04d5606b15f82a203b1311f98b18bd28ec9f4fc7c",
            "file": "stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "optional": false,
                    "description": "",
                    "line": 64
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { User } from './User';\r\n\r\n@Component({\r\n  selector: 'storybook-page',\r\n  template: `<article>\r\n    <storybook-header\r\n      [user]=\"user\"\r\n      (onLogout)=\"doLogout()\"\r\n      (onLogin)=\"doLogin()\"\r\n      (onCreateAccount)=\"doCreateAccount()\"\r\n    ></storybook-header>\r\n    <section>\r\n      <h2>Pages in Storybook</h2>\r\n      <p>\r\n        We recommend building UIs with a\r\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          <strong>component-driven</strong>\r\n        </a>\r\n        process starting with atomic components and ending with pages.\r\n      </p>\r\n      <p>\r\n        Render pages with mock data. This makes it easy to build and review page states without\r\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\r\n        in Storybook:\r\n      </p>\r\n      <ul>\r\n        <li>\r\n          Use a higher-level connected component. Storybook helps you compose such data from the\r\n          \"args\" of child component stories\r\n        </li>\r\n        <li>\r\n          Assemble data in the page component from your services. You can mock these services out\r\n          using Storybook.\r\n        </li>\r\n      </ul>\r\n      <p>\r\n        Get a guided tutorial on component-driven development at\r\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          Storybook tutorials\r\n        </a>\r\n        . Read more in the\r\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\r\n        .\r\n      </p>\r\n      <div class=\"tip-wrapper\">\r\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\r\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\r\n          <g fill=\"none\" fillRule=\"evenodd\">\r\n            <path\r\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\r\n              id=\"a\"\r\n              fill=\"#999\"\r\n            />\r\n          </g>\r\n        </svg>\r\n        Viewports addon in the toolbar\r\n      </div>\r\n    </section>\r\n  </article>`,\r\n  styleUrls: ['./page.css'],\r\n})\r\nexport default class PageComponent {\r\n  user: User | null = null;\r\n\r\n  doLogout() {\r\n    this.user = null;\r\n  }\r\n\r\n  doLogin() {\r\n    this.user = { name: 'Jane Doe' };\r\n  }\r\n\r\n  doCreateAccount() {\r\n    this.user = { name: 'Jane Doe' };\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\r\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\r\n  font-size: 14px;\r\n  line-height: 24px;\r\n  padding: 48px 20px;\r\n  margin: 0 auto;\r\n  max-width: 600px;\r\n  color: #333;\r\n}\r\n\r\nsection h2 {\r\n  font-weight: 900;\r\n  font-size: 32px;\r\n  line-height: 1;\r\n  margin: 0 0 4px;\r\n  display: inline-block;\r\n  vertical-align: top;\r\n}\r\n\r\nsection p {\r\n  margin: 1em 0;\r\n}\r\n\r\nsection a {\r\n  text-decoration: none;\r\n  color: #1ea7fd;\r\n}\r\n\r\nsection ul {\r\n  padding-left: 30px;\r\n  margin: 1em 0;\r\n}\r\n\r\nsection li {\r\n  margin-bottom: 8px;\r\n}\r\n\r\nsection .tip {\r\n  display: inline-block;\r\n  border-radius: 1em;\r\n  font-size: 11px;\r\n  line-height: 12px;\r\n  font-weight: 700;\r\n  background: #e7fdd8;\r\n  color: #66bf3c;\r\n  padding: 4px 12px;\r\n  margin-right: 10px;\r\n  vertical-align: top;\r\n}\r\n\r\nsection .tip-wrapper {\r\n  font-size: 13px;\r\n  line-height: 20px;\r\n  margin-top: 40px;\r\n  margin-bottom: 40px;\r\n}\r\n\r\nsection .tip-wrapper svg {\r\n  display: inline-block;\r\n  height: 12px;\r\n  width: 12px;\r\n  margin-right: 4px;\r\n  vertical-align: top;\r\n  margin-top: 3px;\r\n}\r\n\r\nsection .tip-wrapper svg path {\r\n  fill: #1ea7fd;\r\n}\r\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        }
    ],
    "modules": [
        {
            "name": "AngularModule",
            "id": "module-AngularModule-f81edb038131d4d930c59679dd0add1f39e0d6d2f3211ca8c6b9ab8a49277642701763848aeaadc7301395e9bc78feab4a40b7d181c243bb9a01ea4a1cc00559",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "packages/ds/angular/src/lib/angular.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { AngularComponent } from './angular.component';\r\n@NgModule({\r\n  declarations: [\r\n    AngularComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n  ],\r\n  exports: [\r\n    AngularComponent\r\n  ]\r\n})\r\nexport class AngularModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AngularComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AngularComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppModule",
            "id": "module-AppModule-97e9a14baa8fd6ab3f14c5cabc9b81f3f1847e044773670133bb2eb5e278c3415eccc64ae98a5a868a238aadd07cd01a887ec5a5c860a962cd86b582ceda959c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "sample/src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\n\r\n// TODO: update path to the package\r\nimport { JlClModule } from 'packages/ds/angular/src/lib/jl-cl/jl-cl.module';\r\nimport { JlTemplateModule } from 'packages/ds/angular/src/public-api';\r\n\r\nimport { AppComponent } from './app.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    TranslateModule.forRoot(),\r\n    JlClModule,\r\n    JlTemplateModule,\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent],\r\n})\r\nexport class AppModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "JlClModule"
                        },
                        {
                            "name": "JlTemplateModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "JlClModule",
            "id": "module-JlClModule-50062944a7b184f2a88706bbc1f8bf2af4a1c41133c361157d96c5faab6ed761dbe0c85f5fa14d1787f934862321ba9fd28ab9eab4b9f1839c15663942a9a404",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "packages/ds/angular/src/lib/jl-cl/jl-cl.module.ts",
            "methods": [],
            "sourceCode": "\r\nimport { CommonModule } from '@angular/common';\r\nimport { CUSTOM_ELEMENTS_SCHEMA, NgModule } from '@angular/core';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { DynamicFieldDirective } from './jl-cl/dynamic-field.directive';\r\nimport { components } from './jl-cl/forms.module';\r\n\r\n@NgModule({\r\ndeclarations: [...components, DynamicFieldDirective],\r\n    imports: [\r\n        CommonModule,\r\n        ReactiveFormsModule,\r\n        TranslateModule.forChild(),\r\n    ],\r\n    exports: [...components, DynamicFieldDirective],\r\n    providers: [],\r\n    schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class JlClModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DynCheckboxComponent"
                        },
                        {
                            "name": "DynDropDownComponent"
                        },
                        {
                            "name": "DynFormAlertComponent"
                        },
                        {
                            "name": "DynFormBaseComponent"
                        },
                        {
                            "name": "DynFormErrorComponent"
                        },
                        {
                            "name": "DynFormLabelComponent"
                        },
                        {
                            "name": "DynRadioComponent"
                        },
                        {
                            "name": "DynTextFieldComponent"
                        },
                        {
                            "name": "DynValidationListComponent"
                        },
                        {
                            "name": "DynamicFieldDirective"
                        },
                        {
                            "name": "JlFormButtonComponent"
                        },
                        {
                            "name": "JlFormLinkComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DynCheckboxComponent"
                        },
                        {
                            "name": "DynDropDownComponent"
                        },
                        {
                            "name": "DynFormAlertComponent"
                        },
                        {
                            "name": "DynFormBaseComponent"
                        },
                        {
                            "name": "DynFormErrorComponent"
                        },
                        {
                            "name": "DynFormLabelComponent"
                        },
                        {
                            "name": "DynRadioComponent"
                        },
                        {
                            "name": "DynTextFieldComponent"
                        },
                        {
                            "name": "DynValidationListComponent"
                        },
                        {
                            "name": "DynamicFieldDirective"
                        },
                        {
                            "name": "JlFormButtonComponent"
                        },
                        {
                            "name": "JlFormLinkComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "JlTemplateModule",
            "id": "module-JlTemplateModule-4c7fa3f1a4eaeed698717f65665cc53369667873d066899b1186a2094232fd15ba3f2d7f0f9fef39fa583c292d8a29f74c1bd3173b83953de1fb2e7e0e79ea1a",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "packages/ds/angular/src/template/jl-template.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { HeaderComponent } from './header/header.component';\r\nimport { FooterComponent } from './footer/footer.component';\r\n\r\n@NgModule({\r\n    declarations: [\r\n        HeaderComponent,\r\n        FooterComponent\r\n    ],\r\n    imports: [\r\n    ],\r\n    exports: [\r\n        HeaderComponent,\r\n        FooterComponent\r\n    ],\r\n    providers: [],\r\n})\r\nexport class JlTemplateModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FooterComponent"
                        },
                        {
                            "name": "HeaderComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FooterComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "allowedPatternValidator",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ds/angular/src/lib/jl-cl/jl-cl/validator-functions/simple-validators.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(allowedPattern: RegExp): ValidatorFn =>\r\n    (control: AbstractControl): ValidationErrors | null => {\r\n        if (!control.value || typeof control.value !== 'string') {\r\n            return null;\r\n        }\r\n        if (allowedPattern.test(control.value)) {\r\n            return null;\r\n        } else {\r\n            let disallowedChars = '';\r\n            [\r\n                ...control.value.replace(\r\n                    new RegExp(`${allowedPattern}`, 'g'),\r\n                    ''\r\n                ),\r\n            ].forEach((character: string) => {\r\n                if (disallowedChars.indexOf(character) === -1) {\r\n                    disallowedChars += character;\r\n                }\r\n            });\r\n\r\n            return {\r\n                [ErrorNames.disallowed]: {\r\n                    disallowedCharacter: disallowedChars,\r\n                },\r\n            };\r\n        }\r\n    }"
            },
            {
                "name": "COMPONENT_TYPES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ds/angular/src/lib/jl-cl/jl-cl/dynamic-field.directive.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n    alertBox: DynFormAlertComponent,\r\n    input: DynTextFieldComponent,\r\n    label: DynFormLabelComponent,\r\n    form: DynFormBaseComponent,\r\n    checkbox: DynCheckboxComponent,\r\n    radio: DynRadioComponent,\r\n    dropdown: DynDropDownComponent,\r\n}"
            },
            {
                "name": "components",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ds/angular/src/lib/jl-cl/jl-cl/forms.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n    DynTextFieldComponent,\r\n    DynFormLabelComponent,\r\n    DynFormBaseComponent,\r\n    DynCheckboxComponent,\r\n    DynFormErrorComponent,\r\n    DynValidationListComponent,\r\n    DynRadioComponent,\r\n    DynDropDownComponent,\r\n    DynFormAlertComponent,\r\n    JlFormLinkComponent,\r\n    JlFormButtonComponent\r\n]"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "sample/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ds/angular/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "disallowedPatternValidator",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ds/angular/src/lib/jl-cl/jl-cl/validator-functions/simple-validators.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(disallowedPattern: RegExp | string, displayPattern: string): ValidatorFn =>\r\n    (control: AbstractControl): ValidationErrors | null => {\r\n        if (!control.value) {\r\n            return null;\r\n        }\r\n        if (control.value.toString().match(disallowedPattern)) {\r\n            return {\r\n                [ErrorNames.pattern]: {\r\n                    displayPattern,\r\n                },\r\n            };\r\n        }\r\n        return null;\r\n    }"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "sample/src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  production: true\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "sample/src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  production: false\r\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "listValidator",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ds/angular/src/lib/jl-cl/jl-cl/validator-functions/simple-validators.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(items: IListItem[]): ValidatorFn =>\r\n    (control: AbstractControl): ValidationErrors | null => {\r\n        return null;\r\n    }"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "sample/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ds/angular/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "validatePrimaryNumber",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ds/angular/src/lib/jl-cl/jl-cl/validator-functions/simple-validators.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(\r\n    control: AbstractControl\r\n): ValidationErrors | null => {\r\n    const group = control as FormArray;\r\n    const formArrayValues = group.value;\r\n    return { [ErrorNames.primaryNumberRequired]: {} };\r\n}"
            },
            {
                "name": "validateTable",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ds/angular/src/lib/jl-cl/jl-cl/validator-functions/simple-validators.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(\r\n    control: AbstractControl\r\n): ValidationErrors | null => {\r\n    const group = control as FormArray;\r\n    if (!group.controls) {\r\n        return null;\r\n    }\r\n\r\n    if (Object.keys(group.controls).length === 0) {\r\n        return {\r\n            [ErrorNames.required]: {},\r\n        };\r\n    } else {\r\n        return null;\r\n    }\r\n}"
            },
            {
                "name": "VALIDATOR_TABLE_PRIMARY_NUMBER",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ds/angular/src/lib/jl-cl/jl-cl/validator.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n    primaryNumberRequire: {\r\n        errorName: ErrorNames.primaryNumberRequired,\r\n        validator: validatePrimaryNumber,\r\n        errorMsg: 'ErrorMessage.primaryNumberRequired',\r\n    },\r\n}"
            },
            {
                "name": "VALIDATOR_TABLE_REQUIRED",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ds/angular/src/lib/jl-cl/jl-cl/validator.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n    tableRequire: {\r\n        errorName: ErrorNames.required,\r\n        validator: validateTable,\r\n        errorMsg: 'ErrorMessage.required',\r\n    },\r\n}"
            },
            {
                "name": "VALIDATORS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ds/angular/src/lib/jl-cl/jl-cl/validator.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "IValidatorModel",
                "defaultValue": "{\r\n    required: {\r\n        errorName: ErrorNames.required,\r\n        validator: Validators.required,\r\n        errorMsg: 'ErrorMessage.required',\r\n    },\r\n}"
            },
            {
                "name": "VALIDATORS_DYNAMIC",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ds/angular/src/lib/jl-cl/jl-cl/validator.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "IDynamicValidatorModel",
                "defaultValue": "{\r\n    minDate: (date: Date) =>\r\n        ({\r\n            errorMsg: 'Date is below minimum',\r\n            errorName: ErrorNames.minDate,\r\n            validator: minDateValidator(date),\r\n        } as IValidator),\r\n    maxDate: (date: Date) =>\r\n        ({\r\n            errorMsg: 'Date is above maximum',\r\n            errorName: ErrorNames.maxDate,\r\n            validator: maxDateValidator(date),\r\n        } as IValidator),\r\n    minLength: (minimum: number) => ({\r\n        errorMsg: 'ErrorMessage.MinLength',\r\n        errorName: ErrorNames.minLength,\r\n        validator: Validators.minLength(minimum),\r\n    }),\r\n    maxLength: (maximum: number) => ({\r\n        errorMsg: 'ErrorMessage.MaxLength',\r\n        errorName: ErrorNames.maxLength,\r\n        validator: Validators.maxLength(maximum),\r\n    }),\r\n    allowedPattern: (regex: RegExp) => ({\r\n        errorMsg: 'ErrorMessage.DisallowedCharacter',\r\n        errorName: ErrorNames.disallowed,\r\n        validator: allowedPatternValidator(regex),\r\n    }),\r\n    autocompleteList: (items: IListItem[]) => ({\r\n        errorMsg: 'ErrorMessage.invalid',\r\n        errorName: ErrorNames.invalid,\r\n        validator: listValidator(items),\r\n    }),\r\n    maxCurrencyLength: (maximum: number) => ({\r\n        errorMsg: 'Must contain only numbers, between 0 and 999,999,999', //Text doesn't exist in translation, will update once added\r\n        errorName: ErrorNames.maxLength,\r\n        validator: Validators.maxLength(maximum),\r\n    }),\r\n}"
            }
        ],
        "functions": [
            {
                "name": "maxDateValidator",
                "file": "packages/ds/angular/src/lib/jl-cl/jl-cl/validator-functions/date-validator.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "date",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "ValidatorFn",
                "jsdoctags": [
                    {
                        "name": "date",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "minDateValidator",
                "file": "packages/ds/angular/src/lib/jl-cl/jl-cl/validator-functions/date-validator.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "date",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "ValidatorFn",
                "jsdoctags": [
                    {
                        "name": "date",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "toCompareDate",
                "file": "packages/ds/angular/src/lib/jl-cl/jl-cl/validator-functions/date-validator.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "date",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "number",
                "jsdoctags": [
                    {
                        "name": "date",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "ConditionCheck",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "packages/ds/angular/src/lib/jl-cl/jl-cl/IFormBase.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "ConditionCheck",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "packages/ds/angular/src/lib/jl-cl/jl-cl/ITableBase.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            }
        ],
        "enumerations": [
            {
                "name": "ErrorNames",
                "childs": [
                    {
                        "name": "required",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "required"
                    },
                    {
                        "name": "invalid",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "invalid"
                    },
                    {
                        "name": "pattern",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "pattern"
                    },
                    {
                        "name": "disallowed",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "disallowed character"
                    },
                    {
                        "name": "minDate",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "minimum date"
                    },
                    {
                        "name": "maxDate",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "maximum date"
                    },
                    {
                        "name": "minLength",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "minlength"
                    },
                    {
                        "name": "maxLength",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "maxlength"
                    },
                    {
                        "name": "unmatched",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "unmatched"
                    },
                    {
                        "name": "tableRequired",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "tableRequired"
                    },
                    {
                        "name": "invalidDate",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "invalidDate"
                    },
                    {
                        "name": "primaryNumberRequired",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "primarNumberRequired"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "packages/ds/angular/src/lib/jl-cl/jl-cl/validator-types.ts"
            }
        ],
        "groupedVariables": {
            "packages/ds/angular/src/lib/jl-cl/jl-cl/validator-functions/simple-validators.ts": [
                {
                    "name": "allowedPatternValidator",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ds/angular/src/lib/jl-cl/jl-cl/validator-functions/simple-validators.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(allowedPattern: RegExp): ValidatorFn =>\r\n    (control: AbstractControl): ValidationErrors | null => {\r\n        if (!control.value || typeof control.value !== 'string') {\r\n            return null;\r\n        }\r\n        if (allowedPattern.test(control.value)) {\r\n            return null;\r\n        } else {\r\n            let disallowedChars = '';\r\n            [\r\n                ...control.value.replace(\r\n                    new RegExp(`${allowedPattern}`, 'g'),\r\n                    ''\r\n                ),\r\n            ].forEach((character: string) => {\r\n                if (disallowedChars.indexOf(character) === -1) {\r\n                    disallowedChars += character;\r\n                }\r\n            });\r\n\r\n            return {\r\n                [ErrorNames.disallowed]: {\r\n                    disallowedCharacter: disallowedChars,\r\n                },\r\n            };\r\n        }\r\n    }"
                },
                {
                    "name": "disallowedPatternValidator",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ds/angular/src/lib/jl-cl/jl-cl/validator-functions/simple-validators.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(disallowedPattern: RegExp | string, displayPattern: string): ValidatorFn =>\r\n    (control: AbstractControl): ValidationErrors | null => {\r\n        if (!control.value) {\r\n            return null;\r\n        }\r\n        if (control.value.toString().match(disallowedPattern)) {\r\n            return {\r\n                [ErrorNames.pattern]: {\r\n                    displayPattern,\r\n                },\r\n            };\r\n        }\r\n        return null;\r\n    }"
                },
                {
                    "name": "listValidator",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ds/angular/src/lib/jl-cl/jl-cl/validator-functions/simple-validators.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(items: IListItem[]): ValidatorFn =>\r\n    (control: AbstractControl): ValidationErrors | null => {\r\n        return null;\r\n    }"
                },
                {
                    "name": "validatePrimaryNumber",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ds/angular/src/lib/jl-cl/jl-cl/validator-functions/simple-validators.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(\r\n    control: AbstractControl\r\n): ValidationErrors | null => {\r\n    const group = control as FormArray;\r\n    const formArrayValues = group.value;\r\n    return { [ErrorNames.primaryNumberRequired]: {} };\r\n}"
                },
                {
                    "name": "validateTable",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ds/angular/src/lib/jl-cl/jl-cl/validator-functions/simple-validators.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(\r\n    control: AbstractControl\r\n): ValidationErrors | null => {\r\n    const group = control as FormArray;\r\n    if (!group.controls) {\r\n        return null;\r\n    }\r\n\r\n    if (Object.keys(group.controls).length === 0) {\r\n        return {\r\n            [ErrorNames.required]: {},\r\n        };\r\n    } else {\r\n        return null;\r\n    }\r\n}"
                }
            ],
            "packages/ds/angular/src/lib/jl-cl/jl-cl/dynamic-field.directive.ts": [
                {
                    "name": "COMPONENT_TYPES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ds/angular/src/lib/jl-cl/jl-cl/dynamic-field.directive.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n    alertBox: DynFormAlertComponent,\r\n    input: DynTextFieldComponent,\r\n    label: DynFormLabelComponent,\r\n    form: DynFormBaseComponent,\r\n    checkbox: DynCheckboxComponent,\r\n    radio: DynRadioComponent,\r\n    dropdown: DynDropDownComponent,\r\n}"
                }
            ],
            "packages/ds/angular/src/lib/jl-cl/jl-cl/forms.module.ts": [
                {
                    "name": "components",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ds/angular/src/lib/jl-cl/jl-cl/forms.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n    DynTextFieldComponent,\r\n    DynFormLabelComponent,\r\n    DynFormBaseComponent,\r\n    DynCheckboxComponent,\r\n    DynFormErrorComponent,\r\n    DynValidationListComponent,\r\n    DynRadioComponent,\r\n    DynDropDownComponent,\r\n    DynFormAlertComponent,\r\n    JlFormLinkComponent,\r\n    JlFormButtonComponent\r\n]"
                }
            ],
            "sample/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "sample/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "sample/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "packages/ds/angular/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ds/angular/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ds/angular/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "sample/src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "sample/src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  production: true\r\n}"
                }
            ],
            "sample/src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "sample/src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  production: false\r\n}"
                }
            ],
            "stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\r\n  props: args,\r\n})"
                }
            ],
            "stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\r\n  props: args,\r\n})"
                }
            ],
            "stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\r\n  props: args,\r\n})"
                }
            ],
            "packages/ds/angular/src/lib/jl-cl/jl-cl/validator.ts": [
                {
                    "name": "VALIDATOR_TABLE_PRIMARY_NUMBER",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ds/angular/src/lib/jl-cl/jl-cl/validator.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n    primaryNumberRequire: {\r\n        errorName: ErrorNames.primaryNumberRequired,\r\n        validator: validatePrimaryNumber,\r\n        errorMsg: 'ErrorMessage.primaryNumberRequired',\r\n    },\r\n}"
                },
                {
                    "name": "VALIDATOR_TABLE_REQUIRED",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ds/angular/src/lib/jl-cl/jl-cl/validator.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n    tableRequire: {\r\n        errorName: ErrorNames.required,\r\n        validator: validateTable,\r\n        errorMsg: 'ErrorMessage.required',\r\n    },\r\n}"
                },
                {
                    "name": "VALIDATORS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ds/angular/src/lib/jl-cl/jl-cl/validator.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IValidatorModel",
                    "defaultValue": "{\r\n    required: {\r\n        errorName: ErrorNames.required,\r\n        validator: Validators.required,\r\n        errorMsg: 'ErrorMessage.required',\r\n    },\r\n}"
                },
                {
                    "name": "VALIDATORS_DYNAMIC",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ds/angular/src/lib/jl-cl/jl-cl/validator.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IDynamicValidatorModel",
                    "defaultValue": "{\r\n    minDate: (date: Date) =>\r\n        ({\r\n            errorMsg: 'Date is below minimum',\r\n            errorName: ErrorNames.minDate,\r\n            validator: minDateValidator(date),\r\n        } as IValidator),\r\n    maxDate: (date: Date) =>\r\n        ({\r\n            errorMsg: 'Date is above maximum',\r\n            errorName: ErrorNames.maxDate,\r\n            validator: maxDateValidator(date),\r\n        } as IValidator),\r\n    minLength: (minimum: number) => ({\r\n        errorMsg: 'ErrorMessage.MinLength',\r\n        errorName: ErrorNames.minLength,\r\n        validator: Validators.minLength(minimum),\r\n    }),\r\n    maxLength: (maximum: number) => ({\r\n        errorMsg: 'ErrorMessage.MaxLength',\r\n        errorName: ErrorNames.maxLength,\r\n        validator: Validators.maxLength(maximum),\r\n    }),\r\n    allowedPattern: (regex: RegExp) => ({\r\n        errorMsg: 'ErrorMessage.DisallowedCharacter',\r\n        errorName: ErrorNames.disallowed,\r\n        validator: allowedPatternValidator(regex),\r\n    }),\r\n    autocompleteList: (items: IListItem[]) => ({\r\n        errorMsg: 'ErrorMessage.invalid',\r\n        errorName: ErrorNames.invalid,\r\n        validator: listValidator(items),\r\n    }),\r\n    maxCurrencyLength: (maximum: number) => ({\r\n        errorMsg: 'Must contain only numbers, between 0 and 999,999,999', //Text doesn't exist in translation, will update once added\r\n        errorName: ErrorNames.maxLength,\r\n        validator: Validators.maxLength(maximum),\r\n    }),\r\n}"
                }
            ]
        },
        "groupedFunctions": {
            "packages/ds/angular/src/lib/jl-cl/jl-cl/validator-functions/date-validator.ts": [
                {
                    "name": "maxDateValidator",
                    "file": "packages/ds/angular/src/lib/jl-cl/jl-cl/validator-functions/date-validator.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "ValidatorFn",
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "minDateValidator",
                    "file": "packages/ds/angular/src/lib/jl-cl/jl-cl/validator-functions/date-validator.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "ValidatorFn",
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toCompareDate",
                    "file": "packages/ds/angular/src/lib/jl-cl/jl-cl/validator-functions/date-validator.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "number",
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "packages/ds/angular/src/lib/jl-cl/jl-cl/validator-types.ts": [
                {
                    "name": "ErrorNames",
                    "childs": [
                        {
                            "name": "required",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "required"
                        },
                        {
                            "name": "invalid",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "invalid"
                        },
                        {
                            "name": "pattern",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "pattern"
                        },
                        {
                            "name": "disallowed",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "disallowed character"
                        },
                        {
                            "name": "minDate",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "minimum date"
                        },
                        {
                            "name": "maxDate",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "maximum date"
                        },
                        {
                            "name": "minLength",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "minlength"
                        },
                        {
                            "name": "maxLength",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "maxlength"
                        },
                        {
                            "name": "unmatched",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "unmatched"
                        },
                        {
                            "name": "tableRequired",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "tableRequired"
                        },
                        {
                            "name": "invalidDate",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "invalidDate"
                        },
                        {
                            "name": "primaryNumberRequired",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "primarNumberRequired"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "packages/ds/angular/src/lib/jl-cl/jl-cl/validator-types.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "packages/ds/angular/src/lib/jl-cl/jl-cl/IFormBase.ts": [
                {
                    "name": "ConditionCheck",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "packages/ds/angular/src/lib/jl-cl/jl-cl/IFormBase.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                }
            ],
            "packages/ds/angular/src/lib/jl-cl/jl-cl/ITableBase.ts": [
                {
                    "name": "ConditionCheck",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "packages/ds/angular/src/lib/jl-cl/jl-cl/ITableBase.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": "packages/ds/angular/src/lib/angular.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AngularComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "packages/ds/angular/src/lib/angular.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AngularService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "packages/ds/angular/src/lib/jl-cl/jl-cl/IFormBase.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IAddressAutocompleteProps",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "packages/ds/angular/src/lib/jl-cl/jl-cl/IFormBase.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IAddressAutocompleteType",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "packages/ds/angular/src/lib/jl-cl/jl-cl/IFormBase.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IAlertConfig",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "packages/ds/angular/src/lib/jl-cl/jl-cl/IFormBase.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IConfig",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "packages/ds/angular/src/lib/jl-cl/jl-cl/IFormBase.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICurrentStatusInCanadaReadOnlyConfig",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "packages/ds/angular/src/lib/jl-cl/jl-cl/IFormBase.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDatepickerConfig",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "packages/ds/angular/src/lib/jl-cl/jl-cl/IFormBase.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDateProps",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "packages/ds/angular/src/lib/jl-cl/jl-cl/IFormBase.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IFieldConfig",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "packages/ds/angular/src/lib/jl-cl/jl-cl/IFormBase.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IFormConfig",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "packages/ds/angular/src/lib/jl-cl/jl-cl/IFormBase.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IInfoBoxConfig",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "packages/ds/angular/src/lib/jl-cl/jl-cl/IFormBase.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IListItem",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "packages/ds/angular/src/lib/jl-cl/jl-cl/IFormBase.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IListType",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "packages/ds/angular/src/lib/jl-cl/jl-cl/IFormBase.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPresentationConfig",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "packages/ds/angular/src/lib/jl-cl/jl-cl/IFormBase.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ISelectProps",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "packages/ds/angular/src/lib/jl-cl/jl-cl/IFormBase.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IStaticAutocompleteConfig",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "packages/ds/angular/src/lib/jl-cl/jl-cl/IFormBase.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ISubtitleConfig",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "packages/ds/angular/src/lib/jl-cl/jl-cl/ITableBase.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ITableColumnConfig",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "packages/ds/angular/src/lib/jl-cl/jl-cl/ITableBase.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ITableConfig",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "packages/ds/angular/src/lib/jl-cl/jl-cl/ITableBase.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ITableTransformDisplayOptions",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "packages/ds/angular/src/lib/jl-cl/jl-cl/dynamic-field.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "DynamicFieldDirective",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "packages/ds/angular/src/lib/jl-cl/jl-cl/dynamic-field.directive.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IField",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "packages/ds/angular/src/lib/jl-cl/jl-cl/dynamic-field.directive.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "COMPONENT_TYPES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ds/angular/src/lib/jl-cl/jl-cl/form-base/form-base.ts",
                "type": "component",
                "linktype": "component",
                "name": "DynFormBaseComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "packages/ds/angular/src/lib/jl-cl/jl-cl/forms.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "components",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ds/angular/src/lib/jl-cl/jl-cl/jl-base-field.ts",
                "type": "component",
                "linktype": "component",
                "name": "BaseFieldComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "packages/ds/angular/src/lib/jl-cl/jl-cl/jl-form-alert/jl-form-alert.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DynFormAlertComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "packages/ds/angular/src/lib/jl-cl/jl-cl/jl-form-button/jl-form-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "JlFormButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "packages/ds/angular/src/lib/jl-cl/jl-cl/jl-form-checkbox/jl-form-checkbox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DynCheckboxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "packages/ds/angular/src/lib/jl-cl/jl-cl/jl-form-dropdown/jl-form-dropdown.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DynDropDownComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "packages/ds/angular/src/lib/jl-cl/jl-cl/jl-form-error/jl-form-error.ts",
                "type": "component",
                "linktype": "component",
                "name": "DynFormErrorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "packages/ds/angular/src/lib/jl-cl/jl-cl/jl-form-error/jl-form-error.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IFormErrorInfoArray",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "packages/ds/angular/src/lib/jl-cl/jl-cl/jl-form-label/jl-form-label.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DynFormLabelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "packages/ds/angular/src/lib/jl-cl/jl-cl/jl-form-link/jl-form-link.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "JlFormLinkComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "packages/ds/angular/src/lib/jl-cl/jl-cl/jl-form-radio/jl-form-radio.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DynRadioComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "packages/ds/angular/src/lib/jl-cl/jl-cl/jl-form-textfield/jl-form-textfield.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DynTextFieldComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "packages/ds/angular/src/lib/jl-cl/jl-cl/jl-list-field.ts",
                "type": "component",
                "linktype": "component",
                "name": "ListFieldComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "packages/ds/angular/src/lib/jl-cl/jl-cl/jl-validation-list/jl-validation-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DynValidationListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "packages/ds/angular/src/lib/jl-cl/jl-cl/validator-functions/date-validator.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "maxDateValidator",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ds/angular/src/lib/jl-cl/jl-cl/validator-functions/date-validator.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "minDateValidator",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ds/angular/src/lib/jl-cl/jl-cl/validator-functions/date-validator.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "toCompareDate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ds/angular/src/lib/jl-cl/jl-cl/validator-functions/simple-validators.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "allowedPatternValidator",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ds/angular/src/lib/jl-cl/jl-cl/validator-functions/simple-validators.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "disallowedPatternValidator",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ds/angular/src/lib/jl-cl/jl-cl/validator-functions/simple-validators.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "listValidator",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ds/angular/src/lib/jl-cl/jl-cl/validator-functions/simple-validators.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "validatePrimaryNumber",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ds/angular/src/lib/jl-cl/jl-cl/validator-functions/simple-validators.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "validateTable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ds/angular/src/lib/jl-cl/jl-cl/validator.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDynamicValidatorModel",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ds/angular/src/lib/jl-cl/jl-cl/validator.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IValidator",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "packages/ds/angular/src/lib/jl-cl/jl-cl/validator.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IValidatorModel",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ds/angular/src/lib/jl-cl/jl-cl/validator.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "VALIDATOR_TABLE_PRIMARY_NUMBER",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ds/angular/src/lib/jl-cl/jl-cl/validator.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "VALIDATOR_TABLE_REQUIRED",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ds/angular/src/lib/jl-cl/jl-cl/validator.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "VALIDATORS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ds/angular/src/lib/jl-cl/jl-cl/validator.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "VALIDATORS_DYNAMIC",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ds/angular/src/template/footer/footer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FooterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "packages/ds/angular/src/template/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "packages/ds/angular/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ds/angular/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "sample/src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "sample/src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "sample/src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "sample/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "sample/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/User.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            }
        ]
    }
}