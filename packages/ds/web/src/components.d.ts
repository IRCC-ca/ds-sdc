/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface MyComponent {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
        /**
          * Theme
         */
        "theme": string;
    }
    interface WebButton {
        /**
          * (optional) aria-label for <button> element
         */
        "ariaLabelBtn"?: string;
        /**
          * (optional) Category for <button> custom element
         */
        "category"?: 'primary' | 'secondary' | 'plain';
        /**
          * (optional) Color attribute for <button> element
         */
        "color"?: 'critical' | 'CTA';
        /**
          * (optional) Disabled attribute for <button> element
         */
        "disabled": boolean;
        /**
          * Button label
         */
        "label": string;
        /**
          * (optional) Name attribute for <button> element
         */
        "name"?: string;
        /**
          * (optional) Size for <button> custom element
         */
        "size"?: 'small' | 'large';
        /**
          * (optional) Types for <button> element
         */
        "type"?: 'button' | 'submit' | 'reset';
        /**
          * (optional)  Value for <button> element
         */
        "value"?: string;
    }
}
declare global {
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLWebButtonElement extends Components.WebButton, HTMLStencilElement {
    }
    var HTMLWebButtonElement: {
        prototype: HTMLWebButtonElement;
        new (): HTMLWebButtonElement;
    };
    interface HTMLElementTagNameMap {
        "my-component": HTMLMyComponentElement;
        "web-button": HTMLWebButtonElement;
    }
}
declare namespace LocalJSX {
    interface MyComponent {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
        /**
          * Theme
         */
        "theme"?: string;
    }
    interface WebButton {
        /**
          * (optional) aria-label for <button> element
         */
        "ariaLabelBtn"?: string;
        /**
          * (optional) Category for <button> custom element
         */
        "category"?: 'primary' | 'secondary' | 'plain';
        /**
          * (optional) Color attribute for <button> element
         */
        "color"?: 'critical' | 'CTA';
        /**
          * (optional) Disabled attribute for <button> element
         */
        "disabled"?: boolean;
        /**
          * Button label
         */
        "label"?: string;
        /**
          * (optional) Name attribute for <button> element
         */
        "name"?: string;
        /**
          * (optional) Size for <button> custom element
         */
        "size"?: 'small' | 'large';
        /**
          * (optional) Types for <button> element
         */
        "type"?: 'button' | 'submit' | 'reset';
        /**
          * (optional)  Value for <button> element
         */
        "value"?: string;
    }
    interface IntrinsicElements {
        "my-component": MyComponent;
        "web-button": WebButton;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
            "web-button": LocalJSX.WebButton & JSXBase.HTMLAttributes<HTMLWebButtonElement>;
        }
    }
}
