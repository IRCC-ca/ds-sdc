@use "../../_util/string" as string;
@use "sass:string" as sass-string;
@use "../../_util/color" as color;
@use "../../layout/layout-var" as token;

$button-selectors: 'button, input[type="button"], input[type="reset"], input[type="submit"], *[role="button"]';

$primary: (
  map: (
    light: (
      role: (
        --background-color: var(--role-700),
        --background-color-hover: var(--role-800),
        --background-color-active: var(--role-900),
        --background-color-disabled: var(--role-300),
      ),
      --text-color: var(--neutral-100),
    ),
    dark: (
      role: (
        --background-color: var(--role-600),
        --background-color-hover: var(--role-500),
        --background-color-active: var(--role-400),
        --background-color-disabled: var(--role-300),
      ),
      --text-color: var(--neutral-1200),
    ),
    all: (
      --border-style: none,
      --text-color-disabled: var(--text-color),
    ),
  ),
  roles: (
    cta,
    critical,
  ),
  selectors: (
    $button-selectors,
    '&[category="primary"], &:not([category])',
  ),
);
$secondary: (
  map: (
    light: (
      role: (
        --text-color: var(--role-700),
        --text-color-disabled: var(--role-300),
        --border-color-active: var(--role-900),
      ),
      --background-color: var(--neutral-900),
    ),
    dark: (
      role: (
        --text-color: var(--role-200),
        --text-color-disabled: var(--role-1000),
        --border-color-active: var(--role-400),
      ),
      --background-color: var(--neutral-300),
    ),
    all: (
      role: (
        --border-color: var(--role-800),
      ),
      --border-style: solid,
      --border-color-disabled: var(--text-color-disabled),
      --default-opacity: "0",
      --hover-opacity: "0.06",
      --active-opacity: "0.12",
    ),
  ),
  roles: (
    cta,
    critical,
  ),
  selectors: (
    $button-selectors,
    '&[category="secondary"]',
  )
);
$plain: (
  map: (
    light: (
      role: (
        --text-color: var(--role-700),
        --text-color-disabled: var(--role-300),
      ),
      --background-color: var(--neutral-900),
    ),
    dark: (
      role: (
        --text-color: var(--role-200),
        --text-color-disabled: var(--role-1000),
      ),
      --background-color: var(--neutral-300),
    ),
    all: (
      --default-opacity: "0",
      --hover-opacity: "0.06",
      --active-opacity: "0.12",
    )
  ),
  roles: (
    cta,
    critical,
  ),
  selectors: (
    $button-selectors,
    '&[category="plain"]',
  )
);

$sizing: (
  map: (
    small: (
      --font-size: token.$relative-1,
      --line-height: token.$relative-1-5,
      --horizontal-padding: 16px,
      --vertical-padding: 8px,
    ),
    large: (
      --font-size: token.$relative-1-25,
      --line-height: token.$relative-1-75,
      --horizontal-padding: 20px,
      --vertical-padding: 12px,
    ),
  ),
  selectors: $button-selectors,
);

@mixin button {
  border-radius: token.$border-radius;
  border-style: var(--border-style);
  font-weight: var(--font-weight);
  font-size: var(--font-size);
  line-height: var(--line-height);
  font-family: "heading";
  max-width: 400px;
  text-align: center;
  padding: var(--vertical-padding) var(--horizontal-padding);
  &:disabled {
    cursor: not-allowed;
  }
}

@mixin primary {
  background-color: color.mix-token(background-color);
  color: color.mix-token(text-color);

  &:hover {
    background-color: color.mix-token(background-color-hover);
  }

  &:active {
    background-color: color.mix-token(background-color-active);
    border-color: color.mix-token(border-color-active);
  }

  &:disabled {
    background-color: color.mix-token(background-color-disabled);
    cursor: not-allowed;
    color: color.mix-token(text-color-disabled);
  }
}
@mixin secondary {
  background-color: color.mix-token(background-color, var(--default-opacity));
  border-color: color.mix-token(border-color);
  color: color.mix-token(text-color);
  &:hover {
    background-color: color.mix-token(background-color, var(--hover-opacity));
  }

  &:active {
    background-color: color.mix-token(background-color, var(--active-opacity));
  }

  &:disabled {
    background-color: inherit;
    color: color.mix-token(text-color-disabled);
  }
}

@mixin plain {
  
  background-color: color.mix-token(background-color, var(--default-opacity));
  color: color.mix-token(text-color);
  &:hover {
    background-color: color.mix-token(background-color, var(--hover-opacity));
  }

  &:active {
    background-color: color.mix-token(background-color, var(--active-opacity));
  }
  &:disabled {
    color: color.mix-token(text-color-disabled);
  }
}
