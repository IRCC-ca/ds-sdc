@use '../../util/color' as color;
@use '../../util/theme' as theme;
@use '../../util/device' as device;
@use '../../util/size' as size;
@use '../template-const' as template-const;
@use '../sizes' as token-size;

@mixin selector {
    [type='checkbox'] {
        @content;
    }
}

@mixin create {
    @at-root {
        #{template-const.$root-selectors} {
            @include selector() {
                @include layout();
            }
        }
    }
}

@mixin layout {
    border-radius: token-size.$border-radius;
    appearance: none;
    margin: token-size.$form-control-margin;
    outline: 0;
    box-sizing: border-box;
    box-shadow: token-size.$border-style;
    vertical-align: top;

    @include checkbox-size();

    @include device.if-hover {
        color: var(--formcontrol-hover);
    }

    &:disabled {
        --border: var(--border-disabled);
        
        & + label {
            color: var(--text-disabled);
        }
    }

    &:enabled {
        &:active {
            --background-color: var(--generic-active);
        }
    }

    @include checked();
    @include invalid();
    @include mixed-state();
}

@mixin checked {
    &:checked  {
        --border: var(--formcontrol); 
        background-color: var(--formcontrol);

        @include create-icon('\f00c');

        &:disabled {
            --border: var(--formcontrol-disabled);
            background-color: var(--formcontrol-disabled);
        }

        &:enabled {
            @include device.if-hover {
                --border: var(--formcontrol-hover);
            }

            &:active {
                --border: var(--formcontrol-hover);
            }
        }
    }
}

@mixin invalid {
    &:invalid {
        --formcontrol: var(--critical-border);
        --background-color: var(--critical-background-weak);
    
        &:enabled {
            @include device.if-hover {
                --border: var(--critical-border-hover);
                --background-color: var(--critical-background-weak-hover);
            }
    
            &:active {
                --border: var(--critical-border-hover);
                --background-color: var(--critical-background-weak-active);
             }
        }
    }
}

@mixin mixed-state {
    &:indeterminate{
        --border: var(--formcontrol);
        background-color: var(--formcontrol);
        
        @include create-icon('\f068');

        &:disabled {
            --border: var(--formcontrol-disabled);
            background: var(--formcontrol-disabled);
        }
    }
}

@mixin checkbox-size {
    @include size.selector(small) {
        width: token-size.$relative-1-25; 
        height: token-size.$relative-1-25;

        &:checked::before, &:indeterminate::before{
            @include icon-size(
                token-size.$relative-0-875,
                token-size.$relative-1,
                token-size.$relative-1, 
                token-size.$relative-1
                );
        }

        @extend .body3;
    }

    @include size.selector(large) {
        width: token-size.$relative-1-5;
        height: token-size.$relative-1-5;

        &:checked::before, &:indeterminate::before {
            @include icon-size(
                token-size.$relative-1-125,
                token-size.$relative-1-25,
                token-size.$relative-1-25,
                token-size.$relative-1-25
                );
        }

        @extend .body2;
    }
}

@mixin icon-size($width, $height, $font-size, $line-height) {
    width: $width;
    height: $height;
    left: calc(50% - $width / 2);
    top: calc(50% - $height / 2);
    font-size: $font-size;
    line-height: $line-height;
}

@mixin create-icon($content) {
    &::before {
        content: $content;
        color: var(--surface1);
        position: relative;

        @extend .fa-regular;
    }
}
