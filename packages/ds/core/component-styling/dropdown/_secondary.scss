@use '../../util/color' as color;
@use '../../tokens/text' as text;
@use '../../util/theme' as theme;
@use '../../tokens/template-const' as template-const;
@use './dropdown-const' as dropdown-const;
@use '../../util/device' as device;
@use '../../tokens/sizes' as sizes;
$secondary: 'secondary';
$default-color: null;
@mixin tokens($palette: cta) {
    @include theme.select-attribute($palette, color, $default-color) {
        --border: var(--text);
        @include theme.light {
            @include device.if-hover {
                --secondary-border-hover: #{color.mix-token($palette, 800)};
            }
            --secondary-text: #{color.mix-token($palette, 700)};
            --secondary-text-disabled: #{color.mix-token($palette, 300)};
            --secondary-border-active: #{color.mix-token($palette, 900)};
        }
        @include theme.dark {
            @include device.if-hover {
                --secondary-border-hover: #{color.mix-token($palette, 300)};
            }
            --secondary-text: #{color.mix-token($palette, 400)};
            --secondary-text-disabled: #{color.mix-token($palette, 1000)};
            --secondary-border-active: #{color.mix-token($palette, 200)};
        }
        --text: var(--secondary-text);
    }
}

@mixin create(
    $palette: (
        cta,
        critical,
    )
) {
    @include dropdown-const.selectors {
        &:where([category='#{$secondary}'], :not([category])) {
            @each $key in $palette {
                @if not $default-color {
                    $default-color: $key !global;
                }
                @include tokens($key);
            }
            @include layout();
        }
    }
}

@mixin layout() {
    @include dropdown-const.layout();
    select{
        box-shadow: sizes.$border-style;
        background-color: var(--surface1);
        @include device.if-hover {
            background-color: var(--generic-hover);
        }
    }
}
