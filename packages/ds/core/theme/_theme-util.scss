@use "sass:map";
@import "../_util/string";

///
///
///
@mixin varsForMap($hue-map, $colour-map: "", $str-prefix: "", $replace: "role") {
  @each $key, $value in $hue-map {
    @if type-of($value) == map {
      @include varsForMap($value, $colour-map, #{$str-prefix}-#{$key});
    } @else {
      #{str-prefix(#{$key})}: var(
        str-prefix(#{str-replace($value, $replace, $colour-map)})
      );
    }
  }
}
@mixin create-component-styles($component-settings, $hue-selector) {
  @if (map.has-key($component-settings, roles) == true) {
    @each $colour-role in map-get($component-settings, roles) {
      #{map-get($component-settings, selectors)} {
        &[role="#{$colour-role}"] {
          @include varsForMap(
            map-get($component-settings, map, $hue-selector),
            $colour-role
          );
        }
      }
    }
  } @else {
    #{map-get($component-settings, selectors)} {
      @include varsForMap(
        map-get($component-settings, map, $hue-selector)
      );
    }
  }
}
@mixin create-global-styles($colour-palette) {
  @each $colour-role, $colour-map in $colour-palette {
    @each $hue-key, $hue-val in $colour-map {
      #{str-prefix(#{$colour-role}-#{$hue-key})}: $hue-val;
    }
  }
}

@mixin core($root-palette, $hues, $include-list) {
  @each $colour-mode, $colour-palette in $root-palette {
    @if index(($root-palette), ($colour-mode $colour-palette)) == 1 {
      html {
        @include create-global-styles($colour-palette);
      }
    } @else {
      html[mode="#{$colour-mode}"] {
        @include create-global-styles($colour-palette);
      }
    }
  }
  @each $hue-theme in $hues {
    @if index(($hues), ($hue-theme)) == 1 {
      html {
        @each $component-name, $component-config in $include-list {
          @include create-component-styles($component-config, $hue-theme);
        }
      }
    } @else {
      html[data-theme="#{$hue-theme}"] {
        @each $component-name, $component-config in $include-list {
          @include create-component-styles($component-config, $hue-theme);
        }
      }
    }
  }
}
